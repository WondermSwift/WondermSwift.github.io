<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>美颜滤镜与双边滤波</title>
    <url>/2019/05/19/Bilateral-Filtering/</url>
    <content><![CDATA[<p>知乎上看到一篇风格化图像处理的文章，尝试在Unity里实现下</p>
<span id="more"></span>

<p>原文链接 <a href="https://zhuanlan.zhihu.com/p/57729966?app=zhihulite&utm_campaign=lite_share&invite_code=AGX1MK&sign=MTU1ODE5NzI5NDE5OQ==">QT&#x2F;C++实现卡通漫画风格化</a></p>
<p>效果为磨皮加描边，描边将在未来的文章里介绍<br>本篇只介绍磨皮算法</p>
<h3 id="参考效果"><a href="#参考效果" class="headerlink" title="参考效果"></a>参考效果</h3><p><img src="/2019/05/19/Bilateral-Filtering/Preview.jpg" alt="Preview"></p>
<h3 id="双边滤波"><a href="#双边滤波" class="headerlink" title="双边滤波"></a>双边滤波</h3><p>常见的磨皮算法一般使用<code>双边滤波</code>，对皮肤的部分进行模糊，即对非边缘进行模糊<br>双边滤波采用基于高斯分布的加权平均的方法，同时考虑了像素距离和像素值的差异<br>使得双边滤波在降噪的同时能保留原有边缘</p>
<p>一些基础概念：<a href="https://en.wikipedia.org/wiki/Bilateral_filter">双边滤波器</a></p>
<p><img src="/2019/05/19/Bilateral-Filtering/Edge.jpg" alt="Edge"></p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p>k和l是当前像素的索引，i和j是图片上任意一点的像素索引，w 为权重<br>转化一下 kl 为采样 uv 的当前偏移，ij 就是 uv</p>
<p><img src="/2019/05/19/Bilateral-Filtering/Function.jpg" alt="Function"></p>
<h3 id="在Unity中实现"><a href="#在Unity中实现" class="headerlink" title="在Unity中实现"></a>在Unity中实现</h3><p>核心代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float3 BilateralFilter(float2 uv)</span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line">	float d = _Radius;</span><br><span class="line"></span><br><span class="line">	float ss2 = 2 * _SigmaSpace * _SigmaSpace;</span><br><span class="line">	float sc2 = 2 * _SigmaColor * _SigmaColor;</span><br><span class="line"></span><br><span class="line">	float i = uv.x;</span><br><span class="line">	float j = uv.y;</span><br><span class="line"></span><br><span class="line">	float weightSum = 0;</span><br><span class="line">	float3 filterValue = 0;</span><br><span class="line">	float3 centerCol= tex2D(_MainTex, uv).rgb;</span><br><span class="line"></span><br><span class="line">	for (int k = -d; k &lt;= d; k++)   </span><br><span class="line">	&#123;</span><br><span class="line">		for (int l = -d; l &lt;= d; l++)</span><br><span class="line">		&#123;</span><br><span class="line">			float2 curUV =uv+ _MainTex_TexelSize.xy*float2( k,l);</span><br><span class="line">			float3 curCol = tex2D(_MainTex, curUV);</span><br><span class="line"></span><br><span class="line">			float value_Square = dot(curCol - centerCol, curCol - centerCol);</span><br><span class="line">			float distance_Square = distance(curUV, uv)*d;</span><br><span class="line"></span><br><span class="line">			float weight = exp(-1 * (distance_Square / ss2 + value_Square / sc2));</span><br><span class="line">			weightSum += weight;</span><br><span class="line">			filterValue += (weight * curCol);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	filterValue =filterValue / weightSum;</span><br><span class="line">	return filterValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p>通过对权重公式的修改，可以很容易的实现原本想要的卡通的笔触</p>
<p><img src="/2019/05/19/Bilateral-Filtering/Final.jpg" alt="Final"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://zhuanlan.zhihu.com/p/57729966">QT&#x2F;C++实现卡通漫画风格化</a><br><a href="https://zhuanlan.zhihu.com/p/57768192">三行MATLAB实现动漫风格照片</a><br><a href="https://blog.csdn.net/u013921430/article/details/84532068">【图像处理】——双边滤波</a><br><a href="https://www.jianshu.com/p/90feece27a04">Unity Shader 实现磨皮效果</a><br><a href="https://github.com/YuAo/YUCIHighPassSkinSmoothing">YUCIHighPassSkinSmoothing</a></p>
]]></content>
      <categories>
        <category>Shader</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Image Effect</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>C#中Attribute的学习和使用</title>
    <url>/2015/09/24/CSharp-Attribute-01/</url>
    <content><![CDATA[<p>有时我们需要给某些类或者属性以及方法添加描述，使得开发更加方便<br>例如：</p>
<ol>
<li>常见的序列化、编译指令等</li>
<li>把一个Excel的表反射到一个实体类中，属性和表头一一对应</li>
<li>开发Unity编辑器扩展时常用到的<code>[MenuItem(&quot;Assets/XXX&quot;)]</code></li>
</ol>
<p>此时我们需要给方法或者属性打上标签，在程序运行时查看这些标签，很容易扩展出方便的功能	</p>
<span id="more"></span>
<h3 id="Attribute的介绍"><a href="#Attribute的介绍" class="headerlink" title="Attribute的介绍"></a>Attribute的介绍</h3><blockquote>
<p>参考下面的链接：<br>    <a href="http://www.cnblogs.com/luckdv/articles/1682488.html" title="C# 特性(Attribute) 详细介绍">http://www.cnblogs.com/luckdv/articles/1682488.html</a><br>    <a href="http://www.cnblogs.com/rohelm/archive/2012/04/19/2456088.html" title="C#特性详解">http://www.cnblogs.com/rohelm/archive/2012/04/19/2456088.html</a><br>    <a href="https://msdn.microsoft.com/en-us/library/system.attribute.aspx" title="MSDN">https://msdn.microsoft.com/en-us/library/system.attribute.aspx</a></p>
</blockquote>
<h3 id="使用自定义Attribute"><a href="#使用自定义Attribute" class="headerlink" title="使用自定义Attribute"></a>使用自定义Attribute</h3><ul>
<li>属性类是从 <code>System.Attribute</code> 派生，至少有一个公共构造函数</li>
<li><code>AttributeUsage</code>用于指定该特性的使用范围，参数可以是定位参数、未命名参数或命名参数</li>
<li>特性可以对于同一实体多次指定</li>
<li>特性的属性也可以通过反射来获取</li>
</ul>
<p>定义一个数据表的简单特性类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 此类用于数据表格数据类的特性</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 仅可用于类和属性</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">[<span class="meta">AttributeUsage (AttributeTargets.Class | AttributeTargets.Property , AllowMultiple = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">DBReader</span> : <span class="title">Attribute</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> 表名</span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">string</span> tableName;</span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> 表头</span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">string</span> rowName;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DBReader</span> ()</span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DBReader</span> (<span class="params"><span class="built_in">string</span> _tableName</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.tableName = _tableName;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用定义的特性标记目标数据类</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">DBReader (tableName = <span class="string">&quot;Data&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestData</span></span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	[<span class="meta">DBReader (rowName = <span class="string">&quot;yyy&quot;</span>)</span>]</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> y&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">	[<span class="meta">DBReader (rowName = <span class="string">&quot;XXX&quot;</span>)</span>]</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> x&#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过反射获取添加的标记</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> 反射查找类和属性的标记</span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>The 1st type parameter.<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowAttributes</span>&lt;<span class="title">T</span>&gt; ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		Type objType = <span class="keyword">typeof</span>(T);</span><br><span class="line">		<span class="built_in">object</span>[] objs = objType.GetCustomAttributes (<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">		DBReader db = objs [<span class="number">0</span>] <span class="keyword">as</span> DBReader;</span><br><span class="line">		Debug.Log (objType.Name + <span class="string">&quot;:&quot;</span> + db.tableName);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">foreach</span> (PropertyInfo propInfo <span class="keyword">in</span> objType.GetProperties()) &#123;</span><br><span class="line">			</span><br><span class="line">			<span class="built_in">object</span>[] objAttrs = propInfo.GetCustomAttributes (<span class="keyword">typeof</span>(DBReader), <span class="literal">true</span>);</span><br><span class="line">			DBReader oo = objAttrs [<span class="number">0</span>] <span class="keyword">as</span> DBReader;</span><br><span class="line"></span><br><span class="line">			Debug.Log (propInfo.Name + <span class="string">&quot;(&quot;</span> + propInfo.ToString () + <span class="string">&quot;):&quot;</span> + oo.rowName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<blockquote>
<p>TestData:Data<br>y(System.Int32 y):yyy<br>x(System.Int32 x):XXX</p>
</blockquote>
<p>通过反射来赋值</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 通过反射赋值</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The data.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;typeparam name=&quot;T&quot;&gt;</span>The 1st type parameter.<span class="doctag">&lt;/typeparam&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">SetData</span>&lt;<span class="title">T</span>&gt; ()</span></span><br><span class="line">&#123;</span><br><span class="line">	T result = (T)System.Activator.CreateInstance (<span class="keyword">typeof</span>(T));</span><br><span class="line">	<span class="built_in">object</span>[] objs = result.GetType ().GetCustomAttributes (<span class="literal">true</span>);</span><br><span class="line">	DBReader db = objs [<span class="number">0</span>] <span class="keyword">as</span> DBReader;</span><br><span class="line">	 </span><br><span class="line"></span><br><span class="line">	<span class="keyword">foreach</span> (PropertyInfo propInfo <span class="keyword">in</span> result.GetType().GetProperties()) &#123;</span><br><span class="line">		<span class="built_in">object</span>[] objAttrs = propInfo.GetCustomAttributes (<span class="keyword">typeof</span>(DBReader), <span class="literal">true</span>);</span><br><span class="line">		DBReader oo = objAttrs [<span class="number">0</span>] <span class="keyword">as</span> DBReader;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (oo.rowName == <span class="string">&quot;XXX&quot;</span>) &#123;</span><br><span class="line">			propInfo.SetValue (result, <span class="number">100</span>, <span class="literal">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (oo.rowName == <span class="string">&quot;yyy&quot;</span>) &#123;</span><br><span class="line">			propInfo.SetValue (result, <span class="number">111</span>, <span class="literal">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Debug.Log (data.x);</span><br><span class="line">Debug.Log (data.y);</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<blockquote>
</blockquote>
<p>100<br>111</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>通过对数据类的标记，将数据表的名字和表头的名字标记出来<br>通过反射来实例化数据对象，即可通过一个数据类对应一张表的方式和策划愉快合作<br>增删字段改表的名字代码可拥有最小的改动量</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#解析CSV映射实体类列表</title>
    <url>/2015/09/27/CSharp-DbMngr-CSV/</url>
    <content><![CDATA[<p>解析excel表格作为配置数据，excel解析太复杂，xml字段冗余太多，对于特殊符号的支持也不是很好，json并不适合表格数据，可读性太差。<br>决定选用CSV，以文本方式读取，自己写代码解析</p>
<span id="more"></span>
<h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><ol>
<li>以流的形式读取CSV文本</li>
<li>将流解析为二维字符串数组</li>
<li>反射为实体类的列表</li>
</ol>
<h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>之所以要以流的方式读取，并把这一块拆分出来，是为了方便以后文本加密，不用修改其他地方，具体的代码就不用贴了</p>
<h3 id="解析为数组"><a href="#解析为数组" class="headerlink" title="解析为数组"></a>解析为数组</h3><p>将流先按行切割，分割符为’\r’，Mac OS X下为’\r’，win下据说是’\n’没试，暂且预处理写上，待验证<br>使用正则表达式，将每一行切为N个column，表达式如下:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Regex (<span class="string">@&quot;</span></span><br><span class="line"><span class="string">        # Parse CVS line. Capture next value in named group: &#x27;val&#x27;</span></span><br><span class="line"><span class="string">        \s*                      # Ignore leading whitespace.</span></span><br><span class="line"><span class="string">        (?:                      # Group of value alternatives.</span></span><br><span class="line"><span class="string">          &quot;&quot;                     # Either a double quoted string,</span></span><br><span class="line"><span class="string">          (?&lt;val&gt;                # Capture contents between quotes.</span></span><br><span class="line"><span class="string">            [^&quot;&quot;]*(&quot;&quot;&quot;&quot;[^&quot;&quot;]*)*  # Zero or more non-quotes, allowing </span></span><br><span class="line"><span class="string">          )                      # doubled &quot;&quot; quotes within string.</span></span><br><span class="line"><span class="string">          &quot;&quot;\s*                  # Ignore whitespace following quote.</span></span><br><span class="line"><span class="string">        |  (?&lt;val&gt;[^,]*)         # Or... zero or more non-commas.</span></span><br><span class="line"><span class="string">        )                        # End value alternatives group.</span></span><br><span class="line"><span class="string">        (?:,|$)                  # Match end is comma or EOS. &quot;</span></span><br><span class="line">			, RegexOptions.Multiline | RegexOptions.IgnorePatternWhitespace);</span><br></pre></td></tr></table></figure>

<p>切完之后会多出来许多空字符串，判一下空移除掉即可<br><strong>注意：由于此处移除空字符串，所以要求表格中不能存在空字符串，否则会错位</strong></p>
<p>切完之后存进二维数组即可</p>
<h3 id="映射实体类"><a href="#映射实体类" class="headerlink" title="映射实体类"></a>映射实体类</h3><p>依据之前的方法<a href="../../../../../2015/09/24/CSharp-Attribute-01">[C#中Attribute的学习和使用]</a>二维字符串解析为数据类，核心代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">	<span class="comment"><span class="doctag">///</span>数组分割线</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">char</span>[] spliteArry = &#123; <span class="string">&#x27;|&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">List</span>&lt;<span class="title">T</span>&gt; <span class="title">Parse</span>&lt;<span class="title">T</span>&gt;(<span class="params">List&lt;List&lt;<span class="built_in">string</span>&gt;&gt; lines</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Type objType = <span class="keyword">typeof</span>(T);</span><br><span class="line">           List&lt;T&gt; result = <span class="keyword">new</span> List&lt;T&gt;(); </span><br><span class="line"></span><br><span class="line">           <span class="built_in">string</span>[] header = lines[<span class="number">0</span>].ToArray();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; lines.Count; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               T item = (T)System.Activator.CreateInstance(<span class="keyword">typeof</span>(T));</span><br><span class="line">               PropertyInfo[] propInfos = objType.GetProperties();</span><br><span class="line">               <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; lines[i].Count; j++)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="built_in">string</span> column = lines[i][j];</span><br><span class="line">                   <span class="keyword">foreach</span> (PropertyInfo info <span class="keyword">in</span> propInfos)</span><br><span class="line">                   &#123;</span><br><span class="line">                       DBAttribute oo = info.GetCustomAttributes(<span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> DBAttribute;</span><br><span class="line">                       <span class="keyword">if</span> (header[j].Equals(oo.rowName))</span><br><span class="line">                       &#123;</span><br><span class="line">                           SetValue(info, item, column);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                       &#125; </span><br><span class="line">                   &#125;</span><br><span class="line">		 			</span><br><span class="line">			</span><br><span class="line">               &#125;</span><br><span class="line">               result.Add(item);</span><br><span class="line">           &#125;</span><br><span class="line">	 </span><br><span class="line">           <span class="keyword">return</span> result;</span><br><span class="line">		 </span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">static</span> T <span class="title">SetValue</span>&lt;<span class="title">T</span>&gt;(<span class="params">PropertyInfo info, T instance, <span class="built_in">string</span> data</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="built_in">object</span> obj = <span class="literal">null</span>;</span><br><span class="line">           <span class="built_in">string</span>[] strArr;</span><br><span class="line">           strArr = data.Split(spliteArry);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (info.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">string</span>))</span><br><span class="line">           &#123;</span><br><span class="line">               obj = data;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (info.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">int</span>))</span><br><span class="line">           &#123;</span><br><span class="line">               obj = <span class="built_in">int</span>.Parse(data);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (info.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">float</span>))</span><br><span class="line">           &#123;</span><br><span class="line">               obj = <span class="built_in">float</span>.Parse(data);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (info.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">string</span>[]))</span><br><span class="line">           &#123;</span><br><span class="line">               obj = strArr;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (info.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">int</span>[]))</span><br><span class="line">           &#123;</span><br><span class="line">               List&lt;<span class="built_in">int</span>&gt; intList = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;(); </span><br><span class="line">               <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strArr.Length; i++)</span><br><span class="line">               &#123;</span><br><span class="line">                   intList.Add(<span class="built_in">int</span>.Parse(strArr[i]));</span><br><span class="line">               &#125;</span><br><span class="line">               obj = intList.ToArray();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (info.PropertyType == <span class="keyword">typeof</span>(<span class="built_in">float</span>[]))</span><br><span class="line">           &#123;</span><br><span class="line">               List&lt;<span class="built_in">float</span>&gt; floatList = <span class="keyword">new</span> List&lt;<span class="built_in">float</span>&gt;(); </span><br><span class="line">               <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strArr.Length; i++)</span><br><span class="line">               &#123;</span><br><span class="line">                   floatList.Add(<span class="built_in">float</span>.Parse(strArr[i]));</span><br><span class="line">               &#125;</span><br><span class="line">               obj = floatList.ToArray();</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="built_in">string</span> error_1 = (instance.GetType().GetCustomAttributes(<span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> DBAttribute).tablePath;</span><br><span class="line">               <span class="built_in">string</span> error_2 = (info.GetCustomAttributes(<span class="literal">true</span>)[<span class="number">0</span>] <span class="keyword">as</span> DBAttribute).rowName;</span><br><span class="line">               Debug.LogError(<span class="string">&quot;type error in table [&quot;</span> + error_1 + <span class="string">&quot;] in row [&quot;</span> + error_2 + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           info.SetValue(instance, obj, <span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">return</span> instance;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>使用’|’作为数组的分隔符，所以不允许数组元素表格中存在非分割符的竖线，暂时没遇到冲突，等到遇到了再额外处理</p>
<h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><p>至此，已将CSV解析为实体类，调用方法如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;FinalRam&gt; list = DBMngr.LoadData&lt;FinalRam&gt; ();</span><br></pre></td></tr></table></figure>
<p>已通过测试无误</p>
]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#复制文件夹</title>
    <url>/2015/05/05/CSharp-copy-Directory/</url>
    <content><![CDATA[<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private static void CopyFolder (string from, string to)</span><br><span class="line">&#123;</span><br><span class="line">	if (!Directory.Exists (to))</span><br><span class="line">		Directory.CreateDirectory (to);</span><br><span class="line"></span><br><span class="line">	// 子文件夹</span><br><span class="line">	foreach (string sub in Directory.GetDirectories(from))&#123;</span><br><span class="line">		CopyFolder (sub , to + Path.GetFileName (sub)+&quot;/&quot; );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	// 文件</span><br><span class="line">	foreach (string file in Directory.GetFiles(from))&#123;</span><br><span class="line">		File.Copy (file, to +&quot;/&quot;+ Path.GetFileName (file), true);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>C#连接SQLite基本操作(一)</title>
    <url>/2017/06/21/CSharp-Sqlite/</url>
    <content><![CDATA[<p> 近期非常忙，博客没有更新。项目中遇到策划自己写的VBA导出Excel到SQLite数据库，需要装驱动，每次自己想改数据总是很不方便，于是在周末抽空自己写了Excel导入SQLite的工具，<br> 可以Excel中定义字段和基本数据类型，一键导出创建对应数据表，以及从SQLite到C#对象实体化，算是日常造轮子。由于之前项目都是用的同事的数据库解析操作工具，这次正好自己熟悉下基础的数据库操作。</p>
<span id="more"></span>

<h4 id="读取Excel"><a href="#读取Excel" class="headerlink" title="读取Excel"></a>读取Excel</h4><p>网上看了挺多文章，也在Github上看了许多项目但是绝大部分不满足我的需求:源码，不过多依赖外部库，在Unity中可以直接调用。<br>费了一些时间找到一个基本符合要求的<a href="https://github.com/joexi/Excel4Unity">joexi&#x2F;Excel4Unity</a>,读取Excel部分基本完成</p>
<blockquote>
<p>ExcelHelper.LoadExcel(string path)</p>
</blockquote>
<h4 id="SQLite读写操作"><a href="#SQLite读写操作" class="headerlink" title="SQLite读写操作"></a>SQLite读写操作</h4><p><code>_Export</code></p>
<p> 在了解几种C#操作数据库的基本方案，我选择了项目中用到的插件 <code>Community.CsharpSqlite.Unity</code> (出处没有找到),选择原因是已经验证过Win,Mac和PS4平台，其他的方案大都未能验证通过。</p>
<p> 引用之后添加自己的数据库操作方法:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> SQLite;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Community.CsharpSqlite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Wonderm.SQLiteNs</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SQLiteHelper</span> : <span class="title">IDisposable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> static</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 创建数据库文件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;path&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateSQLiteDB</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> SQLiteConnection(path);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span> static</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 数据库连接定义</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> SQLiteConnection dbConnection;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 操作数据库命令</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> SQLiteCommand dbCommand;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 操作结果流</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> SQLiteDataReader dbReader;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 数据读取定义</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;path&quot;&gt;</span>路径<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;write&quot;&gt;</span>开启写模式文件不存在时会自动创建<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SQLiteHelper</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">bool</span> write = <span class="literal">false</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                ConnectToDatabase(path, write);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 链接数据库</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConnectToDatabase</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">bool</span> write = <span class="literal">false</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (write)</span><br><span class="line">            &#123;</span><br><span class="line">                dbConnection = <span class="keyword">new</span> SQLiteConnection(path, SQLiteOpenFlags.ReadWrite);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dbConnection = <span class="keyword">new</span> SQLiteConnection(path, SQLiteOpenFlags.ReadOnly);</span><br><span class="line">            &#125;</span><br><span class="line">            dbReader = <span class="keyword">new</span> SQLiteDataReader();</span><br><span class="line">            dbCommand = dbConnection.CreateCommand(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> SQLiteDataReader <span class="title">ExecuteQuery</span>(<span class="params"><span class="built_in">string</span> queryString</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            dbCommand.CommandText = queryString;</span><br><span class="line">            dbReader.SetCmd(dbCommand);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dbReader;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 关闭数据库连接</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CloseConnection</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            (<span class="keyword">this</span> <span class="keyword">as</span> IDisposable).Dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 创建数据表</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span> +</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The table.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tableName&quot;&gt;</span>数据表名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;colNames&quot;&gt;</span>字段名<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;colTypes&quot;&gt;</span>字段名类型<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CreateTable</span>(<span class="params"><span class="built_in">string</span> tableName, <span class="built_in">string</span>[] colNames, <span class="built_in">string</span>[] colTypes</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> queryString = <span class="string">&quot;CREATE TABLE &quot;</span> + tableName + <span class="string">&quot;( &quot;</span> + colNames[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + colTypes[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; colNames.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                queryString += <span class="string">&quot;, &quot;</span> + colNames[i] + <span class="string">&quot; &quot;</span> + colTypes[i];</span><br><span class="line">            &#125;</span><br><span class="line">            queryString += <span class="string">&quot;  ) &quot;</span>;</span><br><span class="line"></span><br><span class="line">            dbConnection.Execute(queryString);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 向指定数据表中插入数据</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>The values.<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tableName&quot;&gt;</span>数据表名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;values&quot;&gt;</span>插入的数值<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertValues</span>(<span class="params"><span class="built_in">string</span> tableName, <span class="built_in">string</span>[] values</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> queryString = <span class="string">&quot;INSERT INTO &quot;</span> + tableName + <span class="string">&quot; VALUES (&quot;</span> + values[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; values.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                queryString += <span class="string">&quot;, &quot;</span> + <span class="string">&quot;&#x27;&quot;</span> + values[i] + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            queryString += <span class="string">&quot; )&quot;</span>;</span><br><span class="line">            dbConnection.Execute(queryString);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 读取整张表</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;table&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SQLiteDataReader <span class="title">ReadFullTable</span>(<span class="params"><span class="built_in">string</span> tableName</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> query = <span class="string">&quot;SELECT * FROM &quot;</span> + tableName;</span><br><span class="line">            <span class="keyword">return</span> ExecuteQuery(query);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 读取一行</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tableName&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SQLiteDataReader <span class="title">ReadSingle</span>(<span class="params"><span class="built_in">string</span> tableName, <span class="built_in">string</span> item, <span class="built_in">string</span> col, <span class="built_in">string</span> operation, <span class="built_in">string</span> values</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> query = <span class="string">&quot;SELECT &quot;</span> + item + <span class="string">&quot; FROM &quot;</span> + tableName + <span class="string">&quot; WHERE &quot;</span> + col + operation + values;</span><br><span class="line">            <span class="keyword">return</span> ExecuteQuery(query);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> IDisposable.Dispose()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dbReader != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dbReader.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line">            dbReader = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dbCommand != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dbCommand.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line">            dbCommand = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (dbConnection != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dbConnection.Close();</span><br><span class="line">            &#125;</span><br><span class="line">            dbConnection = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Excel2SQLite"><a href="#Excel2SQLite" class="headerlink" title="Excel2SQLite"></a>Excel2SQLite</h4><p>读写搞定了之后需要解决转换的问题，添加转换脚本读取Excel中以<code>_Export</code>为后缀的表,根据表头创建表</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;<span class="built_in">string</span>&gt; TypeLimits = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">       <span class="string">&quot;INTEGER&quot;</span>,</span><br><span class="line">       <span class="string">&quot;TEXT&quot;</span>,</span><br><span class="line">       <span class="string">&quot;REAL&quot;</span>,</span><br><span class="line">       <span class="string">&quot;BLOB&quot;</span>,</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Convert</span>(<span class="params">SQLiteHelper db, Excel excel</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       List&lt;<span class="built_in">string</span>&gt; colNames = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">       List&lt;<span class="built_in">string</span>&gt; coltypes = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">foreach</span> (<span class="keyword">var</span> table <span class="keyword">in</span> excel.Tables)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span> (!table.TableName.EndsWith(ExportExtra)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">           <span class="meta">#<span class="keyword">region</span> 创建表</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (table.NumberOfRows &lt; <span class="number">2</span>)</span><br><span class="line">           &#123;</span><br><span class="line">               Debug.LogError(<span class="string">&quot;Data format error : NumberOfRows is less than 2&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="built_in">string</span> tableName = table.TableName.Replace(ExportExtra, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= table.NumberOfColumns; j++)</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="keyword">if</span> (colNames.Contains(table.GetCell(<span class="number">1</span>, j).Value))</span><br><span class="line">                   &#123;</span><br><span class="line">                       Debug.LogError(<span class="built_in">string</span>.Format(<span class="string">&quot;tableName [&#123;0&#125;] repeated in table [&#123;1&#125;]&quot;</span>, table.GetCell(<span class="number">1</span>, j).Value, table.TableName));</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   colNames.Add(table.GetCell(<span class="number">1</span>, j).Value);</span><br><span class="line">                   <span class="keyword">var</span> cel = table.GetCell(<span class="number">2</span>, j).Value;</span><br><span class="line">                   <span class="keyword">if</span> (!TypeLimits.Contains(cel))</span><br><span class="line">                   &#123;</span><br><span class="line">                       Debug.LogError(<span class="built_in">string</span>.Format(<span class="string">&quot;Type error in table [&#123;0&#125;] in (&#123;1&#125;,&#123;2&#125;) error type &#123;3&#125;&quot;</span>, tableName, <span class="number">2</span>, j, cel));</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line"></span><br><span class="line">                   coltypes.Add(cel);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (colNames.Count != coltypes.Count)</span><br><span class="line">               &#123;</span><br><span class="line">                   Debug.LogError(<span class="string">&quot;ColNames do not match ColTypes in count : &quot;</span> + table.TableName);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               db.CreateTable(tableName, colNames.ToArray(), coltypes.ToArray());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">#<span class="keyword">endregion</span> 创建表</span></span><br><span class="line"></span><br><span class="line">           <span class="meta">#<span class="keyword">region</span> 插入数据</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">3</span>; i &lt;= table.NumberOfRows; i++)</span><br><span class="line">           &#123;</span><br><span class="line">               List&lt;<span class="built_in">string</span>&gt; cols = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">               <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt;= table.NumberOfColumns; j++)</span><br><span class="line">               &#123;</span><br><span class="line">                   cols.Add(table.GetCell(i, j).Value);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (colNames.Count != cols.Count)</span><br><span class="line">               &#123;</span><br><span class="line">                   Debug.LogError(<span class="string">&quot;ColNames do not match Cols in count : &quot;</span> + table.TableName);</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               db.InsertValues(tableName, cols.ToArray());</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="meta">#<span class="keyword">endregion</span> 插入数据</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="SQLite对象实体化"><a href="#SQLite对象实体化" class="headerlink" title="SQLite对象实体化"></a>SQLite对象实体化</h4><p>这部分是体力活，看了下其他人的代码根据自己的需求实现了个新的</p>
<p>分成两部分:</p>
<ol>
<li>DbReader 负责根据类型标注的 Attribute 进行映射，实体对象创建</li>
<li>Converter 负责从SQLReader转换为基础的数据类型</li>
</ol>
<p>内部实现无非是解析 Attribute 类型比对，数据拆分</p>
<p>基本数据类例子如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[DbReader.DbTable(&quot;Test2&quot;)]</span><br><span class="line">public class Test2Data</span><br><span class="line">&#123;</span><br><span class="line">    [DbReader.DbField(&quot;ID&quot;)]</span><br><span class="line">    public int ID;</span><br><span class="line"></span><br><span class="line">    [DbReader.DbField(&quot;Name&quot;)]</span><br><span class="line">    public string Name;</span><br><span class="line"></span><br><span class="line">    [DbReader.DbField(&quot;Type&quot;)]</span><br><span class="line">    public int Type;</span><br><span class="line"></span><br><span class="line">    [DbReader.DbField(&quot;Desc&quot;)]</span><br><span class="line">    public string Desc;</span><br><span class="line"></span><br><span class="line">    [DbReader.DbField(&quot;HP&quot;)]</span><br><span class="line">    public float HP;</span><br><span class="line"></span><br><span class="line">    [DbReader.DbField(&quot;MP&quot;)]</span><br><span class="line">    public float MP;</span><br><span class="line"></span><br><span class="line">    [DbReader.DbField(&quot;Monster&quot;)]</span><br><span class="line">    public bool Monster;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>转化接口:  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var db = new SQLiteHelper(SqlitePath, false);</span><br><span class="line">var datas = DbReader.Read&lt;Test2Data&gt;(db);</span><br></pre></td></tr></table></figure>

<p>转换效果:<br><img src="/2017/06/21/CSharp-Sqlite/Excel2SQLite.png" alt="Excel2SQLite"></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>SQLite</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>CommandBuffer与ImageEffect实践-----Outline</title>
    <url>/2019/05/26/CommandBufferAndImageEffect-Outline/</url>
    <content><![CDATA[<p>今天来实现上次留下的描边</p>
<span id="more"></span>

<p><code>CommandBuffer_Outline</code></p>
<h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><p><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/Final_ScreenEffect_Bloom.png" alt="Preview_1"></p>
<h3 id="描边算法的一般原理"><a href="#描边算法的一般原理" class="headerlink" title="描边算法的一般原理"></a>描边算法的一般原理</h3><h4 id="NdotV-边缘发光"><a href="#NdotV-边缘发光" class="headerlink" title="NdotV 边缘发光"></a>NdotV 边缘发光</h4><p>视线方向与法线方向 dot ，检测边缘<br>适合面数多形状复杂的模型<br>对于硬边的基本几何体如Cube等无解</p>
<h4 id="Backface-正面剔除"><a href="#Backface-正面剔除" class="headerlink" title="Backface 正面剔除"></a>Backface 正面剔除</h4><p>多加一个 Pass 只渲染背面，将顶点沿法线向外挤出<br>是最普遍的描边方式 , 高要求的团队可以定制各种风格<br>对于硬边几何体如Cube会出现面断开的问题<br>需要专门处理顶点的法线保证其连续</p>
<p>处理方式可以参照下面几篇文章中介绍的方法<br>3D软件中平滑法线<br><a href="https://www.videopoetics.com/tutorials/pixel-perfect-outline-shaders-unity/">Pixel-Perfect Outline Shaders for Unity</a><br><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/VertNormal_1.png" alt="VertNormal_1"></p>
<p>编写引擎工具自动检测法线并修改<br><a href="https://blog.naver.com/mnpshino/221495979665">유니티 외곽선 셰이더 완벽정리편</a><br><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/VertNormal_2.png" alt="VertNormal_2"></p>
<h4 id="Edge-Detection-图像边缘检测"><a href="#Edge-Detection-图像边缘检测" class="headerlink" title="Edge Detection 图像边缘检测"></a>Edge Detection 图像边缘检测</h4><p>图像处理中常见的使用 Sobel 算子来进行边缘检测<br>高质量的检测一般通过如下三个步骤</p>
<ol>
<li>Sobel Color</li>
<li>Sobel Depth</li>
<li>Laplacian Depth and Normal</li>
</ol>
<p>基本概念：<a href="https://en.wikipedia.org/wiki/Sobel_operator">Sobel operator</a><br>本次我们参考一篇已经实现了上述过程的文章<br><a href="https://roystan.net/articles/outline-shader.html">Outline Shader</a></p>
<p>基于屏幕后期的描边可以保证像素对齐，距离无关的控制描边宽度等<br>不需要对模型制作流程有影响，可以针对屏幕深度和法线做特殊处理</p>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ol>
<li>可选对象</li>
<li>屏幕后期描边</li>
<li>对象描边颜色可修改</li>
<li>其他后期叠加兼容</li>
</ol>
<h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><h4 id="对象标记"><a href="#对象标记" class="headerlink" title="对象标记"></a>对象标记</h4><p>之前做过  <a href="/2019/03/04/CommandBuffer-01/" title="CommandBuffer_01 标记特殊区域">CommandBuffer_01 标记特殊区域</a> ，复用代码得到Mask图像<br>本次我们允许指定颜色，每对象单独指定材质球且实时更新，通过CommandBuffer渲染到指定 RT 上</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">outlineBuffer = <span class="keyword">new</span> CommandBuffer();</span><br><span class="line">outlineBuffer.name = <span class="string">&quot;Outline&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重置当内容更新或有对象被移除</span></span><br><span class="line"><span class="comment">//深度参数务必保留用于计算正确的遮挡关系</span></span><br><span class="line"> 	outlineBuffer.Clear();</span><br><span class="line">   outlineBuffer.GetTemporaryRT(outlineMaskId, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">24</span>, FilterMode.Bilinear);</span><br><span class="line">   outlineBuffer.SetRenderTarget(outlineMaskId);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//变更对象时更新Render</span></span><br><span class="line">   render.Update();</span><br><span class="line">   outlineBuffer.DrawRenderer(render.render, render.mat);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="参数准备"><a href="#参数准备" class="headerlink" title="参数准备"></a>参数准备</h4><p>传入基本参数</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Matrix4x4 clipToView = GL.GetGPUProjectionMatrix(cam.projectionMatrix, <span class="literal">true</span>).inverse;</span><br><span class="line">Shader.SetGlobalMatrix(clipToViewId, clipToView);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (outlineMat == <span class="literal">null</span>) &#123;</span><br><span class="line">		outlineMat = <span class="keyword">new</span> Material(Shader.Find(<span class="string">&quot;Hiddin/Wonderm/ScreenEffect/Outline&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">outlineMat.SetFloat(outlineWidthId, outlineWidth);</span><br><span class="line">outlineMat.SetColor(outlineColorId, outlineColor);</span><br><span class="line">outlineMat.SetFloat(thresholdId, threshod);</span><br><span class="line">outlineMat.SetFloat(insideID, inside ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">outlineMat.SetFloat(fillAllID, fillAll ? <span class="number">1</span> : <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>后期参数声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">sampler2D _MainTex;</span><br><span class="line">float4 _MainTex_TexelSize;</span><br><span class="line"></span><br><span class="line">sampler2D _CameraDepthTexture;</span><br><span class="line">sampler2D _CameraNormalsTexture;</span><br><span class="line"></span><br><span class="line">sampler2D _OutlineMaskTex;</span><br></pre></td></tr></table></figure>

<h4 id="后期处理"><a href="#后期处理" class="headerlink" title="后期处理"></a>后期处理</h4><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnRenderImage</span>(<span class="params">RenderTexture sourceTexture, RenderTexture destTexture</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (outlineBuffer == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Graphics.Blit(sourceTexture, destTexture);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Graphics.Blit(sourceTexture, destTexture, outlineMat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p>描边<br><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/Final_ScreenEffect.png" alt="Final_ScreenEffect"></p>
<p>外描边<br><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/Final_ScreenEffect_Outside.png" alt="Final_ScreenEffect_Outside"></p>
<p>填充<br><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/Final_ScreenEffect_FillAll.png" alt="Final_ScreenEffect_FillAll"></p>
<h4 id="原理图解"><a href="#原理图解" class="headerlink" title="原理图解"></a>原理图解</h4><p><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/ScreenEffect_Frame.png" alt="ScreenEffect_Frame"></p>
<h4 id="缺陷修复"><a href="#缺陷修复" class="headerlink" title="缺陷修复"></a>缺陷修复</h4><p>后期效果并没有与 Unity 的 PostProcessV2 叠加<br><code>AA</code> 和 <code>Bloom</code> 完全避开了我们的描边<br>打开 <code>FrameDebug</code> 一探究竟</p>
<p>描边的工作原理如下<br><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/NoPostReason.png" alt="NoPostReason"></p>
<p>蓝色为描边的流程，上面的是对象绘制，下面的是后期描边<br>红色的是  PostProcessV2 的处理<br>我们的后期工作在 Unity 的后期之后了</p>
<p>通过对后期方法添加属性标记让他工作在 PostProcessV2 之前即可<br>并且将 Mask 图的格式改为 ARGBFloat 来支持 HDR  </p>
<p>修改代码</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">	outlineBuffer.GetTemporaryRT(outlineMaskId, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">24</span>, FilterMode.Bilinear, RenderTextureFormat.ARGBFloat);</span><br><span class="line"></span><br><span class="line"> 	[<span class="meta">ImageEffectOpaque</span>]</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnRenderImage</span>(<span class="params">RenderTexture sourceTexture, RenderTexture destTexture</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (outlineBuffer == <span class="literal">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Graphics.Blit(sourceTexture, destTexture);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		Graphics.Blit(sourceTexture, destTexture, outlineMat);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再次检视 <code>FrameDebug</code> 看到了我们预期的效果</p>
<p><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/Final_ScreenEffect_Frame.png" alt="Final_ScreenEffect_Frame"></p>
<h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/Final_ScreenEffect_Bloom.png" alt="Final_ScreenEffect_Bloom"><br><img src="/2019/05/26/CommandBufferAndImageEffect-Outline/Final_ScreenEffect.png" alt="Final_ScreenEffect"></p>
<p>但是这篇文章还不能结束，因为发现 PostProcessV2 并没有使用 <code>OnRenderImage</code> 方法<br>他的所有方法都在 Post-processing 里实现了<br>那么下篇我们也通过一样的方法来实现后期效果</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://halisavakis.com/my-take-on-shaders-edge-detection-image-effect/">Edge detection image effect</a><br><a href="https://www.videopoetics.com/tutorials/pixel-perfect-outline-shaders-unity/">Pixel-Perfect Outline Shaders for Unity</a><br><a href="https://blog.naver.com/mnpshino/221495979665">유니티 외곽선 셰이더 완벽정리편</a><br><a href="http://williamchyr.com/2015/08/edge-detection-shader-deep-dive-part-1-even-or-thinner-edges/">Edge Detection Shader Deep Dive</a><br><a href="https://roystan.net/articles/outline-shader.html">Outline Shader</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Image Effect</tag>
        <tag>CommandBuffer</tag>
      </tags>
  </entry>
  <entry>
    <title>C#动态向类添加方法</title>
    <url>/2015/05/14/CSharp-this/</url>
    <content><![CDATA[<p> 动态的向某个类添加静态函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">namespace ExtensionMethods</span><br><span class="line">&#123;</span><br><span class="line">	public static class MyExtensions</span><br><span class="line">	&#123;</span><br><span class="line">		public static int WordCount(this String str)</span><br><span class="line">		&#123;</span><br><span class="line">			return str.Split(new char[] &#123; &#x27; &#x27;, &#x27;.&#x27;, &#x27;?&#x27; &#125;, StringSplitOptions.RemoveEmptyEntries).Length;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>这就是向String类中添加了一个静态函数叫WordCount<br>使用的时候</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string s = &quot;Hello Extension Methods&quot;;</span><br><span class="line">int i = s.WordCount();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C#</category>
      </categories>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>CommandBuffer_01 标记特殊区域</title>
    <url>/2019/03/04/CommandBuffer-01/</url>
    <content><![CDATA[<p>之前贝尔矩阵模糊的问题一直没有解决，最近有时间看了一下 <code>CommandBuffer</code> 的内容实现了一下比我想像的要简单的多</p>
<span id="more"></span>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><a href="https://docs.unity3d.com/ScriptReference/Rendering.CommandBuffer.html">命令缓冲区</a> 是预先写好的一系列渲染指令，可以在给定的时机插入到相机的渲染过程中<br>由于 <code>GrabPass</code> 效率感人，基本上毛玻璃Bloom标记之类的常使用 <code>CommandBuffer</code> 来实现</p>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>这次我们改造之前使用相机拍摄的半透明矩阵模糊区域，彻底告别额外相机和 <code>Stencil</code><br>做一个清爽的实现<br>模糊和 <code>Dither</code> 已经实现了直接用现成的，现在只要把模糊区域在 <code>RT</code> 中标记出来放入 <code>Mask</code> 即可</p>
<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><ul>
<li>DrawRenderer ( render，mat )  类似之前使用过的 ShaderReplace </li>
<li>SetRenderTarget ( RenderTargetIdentifier rt ) 指定接收的 RT</li>
<li>ClearRenderTarget  清空内容</li>
<li>GetTemporaryRT  获取 RT</li>
<li>SetGlobalTexture 通过 RTId 来传递 Mask 给材质球</li>
</ul>
<p>值得在意的是，这些方法都在没有内容变更时均只需要调用一次</p>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>创建 <code>Buffer</code> , 由于我们并不希望Buffer被绘制为可见，所以把时机放在 <code>AfterLighting</code> ，并且我们需要深度来进行遮挡剔除</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">buffer = <span class="keyword">new</span> CommandBuffer();</span><br><span class="line">buffer.name = <span class="string">&quot;Dither CommandBuffer&quot;</span>;</span><br><span class="line"></span><br><span class="line">cam.depthTextureMode = DepthTextureMode.Depth;</span><br><span class="line">cam.AddCommandBuffer(CameraEvent.AfterLighting, buffer);</span><br></pre></td></tr></table></figure>

<p>获取 <code>RT</code>，使用 <code>GetRT</code> 和 <code>SetRT</code> </p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (target != selectObj.obj.GetComponent&lt;Renderer&gt;())</span><br><span class="line">&#123;</span><br><span class="line">            ditherTexId = Shader.PropertyToID(<span class="string">&quot;_Temp1&quot;</span>);</span><br><span class="line">            buffer.GetTemporaryRT(ditherTexId, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">24</span>, FilterMode.Bilinear);</span><br><span class="line">            buffer.SetRenderTarget(ditherTexId);</span><br><span class="line">            buffer.ClearRenderTarget(<span class="literal">true</span>, <span class="literal">true</span>, Color.black);</span><br><span class="line"></span><br><span class="line">            target = selectObj.obj.GetComponent&lt;Renderer&gt;();</span><br><span class="line">            buffer.DrawRenderer(target, ditherMat);</span><br><span class="line">         			buffer.SetGlobalTexture(maskTexId, ditherTexId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>绘制用的 Shader 需要能够进行深度裁剪，需要特殊处理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">vertexOutput <span class="title function_">vert</span><span class="params">(vertexInput input)</span></span><br><span class="line">&#123;</span><br><span class="line">	vertexOutput output;</span><br><span class="line">	output.pos = UnityObjectToClipPos(input.vertex);</span><br><span class="line">       output.texCoord = input.texCoord;</span><br><span class="line">       </span><br><span class="line">       output.screenPos = ComputeScreenPos(output.pos);</span><br><span class="line">       output.linearDepth = -(UnityObjectToViewPos(input.vertex).z * _ProjectionParams.w);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float4 <span class="title function_">frag</span><span class="params">(vertexOutput input)</span> : COLOR</span><br><span class="line">&#123;</span><br><span class="line">       float4 c = float4(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">	float2 uv = input.screenPos.xy / input.screenPos.w; </span><br><span class="line">	<span class="type">float</span> camDepth = SAMPLE_DEPTH_TEXTURE(_CameraDepthTexture, uv);</span><br><span class="line">	camDepth = Linear01Depth (camDepth); </span><br><span class="line"></span><br><span class="line">      <span class="type">float</span> diff = saturate(input.linearDepth - camDepth);</span><br><span class="line">       c =lerp(c, float4(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>),diff  &lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> c;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>如此我们就可以实现了想要的效果 切换选择发现边缘也没有瑕疵<br><img src="/2019/03/04/CommandBuffer-01/Blur_1.png" alt="Blur_1"><br><img src="/2019/03/04/CommandBuffer-01/Blur_2.png" alt="Blur_2"></p>
<p>在 FrameDebug 里查看  Mask 输出<br><img src="/2019/03/04/CommandBuffer-01/Final.png" alt="FrameDebug"></p>
<h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><ol>
<li>可影通过 Mask 传递Alpha值选择最终的混合强度</li>
<li>目前是背景模糊了，如果是只有半透明则需要两个 <code>Buffer</code> ，第一个绘制挖洞的模型，第二个模糊区域混合后在后期进行叠加，模型本身不需要相机渲染</li>
</ol>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Image Effect</tag>
        <tag>CommandBuffer</tag>
      </tags>
  </entry>
  <entry>
    <title>FileWatcher</title>
    <url>/2017/01/05/FileWatcher/</url>
    <content><![CDATA[<p>最近玩<a href="http://store.steampowered.com/app/431960/">Wallpaper Engine</a>停不下来，同事用Unity撸壁纸玩，需要监听配置文件修改，于是顺带学习了一下 </p>
<span id="more"></span>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StartWatch</span>(<span class="params"><span class="built_in">string</span> path, <span class="built_in">string</span> filter, FileSystemEventHandler onChange</span>)</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (watcher == <span class="literal">null</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          watcher = <span class="keyword">new</span> FileSystemWatcher();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      watcher.Path = path;</span><br><span class="line">      watcher.Filter = filter;</span><br><span class="line"></span><br><span class="line">      watcher.Changed += onChange;</span><br><span class="line">      watcher.Deleted += onChange;</span><br><span class="line">      watcher.Created += onChange;</span><br><span class="line"></span><br><span class="line">      watcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite;</span><br><span class="line"></span><br><span class="line">      watcher.EnableRaisingEvents = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>File</tag>
        <tag>Watcher</tag>
      </tags>
  </entry>
  <entry>
    <title>CommandBuffer与PostProcess实践-----Outline</title>
    <url>/2019/05/26/CommandBufferAndPostProcess-Outline/</url>
    <content><![CDATA[<p>上篇说到 Unity 没有使用 <code>OnRenderImage</code> 方法，再来实现一个新的</p>
<span id="more"></span>

<p><code>CommandBuffer_Outline</code></p>
<p><code>PostProcessV2</code> 没有使用相机的后期，先来分析可能的方法<br>既然我们可以通过 <code>CommandBuffer.DrawRenderer</code> 的方式来绘制用于描边 Mesh<br>那么我们在相机前方绘制一个 始终朝向相机的 <code>Quad</code> 不就可以了么<br>通过某种方式获取到当前帧渲染的结构就可以完全绕过 <code>OnRenderImage</code></p>
<h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><p><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/Final.png" alt="Preview_1"></p>
<h3 id="实现动机"><a href="#实现动机" class="headerlink" title="实现动机"></a>实现动机</h3><p>既然已经可以在 ImageEffect 阶段实现了， 为什么还要做这些事情</p>
<h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><p><code>OnRenderImage</code> 存在诸多限制<br>时序上我们只有 <code>ImageEffectOpaque</code> 一个标记用来选择是在后期的半透前还是后进行处理<br>参数上只有源 <code>source</code> 和目标 <code>dest</code> , 很多可能要用到的中间参数会在这个阶段之前被舍弃</p>
<h4 id="自由扩展"><a href="#自由扩展" class="headerlink" title="自由扩展"></a>自由扩展</h4><p>很多时候要得不只是后期，并且需要能够在光照之前进行处理<br>有些针对性的效果可以极大的节省工作流程和时间</p>
<ol>
<li>毛玻璃光照：在透明面板绘制前拿到渲染内容，避免移动端消耗巨大的的 GrabPass</li>
<li>雨雪天气效果：在光照反射之前获取到 Gbuffer ，改变其颜色，光滑度，附加纹理动画，在低成本下可以实现很好的效果</li>
<li>风格化渲染：一些 NPR 渲染会在特定阶段干预调整渲染效果</li>
<li>以及更多 GamePlay 相关创意</li>
</ol>
<h3 id="理论分析"><a href="#理论分析" class="headerlink" title="理论分析"></a>理论分析</h3><p>描边部分的整个实现和上一篇基本没有区别<br>使用 CommandBuffer<br>将当前 CameraTarget 渲染到 RT 上<br>屏幕前 BillBoard 的 Quad 使用描边材质渲染</p>
<h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><p>在查阅资料时，发现了一篇对 <code>PostProcessV2</code> 深入解读的文章<br><a href="http://geekfaner.com/unity/blog11_PostProcessStackV2.html">PostProcessStackV2详解</a><br>从中我们可以学到本文需要的所有知识</p>
<h4 id="绘制-Quad"><a href="#绘制-Quad" class="headerlink" title="绘制 Quad"></a>绘制 Quad</h4><p>创建一个专门用于最终效果合成的 Buffer ，绘制到屏幕前</p>
<p>Quad 创建</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MeshUtils</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="meta">#<span class="keyword">region</span> FullScreen Mesh</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">private</span> <span class="keyword">static</span> Mesh fullScreenMesh;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> Mesh FullScreenMesh</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">get</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="keyword">if</span> (fullScreenMesh != <span class="literal">null</span>)</span><br><span class="line">                  <span class="keyword">return</span> fullScreenMesh;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">var</span> vertices = <span class="keyword">new</span>[]</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">new</span> Vector3(<span class="number">-1f</span>, <span class="number">-1f</span>, <span class="number">0f</span>),</span><br><span class="line">                  <span class="keyword">new</span> Vector3( <span class="number">1f</span>,  <span class="number">1f</span>, <span class="number">0f</span>),</span><br><span class="line">                  <span class="keyword">new</span> Vector3( <span class="number">1f</span>, <span class="number">-1f</span>, <span class="number">0f</span>),</span><br><span class="line">                  <span class="keyword">new</span> Vector3(<span class="number">-1f</span>,  <span class="number">1f</span>, <span class="number">0f</span>)</span><br><span class="line">              &#125;;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">var</span> uvs = <span class="keyword">new</span>[]</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">new</span> Vector2(<span class="number">0f</span>, <span class="number">0f</span>),</span><br><span class="line">                  <span class="keyword">new</span> Vector2(<span class="number">1f</span>, <span class="number">1f</span>),</span><br><span class="line">                  <span class="keyword">new</span> Vector2(<span class="number">1f</span>, <span class="number">0f</span>),</span><br><span class="line">                  <span class="keyword">new</span> Vector2(<span class="number">0f</span>, <span class="number">1f</span>)</span><br><span class="line">              &#125;;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">var</span> indices = <span class="keyword">new</span>[] &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line">              fullScreenMesh = <span class="keyword">new</span> Mesh</span><br><span class="line">              &#123;</span><br><span class="line">                  vertices = vertices,</span><br><span class="line">                  uv = uvs,</span><br><span class="line">                  triangles = indices</span><br><span class="line">              &#125;;</span><br><span class="line">              fullScreenMesh.RecalculateNormals();</span><br><span class="line">              fullScreenMesh.RecalculateBounds();</span><br><span class="line"></span><br><span class="line">              <span class="keyword">return</span> fullScreenMesh;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">#<span class="keyword">endregion</span> FullScreen Mesh</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>绘制</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">outlineBuffer = <span class="keyword">new</span> CommandBuffer();</span><br><span class="line">outlineBuffer.name = <span class="string">&quot;Wonderm_Outline_Effect&quot;</span>;</span><br><span class="line"></span><br><span class="line">outlineBuffer.DrawMesh(Wonderm.Shared.MeshUtils.FullScreenMesh, Matrix4x4.identity, mat, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>先使用纯色 Shader 看下效果<br><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/ScreenQuad.png" alt="ScreenQuad"></p>
<p> 然后在修改顶点 Shader 让它面向屏幕</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">v2f <span class="title function_">vert</span> <span class="params">(appdata v)</span></span><br><span class="line">&#123;</span><br><span class="line">	v2f o;</span><br><span class="line">	o.vertex = v.vertex;</span><br><span class="line"></span><br><span class="line">	<span class="meta">#<span class="keyword">if</span> UNITY_UV_STARTS_AT_TOP</span></span><br><span class="line">		o.uv.xy = v.uv.xy * float2(<span class="number">1.0</span>, <span class="number">-1.0</span>) + float2(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">	<span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">		o.texcoord.xy = v.texcoord.xy;</span><br><span class="line">	<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">		o.uv.zw = UnityStereoTransformScreenSpaceTex(o.uv.xy);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整个屏幕已经是一片红色了</p>
<h4 id="描边绘制"><a href="#描边绘制" class="headerlink" title="描边绘制"></a>描边绘制</h4><p>参照上一篇把代码移植过来实现描边<br>效果如下<br><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/NoBaseMap.png" alt="NoBaseMap"></p>
<p>流程基本跑通，看一眼 <code>FrameDebug</code><br><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/LostCurScreenTex.png" alt="LostCurScreenTex"></p>
<h4 id="获取-CameraTarget"><a href="#获取-CameraTarget" class="headerlink" title="获取 CameraTarget"></a>获取 CameraTarget</h4><p>通过 <code>FrameDebug</code> 检视一番<br>Unity 通过 <code>Hidden/PostProcessing/CopyStd</code> 将 CameraTarget 渲染到 RT 中<br>使用的以下方法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">context.GetScreenSpaceTemporaryRT(cmd, tempRt, <span class="number">0</span>, sourceFormat, RenderTextureReadWrite.sRGB);</span><br><span class="line">cmd.BuiltinBlit(cameraTarget, tempRt, RuntimeUtilities.copyStdMaterial, stopNaNPropagation ? <span class="number">1</span> : <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p><code>BuiltinBlit</code> ??? !!!!! FuckUnity</p>
<p>Google 一下得到答案<br>(How to get screen buffer RenderTargetIdentifier](<a href="https://forum.unity.com/threads/how-to-get-screen-buffer-rendertargetidentifier.320410/]">https://forum.unity.com/threads/how-to-get-screen-buffer-rendertargetidentifier.320410/]</a></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> width = cam.pixelWidth;</span><br><span class="line"><span class="built_in">int</span> height = cam.pixelHeight;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//下面的代码在 CMD新增时不可信  FuckUnity</span></span><br><span class="line"><span class="comment">int width = Screen.width;</span></span><br><span class="line"><span class="comment">int height = Screen.height;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">bool</span> changed = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (tempTex == <span class="literal">null</span> || tempTex.width != width || tempTex.height != height)</span><br><span class="line">&#123;</span><br><span class="line">    changed = <span class="literal">true</span>;</span><br><span class="line">    RenderTexture.Destroy(tempTex);</span><br><span class="line"></span><br><span class="line">    tempTex = <span class="keyword">new</span> RenderTexture(width, height, <span class="number">32</span>, UnityEngine.Experimental.Rendering.GraphicsFormat.R32G32B32A32_SFloat);</span><br><span class="line">    tempTex.name = <span class="string">&quot;CurScreen&quot;</span> + tempTex.GetInstanceID();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (changed &amp;&amp; curScrren != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    curScrren.Clear();</span><br><span class="line">    curScrren.Blit(BuiltinRenderTextureType.CurrentActive, tempTex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此实现已经完成，看下效果<br><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/Final_Bloom.png" alt="Final_Bloom"></p>
<h3 id="原理图解"><a href="#原理图解" class="headerlink" title="原理图解"></a>原理图解</h3><p><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/Postprocess_Frame.png" alt="Postprocess_Frame"></p>
<h3 id="修复与改进"><a href="#修复与改进" class="headerlink" title="修复与改进"></a>修复与改进</h3><h4 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h4><p>移动相机看下动态效果，竟然漂移了，查看下 Mask 贴图，果然是没有清理</p>
<p><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/Bug_1.png" alt="Bug_1"><br><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/Bug_2.png" alt="Bug_2"></p>
<p>上篇写的后期也忘记清理了，设置渲染目标之后清除一下即可<br>代码如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">maskBuffer.GetTemporaryRT(ShaderIds.outlineMaskId, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">24</span>, FilterMode.Bilinear, RenderTextureFormat.ARGBFloat);</span><br><span class="line">maskBuffer.SetRenderTarget(ShaderIds.outlineMaskId);</span><br><span class="line">maskBuffer.ClearRenderTarget(<span class="literal">true</span>, <span class="literal">true</span>, Color.black);</span><br></pre></td></tr></table></figure>

<h4 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h4><p>目前可以看到我们的实现使用了三个  <code>CommandBuffer</code> 而 Unity 只使用了一个</p>
<p><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/PostProcess_CommondBuffer_Frame.png" alt="PostProcess_CommondBuffer_Frame"></p>
<p>改进的方案有如下几种</p>
<ol>
<li>使用一个 Buffer ，内部区分 Stack 来叠加不同效果</li>
<li>保持当前结构，将中间阶段和最终混合阶段Buffer变成通用，总数量为2+N</li>
</ol>
<p>目前只有描边的需求，未来扩展依据项目进行定制，描边部分的迁移是很简单的</p>
<h4 id="独立的原因"><a href="#独立的原因" class="headerlink" title="独立的原因"></a>独立的原因</h4><p>为什么选择自己写，而不是直接给 <code>PostProcessV2</code> 写扩展</p>
<p>按照Unity一贯的逻辑，大版本更新和 RP 的切换会导致 PostProcess 的完全改变<br>包括资源和 API 的变更，使用 Unity 的不能保证安全的过渡<br>比如 V1 到 V2 的升级基本重写，相同参数结果不一致<br>又比如现在的 HDRP 突然自己实现了一套 PostProcess ，且完全不兼容 PostProcessV2</p>
<h4 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h4><p><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/Final.png" alt="Final_1"><br><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/Final_Bloom.png" alt="Final_2"><br><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/Final_FillAll.png" alt="Final_3"><br><img src="/2019/05/26/CommandBufferAndPostProcess-Outline/Final_WithoutInside.png" alt="Final_4"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://forum.unity.com/threads/how-to-get-screen-buffer-rendertargetidentifier.320410/">How to get screen buffer RenderTargetIdentifier</a><br><a href="http://geekfaner.com/unity/blog11_PostProcessStackV2.html">PostProcessStackV2详解</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Image Effect</tag>
        <tag>CommandBuffer</tag>
      </tags>
  </entry>
  <entry>
    <title>博客迁移</title>
    <url>/2015/06/11/FirstPage/</url>
    <content><![CDATA[<p>换了新的博客，废弃以前的WordPress和QQ空间以及各种博客类产品</p>
<p>最近越来越懒了，不能再这样下去，恰巧看到了一个新的博客框架，简洁美观，Git部署的方式也很适合码农，那…就搬过来吧</p>
<span id="more"></span>

<p> <a href="http://hexo.io/">hexo</a> 是一个非常不错的博客框架</p>
<p> markdown的语法也相当不错的说</p>
<p> 啊啊啊  明天要早起出去玩  就酱紫 后天再接着撸</p>
<p> coding.net不支持索引中文路径  这个bug很严重<br> 已经反馈了  后台也给了回应 希望早点搞定吧   </p>
<p> 2015-06-13<br> 开始博客迁移</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>Halftone (半调)</title>
    <url>/2019/05/11/HalfTone-01/</url>
    <content><![CDATA[<p>今天在群里看到了一张图，似乎在知乎上看到过叫做半调，于是决定自己思考动手实践下</p>
<span id="more"></span>

<h3 id="参考效果"><a href="#参考效果" class="headerlink" title="参考效果"></a>参考效果</h3><p>参考图</p>
<p><img src="/2019/05/11/HalfTone-01/Example.png" alt="Example"></p>
<p>效果很常见，可以肯定是后期效果，<a href="https://store.steampowered.com/app/653530/Return_of_the_Obra_Dinn/">Return of the Obra Dinn</a> 中也有用到，并且提供了非常特殊的美术效果，那么以还原为目标</p>
<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p>图片来自微博上购买的指环王主题明信片<br>一套八张 这是第一张, 作者 <code>Veronica Hsu</code> , 最后有全部图片</p>
<p><img src="/2019/05/11/HalfTone-01/Pre.jpg" alt="输入"><br><img src="/2019/05/11/HalfTone-01/Final.jpg" alt="输出"></p>
<h3 id="制作思路"><a href="#制作思路" class="headerlink" title="制作思路"></a>制作思路</h3><p>分析下基本处理流程</p>
<ol>
<li>像素化</li>
<li>灰化-&gt;深度增强</li>
<li>色阶分离</li>
<li>Dither-&gt;混合</li>
</ol>
<p>基本都是做过的<br>翻出过去的代码拼凑一番就有效果了</p>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="像素化"><a href="#像素化" class="headerlink" title="像素化"></a>像素化</h4><p>之前的代码 <a href="/2015/10/19/Shader-Image-Effect-01/" title="Shader 屏幕后期特效-01">Shader 屏幕后期特效-01</a><br>半径为8</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float2 block = _MainTex_TexelSize.xy * _BlockSize;</span><br><span class="line">float2 uv = trunc(i.uv / block) * block;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/05/11/HalfTone-01/Pixel.jpg" alt="Pixel"></p>
<h4 id="灰化"><a href="#灰化" class="headerlink" title="灰化"></a>灰化</h4><p>只是灰化效果不好<br>把三通道加起来求平均<br>然后平方增强对比</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float vall = (col.r + col.g + col.b) / 3;</span><br><span class="line">vall = pow(vall, 2);</span><br></pre></td></tr></table></figure>

<p><img src="/2019/05/11/HalfTone-01/GrayScale.jpg" alt="GrayScale"></p>
<h4 id="色阶分离"><a href="#色阶分离" class="headerlink" title="色阶分离"></a>色阶分离</h4><p>一般这里会使用一张 <code>LookupTex</code><br>这里由于还不知道什么样的范围比较合适<br>直接手写了, 按照参考图分三级<br>一波参数调节</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float step1 = step(_Step_1, vall);</span><br><span class="line">color = lerp(color, _Color_1, 1 - step1);</span><br></pre></td></tr></table></figure>

<p><img src="/2019/05/11/HalfTone-01/Splite.jpg" alt="Splite"></p>
<h4 id="Dither"><a href="#Dither" class="headerlink" title="Dither"></a>Dither</h4><p>是时候祭出贝尔矩阵了 </p>
<a href="/2018/03/04/Unity-Shader-Dithering-Transparent/" title="贝尔矩阵和后期模糊实现半透明">贝尔矩阵和后期模糊实现半透明</a>
<p>这次选取8x8的 ，可以看下不同细分的表现如何</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float2 uv2 = i.uv.xy / i.uv.w * _ScreenParams.xy;</span><br><span class="line">float dither = ClipByDither8x8(1, uv2/ scale);</span><br><span class="line">color = 1 - (1 - color)  * dither;;</span><br></pre></td></tr></table></figure>
<p><img src="/2019/05/11/HalfTone-01/Dither.jpg" alt="Dither"></p>
<h4 id="Mask"><a href="#Mask" class="headerlink" title="Mask"></a>Mask</h4><p>为了风格化， 每个像素点的形状希望可以控制<br>加入 Mask 可以做一些拼接的效果<br>选择 <code>Default-Particle</code> 做个测试<br>由于希望圆形的尺寸一致直接x12</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float2 uv3 = uv2  / scale;</span><br><span class="line">fixed4 mask = tex2D(_MaskTex, uv3 );</span><br><span class="line">mask =  clamp( mask * 12 ,0,1);</span><br><span class="line">mask = lerp(1-dither, mask, mask &gt;= 0);</span><br><span class="line">color =1-(1-color)* mask * dither;</span><br></pre></td></tr></table></figure>

<p><img src="/2019/05/11/HalfTone-01/Mask.jpg" alt="Mask"></p>
<h4 id="天空盒剔除"><a href="#天空盒剔除" class="headerlink" title="天空盒剔除"></a>天空盒剔除</h4><p>简单取下深度接近1的 输出白色</p>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/2019/05/11/HalfTone-01/Example_1_0.jpg" alt="Example_1_0"><br><img src="/2019/05/11/HalfTone-01/Example_1_1.jpg" alt="Example_1_1"><br><img src="/2019/05/11/HalfTone-01/Example_2_0.jpg" alt="Example_2_0"><br><img src="/2019/05/11/HalfTone-01/Example_2_1.jpg" alt="Example_2_1"><br><img src="/2019/05/11/HalfTone-01/Example_3_0.jpg" alt="Example_3_0"><br><img src="/2019/05/11/HalfTone-01/Example_3_1.jpg" alt="Example_3_1"><br><img src="/2019/05/11/HalfTone-01/Example_4_0.jpg" alt="Example_4_0"><br><img src="/2019/05/11/HalfTone-01/Example_4_1.jpg" alt="Example_4_1"></p>
<p>修改参数更换 Mask 可以产生不同的风格</p>
<h3 id="原图"><a href="#原图" class="headerlink" title="原图"></a>原图</h3><p><img src="/2019/05/11/HalfTone-01/Pic_01.jpg" alt="Pic_01"><br><img src="/2019/05/11/HalfTone-01/Pic_02.jpg" alt="Pic_02"><br><img src="/2019/05/11/HalfTone-01/Pic_03.jpg" alt="Pic_03"><br><img src="/2019/05/11/HalfTone-01/Pic_04.jpg" alt="Pic_04"><br><img src="/2019/05/11/HalfTone-01/Pic_05.jpg" alt="Pic_05"><br><img src="/2019/05/11/HalfTone-01/Pic_06.jpg" alt="Pic_06"><br><img src="/2019/05/11/HalfTone-01/Pic_07.jpg" alt="Pic_07"><br><img src="/2019/05/11/HalfTone-01/Pic_08.jpg" alt="Pic_08"></p>
]]></content>
      <categories>
        <category>Shader</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Image Effect</tag>
      </tags>
  </entry>
  <entry>
    <title>在 OS X 上搭建局域网Git服务</title>
    <url>/2016/03/06/LocalGitServer/</url>
    <content><![CDATA[<p>局域网多人协作，使用 <code>Git</code> 进行版本控制，服务搭建流程</p>
<span id="more"></span>

<h3 id="远程访问设置"><a href="#远程访问设置" class="headerlink" title="远程访问设置"></a>远程访问设置</h3><p><img src="/2016/03/06/LocalGitServer/Local_Git_Server_Share.png" alt="共享_1"><br><img src="/2016/03/06/LocalGitServer/Local_Git_Server_Share_Setting.png" alt="共享_2"></p>
<h3 id="建立本地仓库"><a href="#建立本地仓库" class="headerlink" title="建立本地仓库"></a>建立本地仓库</h3><p>  打开终端，依次输入如下指令</p>
<ol>
<li>初始化仓库添加 <code>ReadMe</code> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir GitLib</span><br><span class="line">cd GitLib</span><br><span class="line">git init</span><br><span class="line">echo &quot;ReadMe&quot; &gt;&gt; README.md</span><br><span class="line">git add README.md</span><br></pre></td></tr></table></figure></li>
<li>提交文件添加远端库 ( <code>URL</code>为共享地址，目录相对于<code>/user/</code> ) <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git commit -m README.md</span><br><span class="line">git remote add origin ssh://192.168.0.101/～／GitLib／.git</span><br></pre></td></tr></table></figure></li>
<li>推送到master分支 ( <code>Everything up-to-date</code> 说明成功 ) <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="访问远程仓库"><a href="#访问远程仓库" class="headerlink" title="访问远程仓库"></a>访问远程仓库</h3><ol>
<li>打开 <code>SourceTree</code> ，选择从 <code>URL</code> 克隆<br><img src="/2016/03/06/LocalGitServer/Local_Git_Server_Clone.png" alt="Clone"></li>
<li>输入远端仓库地址<br><img src="/2016/03/06/LocalGitServer/Local_Git_Server_Clone_URL.png" alt="URL"></li>
<li>此时推送会提示远端拒绝，在远端配置文件中加入下面内容即可<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[receive]</span><br><span class="line">	denyCurrentBranch = false</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>全息地图</title>
    <url>/2019/06/09/HUD-Compass-3D/</url>
    <content><![CDATA[<p>尝试了下全息地图的制作</p>
<span id="more"></span>
<p><code>HUD_Compass_3d</code></p>
<p>在知乎上看到了一篇 <a href="https://zhuanlan.zhihu.com/p/67458879">动态全息地图</a> 的文章<br>作者用的虚幻，思考了一下似乎并没有技术难度，也就不用去看蓝图了</p>
<p>之前在 <a href="https://www.artstation.com/artwork/NbVrJ">Artstation</a> 上收藏过一个这样的效果图, 作为参考目标</p>
<h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><p>参考目标<br><img src="/2019/06/09/HUD-Compass-3D/Refrence.gif" alt="Refrence"></p>
<p>实现效果<br><img src="/2019/06/09/HUD-Compass-3D/Final.jpg" alt="Final"><br><img src="/2019/06/09/HUD-Compass-3D/Final_1.jpg" alt="Final_1"><br><img src="/2019/06/09/HUD-Compass-3D/HUD_3D_Compass.gif" alt="HUD_3D_Compass"><br><img src="/2019/06/09/HUD-Compass-3D/HUD_3D_Compass_Move.gif" alt="HUD_3D_Compass_Move"></p>
<h3 id="效果分析"><a href="#效果分析" class="headerlink" title="效果分析"></a>效果分析</h3><p>全息地图的实现类似于模型切片<br>对于动态的场景则选取高度图作为切片依据<br>效果的关键在于实现高度分层<br>基本步骤：</p>
<ol>
<li>添加俯视正交相机，获取高度图</li>
<li>解析高度图转化为高度</li>
<li>绘制依据层高采样高度图进行Alpha裁剪</li>
<li>复制层进行Y轴偏移</li>
</ol>
<h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><p><img src="/2019/06/09/HUD-Compass-3D/TestTexMap.jpg" alt="Test"></p>
<p>准备好测试用的素材</p>
<h4 id="分层-Shader"><a href="#分层-Shader" class="headerlink" title="分层 Shader"></a>分层 Shader</h4><p>我希望在 Shader 中通过多 Pass 来实现偏移，场景中只用到一个 Quad<br>所以把代码写在 cginc 中，通过在每个 Pass 中定义偏移数值来实现分层</p>
<p>HUD_Building.cginc</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">v2f <span class="title function_">vert</span><span class="params">(appdata v)</span></span><br><span class="line">&#123;</span><br><span class="line">	v2f o;</span><br><span class="line"></span><br><span class="line">	o.uv = v.uv;</span><br><span class="line"></span><br><span class="line">	<span class="type">float</span> scale = <span class="built_in">pow</span>(<span class="number">0.5</span>, _Scale) / MAXLAYER;</span><br><span class="line"></span><br><span class="line">	float3 pos = v.vertex.xyz + v.normal * _OFFSET * scale  ;</span><br><span class="line">	o.vertex = UnityObjectToClipPos(float4(pos, <span class="number">1.0</span>));</span><br><span class="line">	o.uv_HeightTex = TRANSFORM_TEX(v.uv, _HeightTex);</span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fixed4 <span class="title function_">frag</span><span class="params">(v2f i)</span> : SV_Target</span><br><span class="line">&#123;</span><br><span class="line">	float4 col =   _Color;</span><br><span class="line">	float4 <span class="built_in">map</span> = tex2D(_HeightTex, uv);</span><br><span class="line"></span><br><span class="line">	<span class="type">float</span> scale = <span class="built_in">pow</span>(<span class="number">0.5</span>, _Scale) / MAXLAYER;</span><br><span class="line">	<span class="type">float</span> curHight = _OFFSET * scale;</span><br><span class="line"></span><br><span class="line">	<span class="type">float</span> h = <span class="built_in">map</span>.r &gt; curHight;</span><br><span class="line">	col.a = _Color.a* dis* h ;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> col;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>复制 Pass 修改偏移数值<br>我这里用了20层，具体层数的选取根据场景建筑的效果来调整</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CGINCLUDE</span><br><span class="line">		<span class="meta">#<span class="keyword">define</span> MAXLAYER 20</span></span><br><span class="line">		ENDCG</span><br><span class="line"></span><br><span class="line">		Pass&#123;</span><br><span class="line">			CGPROGRAM</span><br><span class="line">			<span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">			<span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">			<span class="meta">#<span class="keyword">define</span> _OFFSET 1</span></span><br><span class="line">			<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;HUD_Building.cginc&quot;</span></span></span><br><span class="line">			ENDCG</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		Pass&#123;</span><br><span class="line">			CGPROGRAM</span><br><span class="line">			<span class="meta">#<span class="keyword">pragma</span> vertex vert</span></span><br><span class="line">			<span class="meta">#<span class="keyword">pragma</span> fragment frag</span></span><br><span class="line">			<span class="meta">#<span class="keyword">define</span> _OFFSET 2</span></span><br><span class="line">			<span class="meta">#<span class="keyword">include</span> <span class="string">&quot;HUD_Building.cginc&quot;</span></span></span><br><span class="line">			ENDCG</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//重复上面的操作</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看下效果</p>
<p><img src="/2019/06/09/HUD-Compass-3D/MultiLayer.jpg" alt="MultiLayer"></p>
<p>加上测试用的高度图看下</p>
<p><img src="/2019/06/09/HUD-Compass-3D/TestTex.jpg" alt="TestTex"></p>
<p>Shader 部分已经没有问题 </p>
<h4 id="场景模型"><a href="#场景模型" class="headerlink" title="场景模型"></a>场景模型</h4><p>到 Sketchfab 下载一个方块城市的场景<br><a href="https://sketchfab.com/3d-models/city-of-future-eb65cc45885d40adbd4d1eb95dda8981">City of Future</a></p>
<p><img src="/2019/06/09/HUD-Compass-3D/City.jpg" alt="City"></p>
<h4 id="获取高度图"><a href="#获取高度图" class="headerlink" title="获取高度图"></a>获取高度图</h4><p>在相机上挂载脚本，获取到高度图，传到全局变量中</p>
<p>HeightMapCamCtr.cs</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">var</span> cam = GetComponent&lt;Camera&gt;();</span><br><span class="line">        cam.orthographic = <span class="literal">true</span>;</span><br><span class="line">        cam.renderingPath = RenderingPath.Forward;</span><br><span class="line"></span><br><span class="line">        cam.depth = <span class="number">-99</span>;</span><br><span class="line">        cam.depthTextureMode = DepthTextureMode.Depth;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(rt == <span class="literal">null</span>)&#123;</span><br><span class="line">            rt = <span class="keyword">new</span> RenderTexture(TexSize, TexSize, <span class="number">16</span>, RenderTextureFormat.Depth, RenderTextureReadWrite.Linear);</span><br><span class="line">            rt.name = <span class="string">&quot;Wonderm_TopDownDepth&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cam.targetTexture = rt;</span><br><span class="line"> </span><br><span class="line">        Shader.SetGlobalTexture(<span class="string">&quot;_HeightTex&quot;</span>, rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看下高度图<br><img src="/2019/06/09/HUD-Compass-3D/RenderTexture.jpg" alt="RenderTexture"><br><img src="/2019/06/09/HUD-Compass-3D/HeightTex.jpg" alt="HeightTex"></p>
<p>将各部分组合，调整参数达到好的显示效果</p>
<p>采样高度图<br><img src="/2019/06/09/HUD-Compass-3D/BaseHeightMap.jpg" alt="BaseHeightMap"></p>
<p>添加分层<br><img src="/2019/06/09/HUD-Compass-3D/TestLayer.jpg" alt="TestLayer"></p>
<p>调整间距<br><img src="/2019/06/09/HUD-Compass-3D/HeightOffset_NoOutline.jpg" alt="HeightOffset_NoOutline"></p>
<p>糊的一匹 ， 直接眩晕了要<br>调了半天都没解决，查看参考图<br>作者是加了描边来增强轮廓感，避免模糊</p>
<h4 id="添加描边"><a href="#添加描边" class="headerlink" title="添加描边"></a>添加描边</h4><p>描边这里粗暴的进行纹理偏移采样<br>只要上下左右有一个像素是不透明的并且当前像素不透明<br>将 Alpha 改为当前的两倍</p>
<p>添加描边<br><img src="/2019/06/09/HUD-Compass-3D/EdgeOutline.jpg" alt="EdgeOutline"></p>
<p>添加分层<br><img src="/2019/06/09/HUD-Compass-3D/HeightOffset.jpg" alt="HeightOffset"></p>
<p>调整间距<br><img src="/2019/06/09/HUD-Compass-3D/HeightOffset_Outline.jpg" alt="HeightOffset_Outline"></p>
<p>形状在加了描边之后很鲜明</p>
<h4 id="优化效果"><a href="#优化效果" class="headerlink" title="优化效果"></a>优化效果</h4><p>按照原图，制作一些装饰用的小物件<br>三棱锥用来标记<br>LineRenderer 分级连线<br>添加几个导航圆环<br>添加距离遮罩 让地图在边缘淡出</p>
<p><img src="/2019/06/09/HUD-Compass-3D/Tips.jpg" alt="Tips"></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://zhuanlan.zhihu.com/p/67458879">Unreal-TrickTech_动态全息地图</a><br><a href="https://www.artstation.com/artwork/NbVrJ">3D Futuristic Map</a><br><a href="https://sketchfab.com/3d-models/city-of-future-eb65cc45885d40adbd4d1eb95dda8981">City of Future</a></p>
]]></content>
      <categories>
        <category>Shader</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>HUD</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown</title>
    <url>/2015/06/13/MarkDown-01/</url>
    <content><![CDATA[<p><a name="md-anchor-head" id="md-anchor-head"></a></p>
<p>#这是标题h1<br>##这是标题h2<br>###这是标题h3<br>####这是标题h4<br>#####这是标题h5<br>######这是标题h6<br>这是文本内容p</p>
<blockquote>
<p>区块引用 Blockquotes</p>
</blockquote>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ul>
<li>无序列表</li>
</ul>
<ol>
<li>有序列表</li>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<p>这是代码<code>function()</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面是代码区域</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;hello world\n&quot;);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是_倾斜字体_<br>这是<strong>加粗字体</strong></p>
<p>这是<a href="http://example.com/" title="Title">链接</a>示例</p>
<p>这是图片<br><img src="http://c.hiphotos.baidu.com/baike/c0%3Dbaike180%2C5%2C5%2C180%2C60/sign=d997317c11ce36d3b6098b625b9a51e2/00e93901213fb80ef9ceac7132d12f2eb938947d.jpg" alt="图片"></p>
<p>图片2</p>
<center>
 <img src="http://c.hiphotos.baidu.com/baike/c0%3Dbaike180%2C5%2C5%2C180%2C60/sign=d997317c11ce36d3b6098b625b9a51e2/00e93901213fb80ef9ceac7132d12f2eb938947d.jpg" width="60%" height="60%">
</center>
附加说明和网址
<figure class="highlight plaintext"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></figcaption><table><tr><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>

<p>引用书上的句子</p>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>

<p>文章内部跳转<br>跳转至 <a href="#md-anchor-head">头部</a><br>插入html  SVG</p>

<!DOCTYPE javascript>
<html>
 
<body>
	<svg height="190">
		<polygon points="100,10 40,180 190,60 10,60 160,180" style="fill:red;stroke:blue;stroke-width:3;fill-rule:evenodd;"/>
	</svg>
</body>
</html>


<p>插入html  音乐播放器 </p>

<!DOCTYPE html> 
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=29713754&auto=0&height=66">
</iframe>



<p><a href="wonderm-swift@hotmail.com" title="wonderm-swift@hotmail.com">wonderm-swift@hotmail.com</a></p>
<p> 插入音乐播放器 </p>

<!DOCTYPE html> 
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="500" height="86" src="/Tools/Music/index.html?id=0">
</iframe>



<p>Markdown表格测试 (表格首行与文字之间必须留有空行)</p>
<table>
<thead>
<tr>
<th>Tables</th>
<th align="center">Are</th>
<th align="right">Cool</th>
</tr>
</thead>
<tbody><tr>
<td>col 3 is</td>
<td align="center">right-aligned</td>
<td align="right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td align="center">centered</td>
<td align="right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td align="center">are neat</td>
<td align="right">$1</td>
</tr>
</tbody></table>
<p>|  时间 	|  新增男孩  	|   新增女孩 	|   累计		|<br>| :—: | :——: 	| :——-: | :——-: |			<br>| 	1   | 	0.5 	| 	0.5 	|	1:1		|<br>| 	2   | 	0.5   	|   0.5 	|	1:1		|<br>| 	3 	| 	0.5   	|   0.5 	|	1:1		|<br>| 	N   |	0.5		|	0.5		|	1:1		|</p>
]]></content>
      <categories>
        <category>MarkDown</category>
      </categories>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>表面积水效果 RainSurface</title>
    <url>/2019/06/02/RainSurface-Shader-01/</url>
    <content><![CDATA[<p>雨天地表积水和流动效果</p>
<span id="more"></span>

<p><code>RainSurface-Shader</code></p>
<p>这里只是初步实现，用于验证想法是否可行<br>完整的将在未来整合到屏幕后期中来实现</p>
<h3 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h3><p>参考目标<br><img src="/2019/06/02/RainSurface-Shader-01/Refrence_Preview.gif" alt="Preview_1"></p>
<p>实现效果<br><img src="/2019/06/02/RainSurface-Shader-01/RainSurface_02.gif" alt="RainSurface_02"><br><img src="/2019/06/02/RainSurface-Shader-01/RainSurface_01.gif" alt="RainSurface_01"><br><img src="/2019/06/02/RainSurface-Shader-01/Rainslope_01.gif" alt="Rainslope_01"></p>
<h3 id="效果分析"><a href="#效果分析" class="headerlink" title="效果分析"></a>效果分析</h3><p>效果可基本分成三大块</p>
<ol>
<li>表面积水</li>
<li>涟漪动画</li>
<li>流动轨迹</li>
</ol>
<p>每个都不难，基本都属于以前用过的知识</p>
<p>难点雨滴涟漪和流动的实现步骤和素材在 <a href="https://deepspacebanana.github.io/deepspacebanana.github.io/blog/shader/art/unreal%20engine/Rainy-Surface-Shader-Part-1">Rainy Surface Shader</a> 这篇文章里都有讲解<br>这里在Unity中实现有细节上会不一致 最终效果是相似的</p>
<h3 id="素材说明"><a href="#素材说明" class="headerlink" title="素材说明"></a>素材说明</h3><p>新建一个 SurfShader 在这个的基础上一步步扩展</p>
<p>主要贴图一张，雨滴和流动法线两张<br><img src="/2019/06/02/RainSurface-Shader-01/Texture_Packing.jpg" alt="Texture_Packing"></p>
<p>R-雨滴涟漪 G-轨迹遮罩 B-流动遮罩</p>
<p>R 通道单独运算产生动画<br>GB 结合做出流动效果</p>
<h3 id="表面积水"><a href="#表面积水" class="headerlink" title="表面积水"></a>表面积水</h3><p>积水的效果是通过改变光滑度和法线来实现的<br>根据表面湿润程度插值即可，不同光滑度对比如下</p>
<p><img src="/2019/06/02/RainSurface-Shader-01/SmoothRGB.jpg" alt="SmoothRGB"></p>
<p>可以看出单独的光滑不能带来湿润的效果<br>要辅助以颜色加深来看清反射的内容</p>
<p>然后是遮罩，类似消融的效果来模拟积水过程<br>因为积水边缘的反光一般很明显，对遮罩的效果简单power一下</p>
<p>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fixed rainMask = tex2D(_RainMaskTex, IN.uv_MainTex).r;</span><br><span class="line">rainMask = lerp(-0.6, 3, _RainFade) - rainMask * 2;</span><br><span class="line">rainMask = saturate(rainMask);</span><br><span class="line">rainMask = pow(rainMask, 8);</span><br><span class="line"></span><br><span class="line">o.Albedo = lerp(c.rgb, c.rgb* _RainColor,  rainMask);</span><br><span class="line">o.Normal = lerp(normal, float3(0,0,1), rainMask);</span><br><span class="line">o.Smoothness = lerp(_Glossiness,1,  rainMask);</span><br></pre></td></tr></table></figure>

<p>效果已经不错了<br><img src="/2019/06/02/RainSurface-Shader-01/RainMaskSurf_01.jpg" alt="RainMaskSurf_01"></p>
<h3 id="涟漪动画"><a href="#涟漪动画" class="headerlink" title="涟漪动画"></a>涟漪动画</h3><p>雨滴涟漪的实现很多，参照<a href="https://deepspacebanana.github.io/deepspacebanana.github.io/blog/shader/art/unreal%20engine/Rainy-Surface-Shader-Part-1">Rainy Surface Shader</a>这篇文章中介绍的一步步迭代</p>
<p>采样贴图的R通道，与时间进行运算得到淡入动画<br>UV偏移再做一次叠加输出，得到没有明显重复感的动画</p>
<p>代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fixed Rinple(fixed rinple1, float time) &#123;</span><br><span class="line">	fixed speed = _Speed;</span><br><span class="line">	fixed rinpleSpeed1 = 1 - frac(time * speed);</span><br><span class="line">	fixed3 r1 = rinple1 - rinpleSpeed1;</span><br><span class="line">	r1 = abs(r1 - 0.05) / _RippleWidth;</span><br><span class="line">	r1 = smoothstep(1, 0, r1) * pow(rinpleSpeed1, 3);</span><br><span class="line">	return  r1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">	fixed c1 = tex2D(_MainTex, IN.uv_MainTex).r  ;</span><br><span class="line">	fixed c2 = tex2D (_MainTex, IN.uv_MainTex+0.5).r  ;</span><br><span class="line">	c1 = Rinple(c1, time) ;</span><br><span class="line">	c2 = Rinple(c2, time + 0.5) ;</span><br><span class="line">	o.Albedo = saturate( c1 + c2);</span><br></pre></td></tr></table></figure>


<p>效果如下<br><img src="/2019/06/02/RainSurface-Shader-01/RinpleAnim_01.gif" alt="RinpleAnim_01"></p>
<p>相同的操作对法线也来一遍</p>
<h3 id="流动轨迹"><a href="#流动轨迹" class="headerlink" title="流动轨迹"></a>流动轨迹</h3><p>采样贴图的 G 通道得到轨迹，采样 B 通道并滚动 UV<br>两者相乘即可得到轨迹动画效果 </p>
<p>效果如下<br><img src="/2019/06/02/RainSurface-Shader-01/SlopeAnim_01.gif" alt="SlopeAnim_01"></p>
<p>相同的操作对法线也来一遍</p>
<h3 id="调参混合"><a href="#调参混合" class="headerlink" title="调参混合"></a>调参混合</h3><p>整理各个功能的参数，并把他们纳入的湿度和 Mask 的控制下<br>将湿度分三层，隔离参数区间，区分光滑度，暗度和动画强度<br>区分出来潮湿，积水，流动三级效果</p>
<p>一波操作之后我们实现了原博客效果的80%，还有20% 来自与旋转<br>我们发现原博客的面片是可以转动移动的，准备开始改进</p>
<h3 id="初步改进"><a href="#初步改进" class="headerlink" title="初步改进"></a>初步改进</h3><h4 id="世界空间"><a href="#世界空间" class="headerlink" title="世界空间"></a>世界空间</h4><p>积水的 Mask 和 雨滴涟漪 应该是世界空间的<br>这样多个地块拼接或者对象移动的时候观感才是正确的</p>
<h4 id="法线朝向"><a href="#法线朝向" class="headerlink" title="法线朝向"></a>法线朝向</h4><p>涟漪应该只出现在和雨滴运动相对的方向<br>我们加入落雨方向与世界空间法线运算得到方向遮罩</p>
<p>滑落的水珠应该只出现在朝上倾斜的面上<br>同样世界法线和朝上的向量运算得到方向遮罩</p>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="/2019/06/02/RainSurface-Shader-01/AngleRotate.gif" alt="AngleRotate"></p>
<h3 id="再次改进"><a href="#再次改进" class="headerlink" title="再次改进"></a>再次改进</h3><p>目前的效果已经达到了我们的预期，但并不能直接放到项目里使用<br>改动成本高，计算量也大，调节不方便<br>空间遮罩也不好解决，房檐下不落雨之类实现不方便</p>
<p>好的解决应该把整个效果都放到后期处理中<br>在光照之前通过 CommondBuffer 拿到 Gbuffer<br>修改对应的参数，插入涟漪和水珠</p>
<p>目前已经初步扫清了障碍<br>如下图，所有的效果都在后期中进行<br><img src="/2019/06/02/RainSurface-Shader-01/PostProcess_Preview.jpg" alt="PostProcess_Preview"></p>
<p>待实现完成之后进行说明</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://deepspacebanana.github.io/deepspacebanana.github.io/blog/shader/art/unreal%20engine/Rainy-Surface-Shader-Part-1">Rainy Surface Shader</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/54688674">湿滑的马路</a></p>
]]></content>
      <categories>
        <category>Shader</category>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Shader</tag>
      </tags>
  </entry>
  <entry>
    <title>不同底色下显示不同内容的图片</title>
    <url>/2017/08/09/PictureSwitchByBG/</url>
    <content><![CDATA[<p>前几天看到有人在群里发的图片,不同背景下显示内容不一样，了解了下原理，用Shader简单实现了一下</p>
<span id="more"></span>

<p>如下图所示，黑色背景和白色背景显示的内容不一样<br><img src="/2017/08/09/PictureSwitchByBG/PictureSwitchByBG.png" alt="PicBlend"></p>
<p>原理非常简单</p>
<ul>
<li>   要求：两张图片</li>
<li>   每个上下图层对应的通道内 且 每个上下图层对应像素内，亮图B的明度值都要大于暗图A</li>
<li>   原理（每个通道、每个像素）：</li>
<li>   要制作的图片为X ，X的蒙版(不透明度)为P，暗图为A，亮图为B</li>
<li>   白底：X<em>P + 1</em>(1-P) &#x3D; B</li>
<li>   黑底：X<em>P + 0</em>(1-P) &#x3D; A</li>
<li>   简化：</li>
<li>   X*P + 1-P &#x3D; B ①</li>
<li>   X*P &#x3D; A ②</li>
<li>   ②-①得：</li>
<li>   A-B &#x3D; P-1，即：A-B+1 &#x3D; P</li>
<li>   得到了P，代入②</li>
<li>   X &#x3D; A&#x2F;P</li>
</ul>
<p>Shader实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float b =( bright.r + bright.g +bright.b )/3   ;</span><br><span class="line">float d =( dark.r + dark.g +dark.b )/3   ;</span><br><span class="line">float f = d - b + 1 + _Offset;</span><br><span class="line"> </span><br><span class="line">final.r = dark.r / f ;</span><br><span class="line">final.g = dark.g / f;</span><br><span class="line">final.b = dark.b / f ;</span><br><span class="line">final.a =  f ;</span><br></pre></td></tr></table></figure>

<p>参考:<br><a href="https://tieba.baidu.com/p/4482067338">制作不同底色下显示不同内容</a></p>
]]></content>
      <categories>
        <category>Shader</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Shader 屏幕后期特效-02</title>
    <url>/2017/07/07/Shader-Image-Effect-02/</url>
    <content><![CDATA[<p>之前老大一直吐槽我从网上抄的高斯模糊 Shader 太渣 , 隔壁项目今天也要做屏幕模糊 , 交流时提供给了我个思路 , 趁着今天停电下班早 , 屏幕模糊效果升级一下</p>
<span id="more"></span>

<p>原理基本还是一样，提升效果的思路在于对图片先缩放再模糊，多次迭代后，模糊效果指数上升，实测再烂的模糊迭代三次也基本上相当可以了，标准高斯模糊迭代六次以上差不多可以赶上 iOS 的效果</p>
<p>在参考网上代码的时候看到好多人把水平和垂直的模糊分别放在不同的 Pass 中去做 , 同样的迭代次数 , DrawCall是要 Double 的 , 并不理解他们的思路</p>
<p>核心代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> renderWidth = sourceTexture.width &gt;&gt; Mathf.CeilToInt(sampleNum * blurRadius);</span><br><span class="line">  <span class="built_in">int</span> renderHeight = sourceTexture.height &gt;&gt; Mathf.CeilToInt(sampleNum * blurRadius);</span><br><span class="line"></span><br><span class="line">  renderBuffer = sourceTexture;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; step - <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      RenderTexture tempBuffer = RenderTexture.GetTemporary(renderWidth, renderHeight, <span class="number">0</span>, sourceTexture.format);</span><br><span class="line">      Graphics.Blit(renderBuffer, tempBuffer, material);</span><br><span class="line">      <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          RenderTexture.ReleaseTemporary(renderBuffer);</span><br><span class="line">      &#125;</span><br><span class="line">      renderBuffer = tempBuffer;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (step &gt; <span class="number">1</span>)</span><br><span class="line">      RenderTexture.ReleaseTemporary(renderBuffer);</span><br><span class="line"></span><br><span class="line">  Graphics.Blit(renderBuffer, destTexture, material);</span><br></pre></td></tr></table></figure>

<p>测试用模糊算法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">color.rgb *= 0.2f;</span><br><span class="line"></span><br><span class="line">// 模糊 -------</span><br><span class="line"></span><br><span class="line">float yOffset = _BlurRadius * 0.05f;</span><br><span class="line">float xOffset = _MainTex_TexelSize.x / _MainTex_TexelSize.y * yOffset;</span><br><span class="line"></span><br><span class="line">// 上</span><br><span class="line">float2 uvOffset = float2(0, yOffset);</span><br><span class="line">color.rgb += tex2D(_MainTex,  i.uv + uvOffset).rgb * 0.1;</span><br><span class="line"></span><br><span class="line">// 下</span><br><span class="line">uvOffset.y = -yOffset;</span><br><span class="line">color.rgb += tex2D(_MainTex   , i.uv + uvOffset).rgb * 0.1;</span><br><span class="line"></span><br><span class="line">// 左</span><br><span class="line">uvOffset.x = -xOffset;</span><br><span class="line">uvOffset.y = 0;</span><br><span class="line">color.rgb += tex2D(_MainTex, i.uv + uvOffset).rgb * 0.1;</span><br><span class="line"></span><br><span class="line">// 右</span><br><span class="line">uvOffset.x = xOffset;</span><br><span class="line">color.rgb += tex2D(_MainTex,   i.uv + uvOffset).rgb * 0.1;</span><br><span class="line"></span><br><span class="line">// 右上</span><br><span class="line">uvOffset.x = xOffset * 0.707;</span><br><span class="line">uvOffset.y = yOffset * 0.707;</span><br><span class="line">color.rgb += tex2D(_MainTex , i.uv + uvOffset).rgb * 0.1;</span><br><span class="line"></span><br><span class="line">// 右下</span><br><span class="line">uvOffset.y = -uvOffset.y;</span><br><span class="line">color.rgb += tex2D(_MainTex , i.uv + uvOffset).rgb * 0.1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 左下</span><br><span class="line">uvOffset.x = -uvOffset.x;</span><br><span class="line">color.rgb += tex2D(_MainTex , i.uv + uvOffset).rgb * 0.1;</span><br><span class="line"></span><br><span class="line">// 左上</span><br><span class="line">uvOffset.y = -uvOffset.y;</span><br><span class="line">color.rgb += tex2D(_MainTex , i.uv + uvOffset).rgb * 0.1;</span><br></pre></td></tr></table></figure>

<p>最终效果(模糊半径1、缩放2^6、迭代3次):</p>
<p><img src="/2017/07/07/Shader-Image-Effect-02/Shader_Blur_2.jpg" alt="Preview"></p>
<p>PS: 说留着以后做的事情，如果没有合适契机的话真的会没有以后…
 </p>
]]></content>
      <categories>
        <category>Shader</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Image Effect</tag>
      </tags>
  </entry>
  <entry>
    <title>Shader 屏幕后期特效-01</title>
    <url>/2015/10/19/Shader-Image-Effect-01/</url>
    <content><![CDATA[<p>屏幕后期特效是很实用，这里对之前的学习做个总结记录</p>
<span id="more"></span>
<p>前段时间买了一本书，很适合入门学习，<br><img src="/2015/10/19/Shader-Image-Effect-01/Unity-shader-imageEffect-book.jpg" alt="教材"></p>
<h3 id="一、后期特效"><a href="#一、后期特效" class="headerlink" title="一、后期特效"></a>一、后期特效</h3><p>学习编写Shader一个很有用的地方就是可以创建各种自定义的画面特效，也被称为后期特效（post effects）。使用这些画面特效，我们可以创建很多美妙的实时图像，例如高光（Bloom），运动模糊（Motion Blur），HDR特效（HDR effects）等等。大多数市面上的现代游戏使用了很多这样的画面特效，以此来得到景深效果，高光效果，甚至是进行颜色矫正。</p>
<p>后期特效的工作方式是这样的，抓取一个完整的画面图像（或纹理），使用Shader在GPU上处理它的像素后，再返回给Unity的渲染器渲染到屏幕上，也就是一个后期处理的过程。这允许我们可以对渲染后的游戏图像进行实时地逐像素操作，从而给了我们一个全局的控制能力。</p>
<p>Unity提供了<code>OnRenderImage</code>这个方法供我们对渲染在屏幕上的画面或者纹理进行处理，在绘制前的每帧被调用，因此我们会在每帧对其进行处理然后返回给Unity就可以对画面效果进行处理。也就是说为屏幕创建一个材质，然后给他加上Shader使用Sahder中的方法就像处理贴图一样的处理屏幕纹理就可以了。</p>
<h3 id="二、结构代码"><a href="#二、结构代码" class="headerlink" title="二、结构代码"></a>二、结构代码</h3><p>屏幕特效的 基本结构就是一个挂在摄像机上的脚本和一个效果处理Shader</p>
<p>C# 代码如下</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以在编辑器里实时预览效果</span></span><br><span class="line">[<span class="meta">ExecuteInEditMode</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CameraEffect</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//用于特效处理的Shader</span></span><br><span class="line">	<span class="keyword">public</span> Shader curShader;</span><br><span class="line">	<span class="comment">//摄像机纹理材质</span></span><br><span class="line">	<span class="keyword">private</span> Material curMaterial;</span><br><span class="line">	<span class="keyword">public</span> Material material &#123;</span><br><span class="line">		<span class="keyword">get</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (curMaterial == <span class="literal">null</span>) &#123;</span><br><span class="line">				curMaterial = <span class="keyword">new</span> Material (curShader);</span><br><span class="line">				curMaterial.hideFlags = HideFlags.HideAndDontSave;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> curMaterial;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在目标平台特效是否支持</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (SystemInfo.supportsImageEffects == <span class="literal">false</span>) &#123;</span><br><span class="line">			enabled = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (curShader != <span class="literal">null</span> &amp;&amp; curShader.isSupported == <span class="literal">false</span>) &#123;</span><br><span class="line">			enabled = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnRenderImage</span> (<span class="params">RenderTexture sourceTexture, RenderTexture destTexture</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (blurShader != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="comment">//Shader传参</span></span><br><span class="line">			material.SetFloat (<span class="string">&quot;_Property&quot;</span>, propertyValue);</span><br><span class="line">			<span class="comment">//输出到屏幕</span></span><br><span class="line">			Graphics.Blit (sourceTexture, destTexture, material);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Graphics.Blit (sourceTexture, destTexture);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (curMaterial != <span class="literal">null</span>) &#123;</span><br><span class="line">			DestroyImmediate (curMaterial);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将上面的代码挂在相机上,我们即可对特效Shader进行处理，通过<code>material.SetFloat (&quot;_Property&quot;, propertyValue)</code>传参即可修改Shader属性</p>
<h3 id="三、实例效果"><a href="#三、实例效果" class="headerlink" title="三、实例效果"></a>三、实例效果</h3><h4 id="1-饱和度"><a href="#1-饱和度" class="headerlink" title="1. 饱和度"></a>1. 饱和度</h4><p><img src="/2015/10/19/Shader-Image-Effect-01/Shader-BSC.jpg" alt="饱和度"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Wonderm/BSC_Effect&quot; &#123;</span><br><span class="line">	Properties</span><br><span class="line">	&#123;</span><br><span class="line">		_BaseTex(&quot;Base(RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">		_Table(&quot;Table&quot;, Vector) = (0.3, 0.59, 0.11,0)</span><br><span class="line">		_Saturation(&quot;Saturation&quot;, range(0.0,1.0)) = 1.0</span><br><span class="line">		_Brightness(&quot;Brightness&quot;, range(0.0,2.0)) = 1.0 </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	SubShader</span><br><span class="line">	&#123;</span><br><span class="line">		Pass</span><br><span class="line">		&#123;</span><br><span class="line">			CGPROGRAM</span><br><span class="line">			#pragma vertex vert_image</span><br><span class="line">			#pragma fragment frag</span><br><span class="line">			#include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">			float3 _Table;</span><br><span class="line">			float _Saturation;</span><br><span class="line">			float _Brightness;</span><br><span class="line">			sampler2D _BaseTex;</span><br><span class="line">			float4 _BaseTex_ST;</span><br><span class="line"></span><br><span class="line">			struct v2b</span><br><span class="line">			&#123;</span><br><span class="line">				float4 position:POSITION;</span><br><span class="line">				float2 uv_base:TEXCOORD0;</span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line">			v2b vert_image(appdata_base input)</span><br><span class="line">			&#123;</span><br><span class="line">				v2b output; </span><br><span class="line">				output.position = mul(UNITY_MATRIX_MVP,input.vertex);</span><br><span class="line">				output.uv_base = TRANSFORM_TEX(input.texcoord, _BaseTex);</span><br><span class="line">				return output;</span><br><span class="line">			&#125;</span><br><span class="line">			 </span><br><span class="line">			float4 frag(v2b input):COLOR</span><br><span class="line">			&#123; </span><br><span class="line">				float3 rgb = tex2D(_BaseTex, input.uv_base);</span><br><span class="line">				float4 cc = lerp(float4(dot(rgb, _Table)),rgb,_Saturation);</span><br><span class="line">				cc *= _Brightness;</span><br><span class="line">				return cc;</span><br><span class="line">			&#125;</span><br><span class="line">			ENDCG</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	FallBack &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-像素化"><a href="#2-像素化" class="headerlink" title="2. 像素化"></a>2. 像素化</h4><p><img src="/2015/10/19/Shader-Image-Effect-01/Shader-Pixel.jpg" alt="像素化"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Wonderm/Mosaic&quot; &#123;</span><br><span class="line">	 Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex 	(&quot;Main Texture&quot;, 2D) = &quot;&quot; &#123;&#125;</span><br><span class="line">        _AlbumTex 	(&quot;Album Texture&quot;, 2D) = &quot;&quot; &#123;&#125;</span><br><span class="line">        _Rows (&quot;Rows&quot;,int) = 2</span><br><span class="line">        _Lines (&quot;Lines &quot;,int) = 2</span><br><span class="line">        _LutTex (&quot;Lut Texture&quot;, 2D) = &quot;&quot; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CGINCLUDE</span><br><span class="line"></span><br><span class="line">    #include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">    sampler2D _MainTex;</span><br><span class="line">    float4 _MainTex_TexelSize;</span><br><span class="line">    float _BlockSize;</span><br><span class="line">    int _Rows;</span><br><span class="line">    int _Lines;</span><br><span class="line">    sampler2D _AlbumTex;</span><br><span class="line">    sampler2D _LutTex;</span><br><span class="line"></span><br><span class="line">    half4 frag(v2f_img i) : SV_Target</span><br><span class="line">    &#123;</span><br><span class="line">        float2 block = _MainTex_TexelSize.xy * _BlockSize;</span><br><span class="line">        float2 uv1 = trunc(i.uv / block) * block;</span><br><span class="line">        half4 src = tex2D(_MainTex, uv1);</span><br><span class="line">        return src;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ENDCG</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            ZTest Always Cull Off ZWrite Off</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma vertex vert_img</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-高斯模糊-毛玻璃"><a href="#2-高斯模糊-毛玻璃" class="headerlink" title="2. 高斯模糊(毛玻璃)"></a>2. 高斯模糊(毛玻璃)</h4><p>下面的代码是百度的，出处不记得了，但是挺好用的<br><img src="/2015/10/19/Shader-Image-Effect-01/Shader-Blur.jpg" alt="毛玻璃"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Custom/WaterBlur&quot; &#123;</span><br><span class="line">Properties &#123;</span><br><span class="line">	_blurSizeXY(&quot;BlurSizeXY&quot;, Range(0,10000)) = 8</span><br><span class="line">&#125;</span><br><span class="line">SubShader &#123;</span><br><span class="line"></span><br><span class="line">// Draw ourselves after all opaque geometry</span><br><span class="line">Tags &#123; &quot;Queue&quot; = &quot;Transparent&quot; &#125;</span><br><span class="line"></span><br><span class="line">// Grab the screen behind the object into _GrabTexture</span><br><span class="line">GrabPass &#123; &#125;</span><br><span class="line"></span><br><span class="line">// Render the object with the texture generated above</span><br><span class="line">Pass &#123;</span><br><span class="line"></span><br><span class="line">CGPROGRAM</span><br><span class="line">#pragma debug</span><br><span class="line">#pragma vertex vert</span><br><span class="line">#pragma fragment frag</span><br><span class="line">#pragma target 3.0</span><br><span class="line"></span><br><span class="line">sampler2D _GrabTexture : register(s0);</span><br><span class="line">float _blurSizeXY;</span><br><span class="line"></span><br><span class="line">struct data &#123;</span><br><span class="line"></span><br><span class="line">float4 vertex : POSITION;</span><br><span class="line"></span><br><span class="line">float3 normal : NORMAL;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct v2f &#123;</span><br><span class="line"></span><br><span class="line">float4 position : POSITION;</span><br><span class="line"></span><br><span class="line">float4 screenPos : TEXCOORD0;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">v2f vert(data i)&#123;</span><br><span class="line"></span><br><span class="line">v2f o;</span><br><span class="line"></span><br><span class="line">o.position = mul(UNITY_MATRIX_MVP, i.vertex);</span><br><span class="line"></span><br><span class="line">o.screenPos = o.position;</span><br><span class="line"></span><br><span class="line">return o;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">half4 frag( v2f i ) : COLOR</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">float2 screenPos = i.screenPos.xy / i.screenPos.w;</span><br><span class="line">float depth= _blurSizeXY*0.0005;</span><br><span class="line"></span><br><span class="line">screenPos.x = (screenPos.x + 1) * 0.5;</span><br><span class="line"></span><br><span class="line">screenPos.y = (screenPos.y + 1) * 0.5;</span><br><span class="line"></span><br><span class="line">half4 sum = half4(0.0h,0.0h,0.0h,0.0h);</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x-5.0 * depth, screenPos.y+5.0 * depth)) * 0.025;</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x+5.0 * depth, screenPos.y-5.0 * depth)) * 0.025;</span><br><span class="line"></span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x-4.0 * depth, screenPos.y+4.0 * depth)) * 0.05;</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x+4.0 * depth, screenPos.y-4.0 * depth)) * 0.05;</span><br><span class="line"></span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x-3.0 * depth, screenPos.y+3.0 * depth)) * 0.09;</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x+3.0 * depth, screenPos.y-3.0 * depth)) * 0.09;</span><br><span class="line"></span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x-2.0 * depth, screenPos.y+2.0 * depth)) * 0.12;</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x+2.0 * depth, screenPos.y-2.0 * depth)) * 0.12;</span><br><span class="line"></span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x-1.0 * depth, screenPos.y+1.0 * depth)) * 0.15;</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x+1.0 * depth, screenPos.y-1.0 * depth)) * 0.15;</span><br><span class="line"></span><br><span class="line">sum += tex2D( _GrabTexture, screenPos-5.0 * depth) * 0.025;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos-4.0 * depth) * 0.05;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos-3.0 * depth) * 0.09;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos-2.0 * depth) * 0.12;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos-1.0 * depth) * 0.15;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos) * 0.16;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos+5.0 * depth) * 0.15;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos+4.0 * depth) * 0.12;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos+3.0 * depth) * 0.09;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos+2.0 * depth) * 0.05;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos+1.0 * depth) * 0.025;</span><br><span class="line"></span><br><span class="line">return sum/2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ENDCG</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fallback Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、-内置CG函数"><a href="#四、-内置CG函数" class="headerlink" title="四、 内置CG函数"></a>四、 内置CG函数</h3><p>有时我们需要多个特效叠加，但是又希望区分多个Shader脚本，这时候我们可以把核心算法提出来，做为单独的方法供一个集合Shader进行调用，我们将其写入cginc文件，然后就可以通过include进行引用</p>
<p>比如我们将之前的饱和度处理单独提取出来写入<code>ScreenEffect.cginc</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ifndef SCREEN_EFFECT</span><br><span class="line">#define SCREEN_EFFECT</span><br><span class="line"> </span><br><span class="line">			//灰度控制</span><br><span class="line">			//_LuminosityAmount = 灰度</span><br><span class="line">			//renderTex = 输入图像</span><br><span class="line">			fixed4 GrayScale(fixed _LuminosityAmount,fixed4 renderTex) : COLOR</span><br><span class="line">			&#123;</span><br><span class="line">				float luminosity = 0.299 * renderTex.r + 0.587 * renderTex.g + 0.114 * renderTex.b;</span><br><span class="line">				fixed4 finalColor = lerp(renderTex, luminosity, _LuminosityAmount);</span><br><span class="line">				</span><br><span class="line">				return finalColor;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			//模糊</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>

<p>然后在集合Shader中调用其方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Custom/CameraEffect&quot; &#123;</span><br><span class="line">	Properties &#123;</span><br><span class="line">		_MainTex (&quot;Base (RGB)&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">		_LuminosityAmount (&quot;GrayScale Amount&quot;, Range(0.0, 1.0)) = 1.0</span><br><span class="line">	&#125;</span><br><span class="line">	SubShader &#123;</span><br><span class="line">		Pass &#123;</span><br><span class="line">			CGPROGRAM</span><br><span class="line">			#pragma vertex vert_img</span><br><span class="line">			#pragma fragment frag</span><br><span class="line">			</span><br><span class="line">			#include &quot;UnityCG.cginc&quot;</span><br><span class="line">			#include &quot;CGinc/ScreenEffect.cginc&quot;</span><br><span class="line">			</span><br><span class="line">			uniform sampler2D _MainTex;</span><br><span class="line">			fixed _LuminosityAmount;</span><br><span class="line">			</span><br><span class="line">			fixed4 frag(v2f_img i) : COLOR</span><br><span class="line">			&#123;</span><br><span class="line">				//from the v2f_img struct</span><br><span class="line">				fixed4 renderTex = tex2D(_MainTex, i.uv);</span><br><span class="line">				renderTex =GrayScale( _LuminosityAmount, renderTex);</span><br><span class="line">				 </span><br><span class="line">				</span><br><span class="line">				return renderTex;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			ENDCG</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	FallBack &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样在叠加特效时，更加方便和快捷</p>
<h3 id="五、特效叠加"><a href="#五、特效叠加" class="headerlink" title="五、特效叠加"></a>五、特效叠加</h3><p>虽然上面的方法让叠加特效变得很方便，但有时我们又有其他需求<br>比如《古墓丽影》、《蝙蝠侠》、《杀手47》中都有特殊视野，先对屏幕进行灰化处理，然后特殊对象高亮，遮挡描边，这样我们必须区分出所绘制的对象</p>
<p>此时我们可以在代码中动态添加新的相机，把需要特效的放入对应的层里，每个相机进行相应的处理</p>
<p>分层相机的话，除了主相机，其他相机要尽量少的渲染物体，以此来减少计算的负荷，因为我们的处理是每帧都在进行的，所以 最好是大量的批次可分层的采用此种方式，其他的尽可动态修改单个物体的shader来最大化减少计算量</p>
<p>下面是三个特效叠加之后的效果</p>
<p>特效前<br><img src="/2015/10/19/Shader-Image-Effect-01/Shader-none.jpeg" alt="特效前"><br>特效后，背景灰化，地板马赛克，前景模糊<br><img src="/2015/10/19/Shader-Image-Effect-01/Shader-Effects.jpeg">
 </p>
]]></content>
      <categories>
        <category>Shader</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Image Effect</tag>
      </tags>
  </entry>
  <entry>
    <title>屏幕水波纹效果</title>
    <url>/2015/11/06/Shader-Image-Effect-Ripple/</url>
    <content><![CDATA[<p>前段时间看到了一些很不错的屏幕特效，然后手抖删掉了，幸存几个整理记录一下<br>这个是屏幕水波纹的效果，可以通过Curve自定义波纹的形状，很是方便<br>原作者的是随机位置，我加了鼠标点击模式</p>
<span id="more"></span>


<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="/2015/11/06/Shader-Image-Effect-Ripple/RippleEffect.gif"></p>
<h3 id="Shader"><a href="#Shader" class="headerlink" title="Shader"></a>Shader</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Hidden/Ripple Effect&quot;</span><br><span class="line">&#123;</span><br><span class="line">    Properties</span><br><span class="line">    &#123;</span><br><span class="line">        _MainTex(&quot;Base&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _GradTex(&quot;Gradient&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">        _Reflection(&quot;Reflection Color&quot;, Color) = (0, 0, 0, 0)</span><br><span class="line">        _Params1(&quot;Parameters 1&quot;, Vector) = (1, 1, 0.8, 0)</span><br><span class="line">        _Params2(&quot;Parameters 2&quot;, Vector) = (1, 1, 1, 0)</span><br><span class="line">        _Drop1(&quot;Drop 1&quot;, Vector) = (0.49, 0.5, 0, 0)</span><br><span class="line">        _Drop2(&quot;Drop 2&quot;, Vector) = (0.50, 0.5, 0, 0)</span><br><span class="line">        _Drop3(&quot;Drop 3&quot;, Vector) = (0.51, 0.5, 0, 0)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    CGINCLUDE</span><br><span class="line"></span><br><span class="line">    #include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">    sampler2D _MainTex;</span><br><span class="line">    float2 _MainTex_TexelSize;</span><br><span class="line"></span><br><span class="line">    sampler2D _GradTex;</span><br><span class="line"></span><br><span class="line">    half4 _Reflection;</span><br><span class="line">    float4 _Params1;    // [ aspect, 1, scale, 0 ]</span><br><span class="line">    float4 _Params2;    // [ 1, 1/aspect, refraction, reflection ]</span><br><span class="line"></span><br><span class="line">    float3 _Drop1;</span><br><span class="line">    float3 _Drop2;</span><br><span class="line">    float3 _Drop3;</span><br><span class="line"></span><br><span class="line">    float wave(float2 position, float2 origin, float time)</span><br><span class="line">    &#123;</span><br><span class="line">        float d = length(position - origin);</span><br><span class="line">        float t = time - d * _Params1.z;</span><br><span class="line">        return (tex2D(_GradTex, float2(t, 0)).a - 0.5f) * 2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    float allwave(float2 position)</span><br><span class="line">    &#123;</span><br><span class="line">        return</span><br><span class="line">            wave(position, _Drop1.xy, _Drop1.z) +</span><br><span class="line">            wave(position, _Drop2.xy, _Drop2.z) +</span><br><span class="line">            wave(position, _Drop3.xy, _Drop3.z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    half4 frag(v2f_img i) : SV_Target</span><br><span class="line">    &#123;</span><br><span class="line">        const float2 dx = float2(0.01f, 0);</span><br><span class="line">        const float2 dy = float2(0, 0.01f);</span><br><span class="line"></span><br><span class="line">        float2 p = i.uv * _Params1.xy;</span><br><span class="line"></span><br><span class="line">        float w = allwave(p);</span><br><span class="line">        float2 dw = float2(allwave(p + dx) - w, allwave(p + dy) - w);</span><br><span class="line"></span><br><span class="line">        float2 duv = dw * _Params2.xy * 0.2f * _Params2.z;</span><br><span class="line">        half4 c = tex2D(_MainTex, i.uv + duv);</span><br><span class="line">        float fr = pow(length(dw) * 3 * _Params2.w, 3);</span><br><span class="line"></span><br><span class="line">        return lerp(c, _Reflection, fr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ENDCG</span><br><span class="line"></span><br><span class="line">    SubShader</span><br><span class="line">    &#123;</span><br><span class="line">        Pass</span><br><span class="line">        &#123;</span><br><span class="line">            ZTest Always Cull Off ZWrite Off</span><br><span class="line">            Fog &#123; Mode off &#125;</span><br><span class="line">            CGPROGRAM</span><br><span class="line">            #pragma fragmentoption ARB_precision_hint_fastest </span><br><span class="line">            #pragma target 3.0</span><br><span class="line">            #pragma vertex vert_img</span><br><span class="line">            #pragma fragment frag</span><br><span class="line">            ENDCG</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> RippleType</span><br><span class="line">&#123;</span><br><span class="line">    Auto=<span class="number">0</span>,</span><br><span class="line">    Click</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> RippleType rippleType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> AnimationCurve waveform = <span class="keyword">new</span> AnimationCurve(</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.00f</span>, <span class="number">0.50f</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.05f</span>, <span class="number">1.00f</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.15f</span>, <span class="number">0.10f</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.25f</span>, <span class="number">0.80f</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.35f</span>, <span class="number">0.30f</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.45f</span>, <span class="number">0.60f</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.55f</span>, <span class="number">0.40f</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.65f</span>, <span class="number">0.55f</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.75f</span>, <span class="number">0.46f</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.85f</span>, <span class="number">0.52f</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> Keyframe(<span class="number">0.99f</span>, <span class="number">0.50f</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">[<span class="meta">Range(0.01f, 1.0f)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> refractionStrength = <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Color reflectionColor = Color.gray;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Range(0.01f, 1.0f)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> reflectionStrength = <span class="number">0.7f</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Range(1.0f, 3.0f)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> waveSpeed = <span class="number">1.25f</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Range(0.0f, 2.0f)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">float</span> dropInterval = <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">[<span class="meta">SerializeField, HideInInspector</span>]</span><br><span class="line">Shader shader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">Droplet</span></span><br><span class="line">&#123;</span><br><span class="line">    Vector2 position;</span><br><span class="line">    <span class="built_in">float</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Droplet</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        time = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AutoReset</span>()</span>&#123;</span><br><span class="line">        </span><br><span class="line">        position = <span class="keyword">new</span> Vector2(Random.<span class="keyword">value</span>, Random.<span class="keyword">value</span>);</span><br><span class="line">        time = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ClickReset</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">            position = <span class="keyword">new</span> Vector2(Input.mousePosition.x / Screen.width,Input.mousePosition.y / Screen.height);</span><br><span class="line"></span><br><span class="line">        time = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        time += Time.deltaTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector4 <span class="title">MakeShaderParameter</span>(<span class="params"><span class="built_in">float</span> aspect</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector4(position.x * aspect, position.y, time, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Droplet[] droplets;</span><br><span class="line">Texture2D gradTexture;</span><br><span class="line">Material material;</span><br><span class="line"><span class="built_in">float</span> timer;</span><br><span class="line"><span class="built_in">int</span> dropCount;</span><br><span class="line"><span class="built_in">int</span> curIndex = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UpdateShaderParameters</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> c = GetComponent&lt;Camera&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (rippleType == RippleType.Auto)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        material.SetVector(<span class="string">&quot;_Drop1&quot;</span>, droplets[<span class="number">0</span>].MakeShaderParameter(c.aspect));</span><br><span class="line">        material.SetVector(<span class="string">&quot;_Drop2&quot;</span>, droplets[<span class="number">1</span>].MakeShaderParameter(c.aspect));</span><br><span class="line">        material.SetVector(<span class="string">&quot;_Drop3&quot;</span>, droplets[<span class="number">2</span>].MakeShaderParameter(c.aspect));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(rippleType == RippleType.Click)</span><br><span class="line">    &#123;</span><br><span class="line">        material.SetVector(<span class="string">&quot;_Drop&quot;</span>+curIndex, droplets[curIndex].MakeShaderParameter(c.aspect));</span><br><span class="line">        curIndex = (++curIndex) % <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    material.SetColor(<span class="string">&quot;_Reflection&quot;</span>, reflectionColor);</span><br><span class="line">    material.SetVector(<span class="string">&quot;_Params1&quot;</span>, <span class="keyword">new</span> Vector4(c.aspect, <span class="number">1</span>, <span class="number">1</span> / waveSpeed, <span class="number">0</span>));</span><br><span class="line">    material.SetVector(<span class="string">&quot;_Params2&quot;</span>, <span class="keyword">new</span> Vector4(<span class="number">1</span>, <span class="number">1</span> / c.aspect, refractionStrength, reflectionStrength));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    droplets = <span class="keyword">new</span> Droplet[<span class="number">3</span>];</span><br><span class="line">    droplets[<span class="number">0</span>] = <span class="keyword">new</span> Droplet();</span><br><span class="line">    droplets[<span class="number">1</span>] = <span class="keyword">new</span> Droplet();</span><br><span class="line">    droplets[<span class="number">2</span>] = <span class="keyword">new</span> Droplet();</span><br><span class="line"></span><br><span class="line">    gradTexture = <span class="keyword">new</span> Texture2D(<span class="number">2048</span>, <span class="number">1</span>, TextureFormat.Alpha8, <span class="literal">false</span>);</span><br><span class="line">    gradTexture.wrapMode = TextureWrapMode.Clamp;</span><br><span class="line">    gradTexture.filterMode = FilterMode.Bilinear;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; gradTexture.width; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">1.0f</span> / gradTexture.width * i;</span><br><span class="line">        <span class="keyword">var</span> a = waveform.Evaluate(x);</span><br><span class="line">        gradTexture.SetPixel(i, <span class="number">0</span>, <span class="keyword">new</span> Color(a, a, a, a));</span><br><span class="line">    &#125;</span><br><span class="line">    gradTexture.Apply();</span><br><span class="line"></span><br><span class="line">    material = <span class="keyword">new</span> Material(shader);</span><br><span class="line">    material.hideFlags = HideFlags.DontSave;</span><br><span class="line">    material.SetTexture(<span class="string">&quot;_GradTex&quot;</span>, gradTexture);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (dropInterval &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (rippleType == RippleType.Auto)</span><br><span class="line">        &#123;</span><br><span class="line">            </span><br><span class="line">            timer += Time.deltaTime;</span><br><span class="line">            <span class="keyword">while</span> (timer &gt; dropInterval)</span><br><span class="line">            &#123;</span><br><span class="line">                droplets[dropCount++ % droplets.Length].AutoReset();</span><br><span class="line">                timer -= dropInterval;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(rippleType == RippleType.Click)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                droplets[dropCount++ % droplets.Length].ClickReset();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;droplets.Length;i++)&#123;</span><br><span class="line">        droplets[i].Update();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    UpdateShaderParameters();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnRenderImage</span>(<span class="params">RenderTexture source, RenderTexture destination</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Graphics.Blit(source, destination, material);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Shader</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Image Effect</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity动画事件自动绑定</title>
    <url>/2016/08/15/Unity-Animation-Meta/</url>
    <content><![CDATA[<p>开发过程中，美术会经常性修改动作，不了解Unity的美术很容易覆盖掉已经添加好的事件<br>导致工作白做，于是写了个工具单独存储动画事件，自动绑定到动画文件上</p>
<span id="more"></span>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CreateAssetMenu(fileName = <span class="string">&quot;newAnimationEvent.asset&quot;</span>, menuName = <span class="string">&quot;Wonderm/Animation/AnimationEvent&quot;</span>, order = 0)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AnimationEvent</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">	[<span class="meta">SerializeField</span>]</span><br><span class="line">	<span class="keyword">private</span> Object fbxTarget;</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> 动画列表</span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">	<span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; anims = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;None&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> 参数列表</span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">	[<span class="meta">SerializeField</span>]</span><br><span class="line">	<span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; parameters = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;None&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> 方法列表</span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">	<span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; methods = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;None&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	[<span class="meta">SerializeField</span>]</span><br><span class="line">	<span class="keyword">public</span> System.Collections.Generic.List&lt;AnimClipEvent&gt; _eventList = <span class="keyword">new</span> System.Collections.Generic.List&lt;AnimClipEvent&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ModelImporterClipAnimation <span class="title">AssgnEvent</span>(<span class="params">ModelImporterClipAnimation animation</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		List&lt;AnimClipEvent&gt; events = _eventList.FindAll((ev) =&gt;</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span> ev.name == animation.name;</span><br><span class="line">			&#125;);</span><br><span class="line">		<span class="keyword">if</span> (events.Count &lt; <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> animation;</span><br><span class="line">		System.Collections.Generic.List&lt;UnityEngine.AnimationEvent&gt; list = <span class="keyword">new</span> System.Collections.Generic.List&lt;UnityEngine.AnimationEvent&gt;();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; events.Count; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			AnimClipEvent e = events[i];</span><br><span class="line">			<span class="keyword">if</span> (e.name == <span class="string">&quot;None&quot;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			UnityEngine.AnimationEvent animEvent = <span class="keyword">new</span> UnityEngine.AnimationEvent();</span><br><span class="line">			animEvent.messageOptions = SendMessageOptions.RequireReceiver;</span><br><span class="line">			animEvent.stringParameter = e.parameter;</span><br><span class="line">			animEvent.functionName = e.FunctionName;</span><br><span class="line">			animEvent.time = e.time;</span><br><span class="line">			list.Add(animEvent);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		animation.events = list.ToArray();</span><br><span class="line">		<span class="keyword">return</span> animation;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	[<span class="meta">System.Serializable</span>]</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AnimClipEvent</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">string</span> name = <span class="string">&quot;None&quot;</span>;</span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">float</span> time;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">string</span> FunctionName = <span class="string">&quot;None&quot;</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">public</span> <span class="built_in">string</span> parameter = <span class="string">&quot;None&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>


<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEditorInternal;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">CustomEditor(typeof(AnimationEvent))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AnimationEventInspector</span> : <span class="title">Editor</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">private</span> Vector2 _scrollPos;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> SerializedProperty fbxTarget;</span><br><span class="line">	<span class="keyword">private</span> SerializedProperty anims;</span><br><span class="line">	<span class="keyword">private</span> SerializedProperty parameters;</span><br><span class="line">	<span class="keyword">private</span> SerializedProperty methods;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> ReorderableList animList;</span><br><span class="line">	<span class="keyword">private</span> ReorderableList parametersList;</span><br><span class="line">	<span class="keyword">private</span> ReorderableList methodList;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> AnimationEvent ctr;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">string</span>[] toolBarMenu = <span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;动画&quot;</span>, <span class="string">&quot;方法&quot;</span>, <span class="string">&quot;参数&quot;</span> &#125;;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">int</span> toolBarSlect = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnEnable</span>()</span></span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		ctr = target <span class="keyword">as</span> AnimationEvent;</span><br><span class="line"></span><br><span class="line">		fbxTarget = serializedObject.FindProperty(<span class="string">&quot;fbxTarget&quot;</span>);</span><br><span class="line">		parameters = serializedObject.FindProperty(<span class="string">&quot;parameters&quot;</span>);</span><br><span class="line">		methods = serializedObject.FindProperty(<span class="string">&quot;methods&quot;</span>);</span><br><span class="line">		anims = serializedObject.FindProperty(<span class="string">&quot;anims&quot;</span>);</span><br><span class="line"></span><br><span class="line">		animList = EditorGUIUtils.CreateOrderList(serializedObject, anims, <span class="string">&quot;动画列表&quot;</span>);</span><br><span class="line">		parametersList = EditorGUIUtils.CreateOrderList(serializedObject, parameters, <span class="string">&quot;参数列表&quot;</span>);</span><br><span class="line">		methodList = EditorGUIUtils.CreateOrderList(serializedObject, methods, <span class="string">&quot;方法列表&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">CheckError</span>()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ctr.anims.Count &lt;= <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ctr.anims.Add(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ctr.methods.Count &lt;= <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ctr.methods.Add(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ctr.parameters.Count &lt;= <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ctr.parameters.Add(<span class="string">&quot;None&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> System.Action actionCfg;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInspectorGUI</span>()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (CheckError())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		serializedObject.Update();</span><br><span class="line"></span><br><span class="line">		EditorGUILayout.PropertyField(fbxTarget, <span class="keyword">new</span> GUIContent(<span class="string">&quot;动画文件&quot;</span>));</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (fbxTarget.objectReferenceValue != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			GUILayout.BeginHorizontal();</span><br><span class="line">			<span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;更新动画事件&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				OnWizardCreate(fbxTarget.objectReferenceValue);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;PingObject&quot;</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				EditorGUIUtility.PingObject(fbxTarget.objectReferenceValue);</span><br><span class="line">			&#125;</span><br><span class="line">			GUILayout.EndHorizontal();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		GUILayout.Space(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">		EditorGUIUtils.FadeArea(<span class="string">&quot;动画配置&quot;</span>, () =&gt;</span><br><span class="line">			&#123;</span><br><span class="line">				GUILayout.Space(<span class="number">4</span>);</span><br><span class="line">				toolBarSlect = GUILayout.Toolbar(toolBarSlect, toolBarMenu);</span><br><span class="line">				<span class="comment">//GUILayout.Space(8);</span></span><br><span class="line"></span><br><span class="line">				<span class="keyword">switch</span> (toolBarSlect)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">						animList.DoLayoutList();</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">						methodList.DoLayoutList();</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">						parametersList.DoLayoutList();</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">					<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;, <span class="literal">false</span>, Repaint);</span><br><span class="line"></span><br><span class="line">		<span class="meta">#<span class="keyword">region</span> actionCfg</span></span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (actionCfg == <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			actionCfg = () =&gt;</span><br><span class="line">			&#123;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; ctr._eventList.Count; i++)</span><br><span class="line">				&#123;</span><br><span class="line">					GUILayout.Space(<span class="number">4</span>);</span><br><span class="line">					AnimationEvent.AnimClipEvent clip = ctr._eventList[i];</span><br><span class="line"></span><br><span class="line">					<span class="built_in">string</span> title = <span class="string">&quot;Actiom_&quot;</span> + i + <span class="string">&quot;:    &quot;</span> + clip.name + <span class="string">&quot;---&quot;</span> + clip.FunctionName + <span class="string">&quot;---&quot;</span> + clip.time + <span class="string">&quot;---&quot;</span> + clip.parameter;</span><br><span class="line"></span><br><span class="line">					GUILayout.Label(title, EditorStyles.boldLabel);</span><br><span class="line">					EditorGUILayout.BeginHorizontal();</span><br><span class="line">					EditorGUILayout.BeginVertical();</span><br><span class="line">					clip.name = EditorGUIUtils.Popup(clip.name, ctr.anims, <span class="string">&quot;[动画名称]:&quot;</span>);</span><br><span class="line">					clip.FunctionName = EditorGUIUtils.Popup(clip.FunctionName, ctr.methods, <span class="string">&quot;[调用方法]:&quot;</span>);</span><br><span class="line"></span><br><span class="line">					clip.time = EditorGUILayout.Slider(<span class="keyword">new</span> GUIContent(<span class="string">&quot;[执行时间]:&quot;</span>), clip.time, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">					clip.parameter = EditorGUIUtils.Popup(clip.parameter, ctr.parameters, <span class="string">&quot;[传递参数]:&quot;</span>);</span><br><span class="line"></span><br><span class="line">					EditorGUILayout.EndVertical();</span><br><span class="line">					GUILayout.BeginVertical();</span><br><span class="line">					<span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;删除&quot;</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						ctr._eventList.RemoveAt(i);</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;添加&quot;</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						ctr._eventList.Insert(i, <span class="keyword">new</span> AnimationEvent.AnimClipEvent());</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					GUILayout.EndVertical();</span><br><span class="line">					EditorGUILayout.EndHorizontal();</span><br><span class="line"></span><br><span class="line">					EditorGUILayout.LabelField(<span class="string">&quot;-----------------------------------------------------------------------------------------------------------&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				GUILayout.Space(<span class="number">8</span>);</span><br><span class="line">			&#125;;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="meta">#<span class="keyword">endregion</span> actionCfg</span></span><br><span class="line">		EditorGUIUtils.FadeArea(<span class="string">&quot;事件配置&quot;</span>, <span class="literal">false</span>, <span class="keyword">this</span>.GetHashCode(), actionCfg, Repaint, () =&gt;</span><br><span class="line">			&#123;</span><br><span class="line">				ctr._eventList.Add(<span class="keyword">new</span> AnimationEvent.AnimClipEvent());</span><br><span class="line">			&#125;, <span class="string">&quot;添加事件&quot;</span>);</span><br><span class="line"></span><br><span class="line">		EditorUtility.SetDirty(target);</span><br><span class="line">		serializedObject.ApplyModifiedProperties();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnWizardCreate</span>(<span class="params">Object _target</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">string</span> path = AssetDatabase.GetAssetPath(_target);</span><br><span class="line">		ModelImporter importer = AssetImporter.GetAtPath(path) <span class="keyword">as</span> ModelImporter;</span><br><span class="line">		<span class="keyword">if</span> (importer != <span class="literal">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			List&lt;ModelImporterClipAnimation&gt; animList = <span class="keyword">new</span> List&lt;ModelImporterClipAnimation&gt;();</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; importer.clipAnimations.Length; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				animList.Add((target <span class="keyword">as</span> AnimationEvent).AssgnEvent(importer.clipAnimations[i]));</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			importer.clipAnimations = animList.ToArray();</span><br><span class="line"></span><br><span class="line">			importer.SaveAndReimport();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2016/08/15/Unity-Animation-Meta/Unity_AnimationEvent_Setting.png" alt="效果"></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>皮肤材质(一)</title>
    <url>/2017/07/06/Shader-SSS-01/</url>
    <content><![CDATA[<p>前段时间我所在的项目终于上线了 Steam , 修复了无数 Bug 之后 , 终于开始有时间进行画面效果优化了 , 本次优化主要针对三个方面 :屏幕特效 , 角色材质和天气系统</p>
<p>昨天开始进行角色材质效果优化 , 效果挺好的记录一下。</p>
<span id="more"></span>

<h3 id="皮肤次表面散射效果"><a href="#皮肤次表面散射效果" class="headerlink" title="皮肤次表面散射效果"></a>皮肤次表面散射效果</h3><p>角色 Shader 经历的多次修改 ：</p>
<ol>
<li>Standard 最开始直接使用标准 Shader ，粗劣调了下参数，达到塑料感</li>
<li>Default_Standard 手抄了Unity的Standard Shader , 并修改了部分参数，添加Rimlignt , 更加橡胶 , 高光更强</li>
<li>Default_Standard__Actor 修改了大部分计算方法 , 加入透明度调节防止相机穿插 ，提高光照明暗对比 , 橡胶感变弱 </li>
<li>StandardDithering 使用 ShderForge 重构 Shader , 细部调节 ，半透明采用 AlphaClip 挖洞方式</li>
<li>StandardDithering_CustomActor 加入多通道 Mask , 允许玩家调节皮肤颜色、亮度、饱和度, 增强自定义功能</li>
<li>StandardDithering_CustomActor__3S 加入 FakeSSS 使得表现更通透 ，模拟皮肤的散射效果</li>
</ol>
<p>最终没有使用真正的次表面散射 , 而是采用在论坛上看到的一个类似效果的 FakeShader ，插入之后效果提升明显,<br>效率高更容易理解就直接使用了, 修改了参数搭配游戏风格 , 由于需要PBR 效果 所以自定义光照被 Shader Forge 禁用了，但 Shader Forge 开放了 <code>Light Wrapping</code> 、 <code>Diffuse Ambient Light</code> 、 <code>Specular Ambient Light</code> 等参数 ，将原本的输入拆分成多个通道到对应参数即可达到一样的效果</p>
<p>参考源码</p>
<p><img src="/2017/07/06/Shader-SSS-01/Shader-sss.png" alt="Code"></p>
<p>效果对比</p>
<p><img src="/2017/07/06/Shader-SSS-01/Shader_3S_Test.jpg" alt="Show"></p>
<h3 id="眼球高光、折射、反射"><a href="#眼球高光、折射、反射" class="headerlink" title="眼球高光、折射、反射"></a>眼球高光、折射、反射</h3><p>未完成…</p>
<h3 id="游戏中效果"><a href="#游戏中效果" class="headerlink" title="游戏中效果"></a>游戏中效果</h3><p><img src="/2017/07/06/Shader-SSS-01/NM_Test.gif" alt="Show"><br><img src="/2017/07/06/Shader-SSS-01/3S_Test.gif" alt="Show"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://www.element3ds.com/thread-97468-1-1.html?_dsign=99de245f">某大大实现的SSS大腿</a></p>
<p><a href="https://forum.unity3d.com/threads/shader-forge-a-visual-node-based-shader-editor.222049/page-54">Unity论坛分享</a>
 </p>
]]></content>
      <categories>
        <category>Shader</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Unity</tag>
        <tag>Shader Forge</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity根据音频进行口型匹配</title>
    <url>/2017/02/18/Unity-AudioLipSync/</url>
    <content><![CDATA[<p>之前找到一个模型带了口型的BlendShape，于是到插件商店里看了一下，是否有好用的对口型插件，看了一圈居然都是手动在时间轴上面K帧，我只能说MDZZ，不被美术打死才怪，于是去查了下目前主流的解决方案，最终自己实现了一个根据音频频谱对口型的方法。</p>
<span id="more"></span>

<p>目前游戏内对口型主流的几种方法：</p>
<ol>
<li>面部表情捕捉</li>
<li>语音内容识别</li>
<li>语音频谱识别</li>
</ol>
<p>1对于大厂来说，工作流完善，有从动作到表情捕捉的全套解决方案，硬件软件设备齐全，直接就通过捕捉来做了，对于我们这种蹒跚学步的小厂和个人来说完全没有办法考虑。</p>
<p>2目前有两种一种是提前解析音频内容生成时间轴，时间轴驱动动画，另一种是实时语音解析驱动，需要第三方SDK，看了OVR的SDK，用了C++库，且在我的机器上各种编辑器崩溃，Github上有Google语音识别的，需要联网也不考虑</p>
<p>3直接实时抓取频谱，匹配特殊频谱来驱动动画</p>
<p>之前似乎记得巫师制作人说是根据语音动态生成的口型，于是乎决定就这个方向了，动态的毕竟灵活   </p>
<p>一开始想自己解析语音内容生成元音时间轴，这样可以保证正确，并且可以通过后期手动修正，还可以添加额外的动画。通过参考Github开源项目里的离线语音识别，发现没有一个能做到较高的正确率，商店里有一个<a href="https://www.assetstore.unity3d.com/cn/#!/content/57425">UnityBridge</a>看视频似乎识别率挺高，但是40刀的价格完全不值，介绍里说他用的<code>Microsoft Speech Recognition</code>，于是我也去看了下，但是自己调出的效果差得远，想到多语言基本没办法搞定，很是沮丧。</p>
<p>又想到找些<code>SpeechToText</code>的项目自己再根据文本来生成时间轴，这样在线的SDK也可以使用了，看了几个的SDK，一是接入麻烦二十都是只有单句话的返回，<br>连时间戳都没得，还得自己验证时间轴…</p>
<p>于是乎就这样试试看看过了三天还是什么都没搞定，一怒之下直接解析频谱得了，撸了半小时找了几个模型来测了下，效果居然意外的的好。<br>然后一拍脑袋，日式动画片里口型不都是这么个么，节奏把握好，根本不会觉得突兀啊 ，鄙视了自己许久重构了一个新的 。</p>
<p>基本思路：</p>
<ol>
<li>实时解析频谱,<code>Unity</code>有现成的接口 <code>AudioSource.GetSpectrumData</code></li>
<li>音元配置映射，单个音元可以驱动多个动画，设定权重，同一时间只响应一个音元</li>
<li>权重计算，根据用户配置筛选特定的样条进行计算，叠加音元的权重</li>
<li>平滑插值，通过BlendShape驱动动画</li>
</ol>
<p>编辑器界面:<br><img src="/2017/02/18/Unity-AudioLipSync/AudioLipSync_Inspector.jpg" alt="编辑器"></p>
<p>效果预览：<br><img src="/2017/02/18/Unity-AudioLipSync/AudioLipSync_Girl.gif" alt="PREVIEW1"><br><img src="/2017/02/18/Unity-AudioLipSync/AudioLipSync_PigAndBox.gif" alt="PREVIEW2">
 </p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Audio</tag>
        <tag>LipSync</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 的布料系统</title>
    <url>/2015/11/03/Unity-Cloth-01/</url>
    <content><![CDATA[<p>很早之前看基础教程的时候看到过布料的使用方式，今天策划调布料一直调不好，我看了一下，新的布料系统，还没用过，调了几分钟，发现挺简单的，这里记录一下，顺带翻一翻文档 </p>
<span id="more"></span>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>先看下基本参数设置，这里的Mesh是一体的，调整的目的是要被子的中下部分随风飘动，其余位置固定<br><img src="/2015/11/03/Unity-Cloth-01/Unity-Cloth-01-setting.jpg" alt="设置"><br>调了下权重和随机以及固定扰动，顶部的权重应该再小一点可以飘的更自然，运行效果：<br><img src="/2015/11/03/Unity-Cloth-01/Unity-Cloth-01-effect.gif" alt="效果"></p>
<h3 id="详细参数说明"><a href="#详细参数说明" class="headerlink" title="详细参数说明"></a>详细参数说明</h3><ul>
<li><p>Stretching Stiffness—拉扯硬度.</p>
</li>
<li><p>Bending Stiffness—弯曲硬度.</p>
</li>
<li><p>Use Tethers—默认开启, 用于方式过度拉伸</p>
</li>
<li><p>Use Gravity—是否使用世界重力.</p>
</li>
<li><p>Damping—阻尼会应用于每个布料顶点. 要想打造看上去抖动更小的布料, 可以试试这个.</p>
</li>
<li><p>External Acceleration—常量外力.</p>
</li>
<li><p>Random Acceleration—随机外力.</p>
</li>
<li><p>World Velocity Scale—与World Acceleration Scale共同组成布料的GameObject.transfrom的运动会对物理模拟造成的影响比例.</p>
</li>
<li><p>World Acceleration Scale—与World Velocity Scale共同组成布料的GameObject.transfrom的运动会对物理模拟造成的影响比例.</p>
</li>
<li><p>riction—当布料碰到在这个列表中存在的Collider时所产生的摩擦力, 这只会影响布料的模拟. 上面说过了布料的物理模拟是单向的.</p>
</li>
<li><p>Collision Mass Scale—How much to increase mass of colliding particles. 这个参数我不懂, 求补充.</p>
</li>
<li><p>Use Continuous Collision—使用Continuous Collision, 增加消耗, 减少直接穿透碰撞的几率.</p>
</li>
<li><p>Use Virtual Particles—Add one virtual particle per triangle to improve collision stability.</p>
</li>
<li><p>Solver Frequency—Number of solver iterations per second. 显然是一个优化参数, 默认120很高了, 我可以试着调低一些.</p>
</li>
<li><p>Sleep Threshold—静止阈值.</p>
</li>
<li><p>Capsule Colliders—要对布料产生交互的胶囊碰撞体.</p>
</li>
<li><p>Sphere Colliders—要对布料产生交互的ClothSphereColliderPairs. 可以理解为他是按照一组来的, 一组中可以只有一个SphereCollider, 也可以有两个, 当有两个的时候, 那么这两个</p>
</li>
<li><p>SphereCollider会在布料的碰撞系统中被”焊接”起来. 这样就允许通过两个大小不同的SphereCollider来组合成一个圆锥形状的碰撞体了.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity编辑器绘制错乱Bug修正</title>
    <url>/2015/07/12/Unity-Editor-Inspector-Draw/</url>
    <content><![CDATA[<p>之前用Unity自定义绘制编辑器时有时会出现界面错乱,需要关掉错乱界面重新编译编辑器代码,<br>我以为是实例化的对象未销毁的原因,今天白猫也遇到了,不错重现方式是改变窗口大小。同时白猫给出了解决方法,把下面脚本添加在Unity工程中的Editor目录下即可。</p>
<span id="more"></span>
<p><img src="/2015/07/12/Unity-Editor-Inspector-Draw/Unity-Draw-Inspector.png" alt="编辑器修正代码"></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 截屏的两种方式</title>
    <url>/2015/10/23/Unity-Capture-ScreenShoot/</url>
    <content><![CDATA[<p>截屏本来就是很简单的问题，然后今天似乎时运不济，延时的方式各种崩溃，不延时的方式只能截取UI，最后发现居然是景深和抗锯齿的脚本在后面搞鬼，真是醉了</p>
<span id="more"></span>

<h3 id="一、注意问题"><a href="#一、注意问题" class="headerlink" title="一、注意问题"></a>一、注意问题</h3><p>如果你的相机上挂有抗锯齿（<code>Antialiasing</code>）和景深（<code>DepthOfField</code>）之类的屏幕后期脚本，在截图时注意先关闭，我今天遇到的问题时，如果打开景深，截图就会是半透明的，打开抗锯齿就只能截取到UI，至于具体原因，先码后补，源码还没看呢…</p>
<h3 id="二、延时方法"><a href="#二、延时方法" class="headerlink" title="二、延时方法"></a>二、延时方法</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> IEnumerator <span class="title">GetCapture</span>(<span class="params">Vector2 startPos, Vector2 size</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">int</span> width = (<span class="built_in">int</span>)size.x;</span><br><span class="line">		<span class="built_in">int</span> height = (<span class="built_in">int</span>)size.y;</span><br><span class="line">		<span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span>()</span>;</span><br><span class="line">		Debug.LogError(Camera.allCamerasCount);</span><br><span class="line">		Texture2D tex = <span class="keyword">new</span> Texture2D(Screen.width, Screen.height, TextureFormat.ARGB32, <span class="literal">false</span>);</span><br><span class="line">		tex.ReadPixels(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, Screen.width, Screen.height), <span class="number">0</span>,<span class="number">0</span>,<span class="literal">true</span>);</span><br><span class="line">		tex.Apply();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="三、不延时方式"><a href="#三、不延时方式" class="headerlink" title="三、不延时方式"></a>三、不延时方式</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Texture2D <span class="title">Screenshot</span>()</span></span><br><span class="line">	&#123;</span><br><span class="line">		Camera camera = Camera.main;</span><br><span class="line">		</span><br><span class="line">		camera.targetTexture = <span class="keyword">new</span> RenderTexture(Screen.width, Screen.height, <span class="number">32</span>);</span><br><span class="line">		Texture2D image = RTImage(camera);</span><br><span class="line">		camera.targetTexture = <span class="literal">null</span>;</span><br><span class="line">		<span class="keyword">return</span> image;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="function">Texture2D <span class="title">RTImage</span>(<span class="params">Camera cam</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		RenderTexture currentRT = RenderTexture.active;</span><br><span class="line">		RenderTexture.active = cam.targetTexture;</span><br><span class="line">		cam.Render();</span><br><span class="line">		Texture2D image = <span class="keyword">new</span> Texture2D(cam.targetTexture.width, cam.targetTexture.height, TextureFormat.ARGB32, <span class="literal">false</span>);</span><br><span class="line">		image.ReadPixels(<span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, cam.targetTexture.width, cam.targetTexture.height), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">		image.Apply();</span><br><span class="line">		RenderTexture.active = currentRT;</span><br><span class="line">		<span class="keyword">return</span> image;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 CustomRenderTexture 的画板</title>
    <url>/2019/04/04/Unity-CustomRenderTexture/</url>
    <content><![CDATA[<p>之前项目需要制作一些场景互动如压草之类的都是通过另外一个相机渲染到 RenderTexture 来实现的，性能压力比较大，最近做沙子交互想起之前看到的 CustomRenderTexture 动手实践了一下</p>
<span id="more"></span>

<h3 id="概念和文档"><a href="#概念和文档" class="headerlink" title="概念和文档"></a>概念和文档</h3><p><a href="https://docs.unity3d.com/ScriptReference/CustomRenderTexture.html">CustomRenderTexture</a></p>
<p>CRT 是在 Unity 中创建的一种资源，可以像 RT 一样使用<br>区别是可以通过脚本和材质配合进行内容更新 </p>
<p>勾选 <code>DoubleBuffered</code> 保证我们可以在运行时采样上一帧的图像<br>Shader 添加更新用的 Pass 和 几个笔刷 Pass<br>C# 脚本添加基本的更新和 UV 获取逻辑<br>多通道混合需要在对应Pass里采样贴图 笔刷的实现也一样</p>
<h3 id="Shader-实现"><a href="#Shader-实现" class="headerlink" title="Shader 实现"></a>Shader 实现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Wonderm/CRT_Shader&quot;</span><br><span class="line">&#123;</span><br><span class="line">	Properties</span><br><span class="line">	&#123;</span><br><span class="line">		_Brush_R(&quot;Brush_R&quot;, 2D) = &quot;black&quot; &#123;&#125;</span><br><span class="line">		_Brush_G(&quot;Brush_G&quot;, 2D) = &quot;black&quot; &#123;&#125;</span><br><span class="line">		_Brush_RGB(&quot;Brush_RGB&quot;, 2D) = &quot;black&quot; &#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CGINCLUDE</span><br><span class="line"></span><br><span class="line">		#include &quot;UnityCustomRenderTexture.cginc&quot;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">		float4 frag(v2f_customrendertexture i) : SV_Target</span><br><span class="line">		&#123;</span><br><span class="line">			float2 uv = i.globalTexcoord;</span><br><span class="line">			float4 c = tex2D(_SelfTexture2D, uv);</span><br><span class="line"></span><br><span class="line">			return c;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		sampler2D _Brush_R;</span><br><span class="line">		float4 _Brush_R_ST;</span><br><span class="line"></span><br><span class="line">		float4 frag_Brush_R(v2f_customrendertexture i) : SV_Target</span><br><span class="line">		&#123;</span><br><span class="line">			float2 uv = i.globalTexcoord;</span><br><span class="line">			float4 c = tex2D(_SelfTexture2D, uv);</span><br><span class="line"></span><br><span class="line">			float2 brushUV = i.localTexcoord*_Brush_R_ST.xy+ _Brush_R_ST.zw;</span><br><span class="line">			float4 r = tex2D(_Brush_R, brushUV);</span><br><span class="line"></span><br><span class="line">			float f = saturate( r.r +c.r);</span><br><span class="line"></span><br><span class="line">			return float4(f, c.g, c.b, max(f, c.a));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		sampler2D _Brush_G;</span><br><span class="line">		float4 _Brush_G_ST;</span><br><span class="line"></span><br><span class="line">		float4 frag_Brush_G(v2f_customrendertexture i) : SV_Target</span><br><span class="line">		&#123;</span><br><span class="line">			float2 uv = i.globalTexcoord;</span><br><span class="line">			float4 c = tex2D(_SelfTexture2D, uv);</span><br><span class="line"></span><br><span class="line">			float2 brushUV = i.localTexcoord*_Brush_G_ST.xy + _Brush_G_ST.zw;</span><br><span class="line">			float4 g = tex2D(_Brush_G, brushUV);</span><br><span class="line"></span><br><span class="line">			float f = saturate(g.r + c.g);</span><br><span class="line">			 </span><br><span class="line">			return  float4(c.r, f, c.b, max(f,c.a));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		sampler2D _Brush_RGB;</span><br><span class="line">		float4 _Brush_RGB_ST;</span><br><span class="line"></span><br><span class="line">		float4 frag_Brush_RGB(v2f_customrendertexture i) : SV_Target</span><br><span class="line">		&#123;</span><br><span class="line">			float2 uv = i.globalTexcoord;</span><br><span class="line">			float4 c = tex2D(_SelfTexture2D, uv);</span><br><span class="line"></span><br><span class="line">			float2 brushUV = i.localTexcoord*_Brush_RGB_ST.xy + _Brush_RGB_ST.zw;</span><br><span class="line">			float4 g = tex2D(_Brush_RGB, brushUV);</span><br><span class="line"></span><br><span class="line">			float4 f = lerp(c,g,g.a);</span><br><span class="line">			return f;</span><br><span class="line">		&#125;</span><br><span class="line">	</span><br><span class="line">	ENDCG</span><br><span class="line"></span><br><span class="line">			SubShader</span><br><span class="line">		&#123;</span><br><span class="line">			Cull Off ZWrite Off ZTest Always</span><br><span class="line"></span><br><span class="line">			Pass</span><br><span class="line">			&#123;</span><br><span class="line">				Name &quot;Update&quot;</span><br><span class="line">				CGPROGRAM</span><br><span class="line">				#pragma vertex CustomRenderTextureVertexShader</span><br><span class="line">				#pragma fragment frag</span><br><span class="line">				ENDCG</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Pass</span><br><span class="line">			&#123;</span><br><span class="line">				Name &quot;Brush_R&quot;</span><br><span class="line">				CGPROGRAM</span><br><span class="line">				#pragma vertex CustomRenderTextureVertexShader</span><br><span class="line">				#pragma fragment frag_Brush_R</span><br><span class="line">				ENDCG</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Pass</span><br><span class="line">			&#123;</span><br><span class="line">				Name &quot;Brush_G&quot;</span><br><span class="line">				CGPROGRAM</span><br><span class="line">				#pragma vertex CustomRenderTextureVertexShader</span><br><span class="line">				#pragma fragment frag_Brush_G</span><br><span class="line">				ENDCG</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			Pass</span><br><span class="line">			&#123;</span><br><span class="line">				Name &quot;Brush_RGB&quot;</span><br><span class="line">				CGPROGRAM</span><br><span class="line">				#pragma vertex CustomRenderTextureVertexShader</span><br><span class="line">				#pragma fragment frag_Brush_RGB</span><br><span class="line">				ENDCG</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class CanvasPainterCtr : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private Renderer targetRender;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    CustomRenderTexture source_CRT;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    int iterationPerFrame = 5;</span><br><span class="line"></span><br><span class="line">    [SerializeField, Range(0.01f, 0.5f)]</span><br><span class="line">    private float paintRadius;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    CustomRenderTexture crt;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    private bool sharemat;</span><br><span class="line"></span><br><span class="line">    [SerializeField]</span><br><span class="line">    string propName = &quot;_MainTex&quot;;</span><br><span class="line"></span><br><span class="line">    CustomRenderTextureUpdateZone updateZone = new CustomRenderTextureUpdateZone();</span><br><span class="line">    CustomRenderTextureUpdateZone painterZone = new CustomRenderTextureUpdateZone();</span><br><span class="line">    CustomRenderTextureUpdateZone[] list  ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    void OnEnable()</span><br><span class="line">    &#123;</span><br><span class="line">        crt = CustomRenderTexture.Instantiate(source_CRT);</span><br><span class="line">        crt.Initialize();</span><br><span class="line">        if (sharemat)</span><br><span class="line">        &#123;</span><br><span class="line">            targetRender.sharedMaterial.SetTexture(propName, crt);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            targetRender.material.SetTexture(propName, crt);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        list = new CustomRenderTextureUpdateZone[] &#123; updateZone, painterZone &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void OnDisable()</span><br><span class="line">    &#123;</span><br><span class="line">        crt.ClearUpdateZones();</span><br><span class="line">        Destroy(crt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void LateUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        ApplyUpdate();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    void ApplyUpdate()</span><br><span class="line">    &#123;</span><br><span class="line">        crt.ClearUpdateZones();</span><br><span class="line">        UpdateZones();</span><br><span class="line">        crt.Update(iterationPerFrame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    RaycastHit[] hits = new RaycastHit[4];</span><br><span class="line"></span><br><span class="line">    void UpdateZones()</span><br><span class="line">    &#123;</span><br><span class="line">        bool leftClick = Input.GetMouseButton(0);</span><br><span class="line">        bool rightClick = Input.GetMouseButton(1);</span><br><span class="line">        bool middleClick = Input.GetMouseButton(2);</span><br><span class="line"></span><br><span class="line">        int index = leftClick ? 1 : rightClick ? 2 : middleClick ? 3 : -1;</span><br><span class="line">        if (index &lt; 0) return;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">        var count = Physics.RaycastNonAlloc(ray,   hits);</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; count; i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            list[0].needSwap = true;</span><br><span class="line">            list[0].passIndex = 0;</span><br><span class="line">            list[0].rotation = 0f;</span><br><span class="line">            list[0].updateZoneCenter = new Vector2(0.5f, 0.5f);</span><br><span class="line">            list[0].updateZoneSize = new Vector2(1f, 1f);</span><br><span class="line"></span><br><span class="line">            list[1].needSwap = true;</span><br><span class="line">            list[1].passIndex = index;</span><br><span class="line">            list[1].rotation = 0f;</span><br><span class="line">            list[1].updateZoneCenter = new Vector2(hits[i].textureCoord.x,  1- hits[i].textureCoord.y);</span><br><span class="line">            list[1].updateZoneSize = new Vector2(paintRadius, paintRadius);</span><br><span class="line"></span><br><span class="line">            crt.SetUpdateZones(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="丑陋的效果图等待更新"><a href="#丑陋的效果图等待更新" class="headerlink" title="丑陋的效果图等待更新"></a>丑陋的效果图等待更新</h3><p><img src="/2019/04/04/Unity-CustomRenderTexture/CRT_1.jpg" alt="CRT_1"><br><img src="/2019/04/04/Unity-CustomRenderTexture/CRT_2.jpg" alt="CRT_2"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/hecomi/UnityWaterSurface">hecomi&#x2F;UnityWaterSurface</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>CustomRenderTexture</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity调用摄像头显示并保存图像</title>
    <url>/2015/08/01/Unity-Devices-WebCamTexture/</url>
    <content><![CDATA[<p>将摄像头的内容绘制场景中,并保存为图片</p>
<span id="more"></span>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">webCameraTex</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"> 	<span class="comment">//设备名称	</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">string</span> deviceName;</span><br><span class="line">	<span class="comment">//摄像头</span></span><br><span class="line">	WebCamTexture webCam;</span><br><span class="line">	<span class="comment">//保存路径</span></span><br><span class="line">	<span class="built_in">string</span> path = <span class="string">&quot;/Users/Wonderm/Desktop/&quot;</span> + <span class="string">&quot;test.png&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		StartCoroutine (ShowWebCam ());</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//展示摄像头内容</span></span><br><span class="line">	<span class="function">IEnumerator  <span class="title">ShowWebCam</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span> (Application.HasUserAuthorization (UserAuthorization.WebCam)) &#123;</span><br><span class="line">			WebCamDevice[] devices = WebCamTexture.devices;</span><br><span class="line">			deviceName = devices [<span class="number">0</span>].name;</span><br><span class="line">			webCam = <span class="keyword">new</span> WebCamTexture (deviceName);</span><br><span class="line">			Material material   = GetComponent&lt;Renderer&gt; ().material;</span><br><span class="line">			material.mainTexture = webCam;</span><br><span class="line">			<span class="function"><span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">new</span> <span class="title">WaitForEndOfFrame</span> ()</span>;</span><br><span class="line">			webCam.Play ();</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//保存为图片</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SaveWebCam</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		Texture2D tempTex = <span class="keyword">new</span> Texture2D (webCam.width, webCam.height, TextureFormat.ARGB32, <span class="literal">false</span>);</span><br><span class="line">		Color32[] data = <span class="keyword">new</span> Color32[tempTex.width * tempTex.height];</span><br><span class="line">		tempTex.SetPixels32 (webCam.GetPixels32 (data));</span><br><span class="line">		<span class="built_in">byte</span>[] imagebytes = tempTex.EncodeToPNG ();</span><br><span class="line">		FileStream cache = <span class="keyword">new</span> FileStream (path, FileMode.Create);</span><br><span class="line">		cache.Write (imagebytes, <span class="number">0</span>, imagebytes.Length);</span><br><span class="line">		cache.Close ();  </span><br><span class="line">		</span><br><span class="line">		File.WriteAllBytes (path, imagebytes);</span><br><span class="line">	&#125;</span><br><span class="line">	 </span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (GUILayout.Button (<span class="string">&quot;Save&quot;</span>)) &#123;</span><br><span class="line">			SaveWebCam ();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity获取当前场景中的所有GameObject</title>
    <url>/2015/08/31/Unity-Editor-SelectAll/</url>
    <content><![CDATA[<p>Unity在某个版本之后加入了<code>Scene.GetRootGameObjects</code>来获取所有根节点，<br>所以文章不用看了</p>
<p>Unity2017 2018.3.4</p>
<span id="more"></span>

<hr>
<p>在使用Unity的过程中，经常会有获取场景中物体的需求<br>Unity提供了以下方法供我们使用：</p>
<ol>
<li><code>GameObject.Find</code></li>
<li><code>GameObject.FindWithTag</code>   </li>
<li><code>Object.FindObjectOfType</code></li>
<li><code>Transform.Find</code></li>
</ol>
<p>虽然还有其他方法，但是在使用和功能上和这几种基本没有区别<br>其中 1、2、3都是只能获取到Active的物体，4只能获取Active物体的(Active&#x2F;inActive)子物体<br>然而这些对于要开发编辑器插件的我们来说<strong>并没有什么卵用</strong></p>
<!--more-->
<p>常见的需求是获取到场景中所有的物体</p>
<p>在各种搜索未果后，我企图获取<code>Hierarchy</code>的Root节点，依旧未果<br>在<code>Selection</code>中，是可以获取到所有选择到的对象的，Unity同时提供了<code>Editor/Select All</code>菜单<br>蛋疼的是这个<code>SelectAll</code>的方法是<code>private</code>的，类<code>SceneHierarchyWindow</code>是<code>internal</code>的<br>这能忍！！！想到之前代码更换<code>IconForObject</code>的原理于是果断反射搞起<br>和预想的一样，搞了反射之后，Unity的编辑器方法在你面前已经没有什么秘密了，随你<strong>OOXX</strong></p>
<p>代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Reflection;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using UnityEditor;</span><br><span class="line">using UnityEngine;</span><br><span class="line"></span><br><span class="line">public class GetComp </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	[MenuItem (&quot;My/GetComp&quot;)]</span><br><span class="line">	static void GetComp ()</span><br><span class="line">	&#123;</span><br><span class="line">		Assembly asm = Assembly.GetAssembly (typeof(UnityEditor.EditorWindow));</span><br><span class="line"></span><br><span class="line">		Type publishingType = asm.GetType (&quot;UnityEditor.SceneHierarchyWindow&quot;);</span><br><span class="line">		MethodInfo rInfo = publishingType.GetMethod (&quot;SelectAll&quot;, BindingFlags.NonPublic | BindingFlags.Instance);</span><br><span class="line">		 </span><br><span class="line">		ConstructorInfo t1Constructor = publishingType.GetConstructor (Type.EmptyTypes);</span><br><span class="line">		System.Object oPubClass =  (System.Object)ScriptableObject.CreateInstance(&quot;SceneHierarchyWindow&quot;);</span><br><span class="line">		 </span><br><span class="line"> </span><br><span class="line">		if (rInfo.Name == &quot;SelectAll&quot;) &#123;</span><br><span class="line">			rInfo.Invoke (oPubClass, null);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		UnityEngine.Object[] objs = Selection.objects;</span><br><span class="line">		for (int i = 0; i &lt; objs.Length; i++) &#123;</span><br><span class="line">			Debug.Log (objs [i].name);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity编辑器枚举类型扩展</title>
    <url>/2016/03/20/Unity-Editor-PropertyDrawer-EnumLabel/</url>
    <content><![CDATA[<p>在查看Unity的ImporSetting时，发现Unity有好多显示在面板上的枚举类型中含有特殊字符，显示文字和变量名不同等等问题，想到扩展Unity的序列化属性绘制</p>
<span id="more"></span>

<h3 id="PropertyDrawer-方法扩展"><a href="#PropertyDrawer-方法扩展" class="headerlink" title="PropertyDrawer 方法扩展"></a><code>PropertyDrawer</code> 方法扩展</h3><p><code>PropertyDrawer</code> 是 <code>Unity</code> 提供的用于绘制序列化字段的方式</p>
<ol>
<li>继承 <code>PropertyDrawer</code></li>
<li>属性标记 <code>[CustomPropertyDrawer (typeof (PropertyAttribute))]</code></li>
<li>重写 <code>OnGUI</code> 方法</li>
</ol>
<p>实现代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[CustomPropertyDrawer (typeof(EnumLabel))]</span><br><span class="line">public class  EnumLabelDrawer : PropertyDrawer</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	public override void OnGUI (Rect position, SerializedProperty property, GUIContent label)</span><br><span class="line">	&#123;</span><br><span class="line">		 </span><br><span class="line">		var type = property.serializedObject.targetObject.GetType ();</span><br><span class="line">		var attr = attribute as EnumLabel;</span><br><span class="line">		if (attr != null &amp;&amp; attr.label.Length &gt; 0) &#123;</span><br><span class="line">			label.text = attr.label;</span><br><span class="line">		&#125;</span><br><span class="line">		var field = type.GetField (property.name);</span><br><span class="line">		if (field.FieldType.IsEnum) &#123;</span><br><span class="line">			property.enumValueIndex = EditorGuiLayout.EnumPopupInt (position, field.FieldType, label.text, property.enumValueIndex);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="枚举类型定义和使用"><a href="#枚举类型定义和使用" class="headerlink" title="枚举类型定义和使用"></a>枚举类型定义和使用</h3><p>属性提供隐藏，标记，分组三个功能，没有标记的使用 <code>Unity</code> 默认绘制</p>
<p>示例代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public enum MyEnum</span><br><span class="line">	&#123;</span><br><span class="line">		Test_1,</span><br><span class="line">		[EnumLabel (&quot;No.2&quot;)]</span><br><span class="line">		Test_2,,</span><br><span class="line">		[EnumLabel (&quot;_Hide&quot;)]</span><br><span class="line">		Test_3,</span><br><span class="line">		[EnumLabel (&quot;Group/No.4&quot;)]</span><br><span class="line">		Test_4,</span><br><span class="line">		[EnumLabel (&quot;Group/No.5&quot;)]</span><br><span class="line">		Test_5,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public MyEnum noAttr = MyEnum.Test_1;</span><br><span class="line"></span><br><span class="line">	[EnumLabel ()]</span><br><span class="line">	public MyEnum noLabel = MyEnum.Test_1;</span><br><span class="line"></span><br><span class="line">	[EnumLabel (&quot;Editor_2&quot;)]</span><br><span class="line">	public MyEnum withLabel = MyEnum.Test_1;</span><br></pre></td></tr></table></figure>

<p>示例效果:<br><img src="/2016/03/20/Unity-Editor-PropertyDrawer-EnumLabel/EnumLabel_1.jpg" alt="EnumLabel_1"><br><img src="/2016/03/20/Unity-Editor-PropertyDrawer-EnumLabel/EnumLabel_2.jpg" alt="EnumLabel_2"><br><img src="/2016/03/20/Unity-Editor-PropertyDrawer-EnumLabel/EnumLabel_3.png" alt="EnumLabel_3">
 </p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity定位代码丢失的组件</title>
    <url>/2015/07/23/Unity-Editor-missing-scripts/</url>
    <content><![CDATA[<p>代码丢失的问题一直不好定位,今天在某交流群里发现了一个脚本,正好是用来解决这个问题的顺带mark一记</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ***********************************************************</span><br><span class="line">//	Copyright 2013 Daikon Forge, http://www.daikonforge.com</span><br><span class="line">//	All rights reserved.</span><br><span class="line">//</span><br><span class="line">//	This source code is free for all non-commercial uses.</span><br><span class="line">//</span><br><span class="line">//	THIS SOFTWARE IS PROVIDED &#x27;AS IS&#x27; AND WITHOUT ANY EXPRESS OR</span><br><span class="line">//	IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED</span><br><span class="line">//	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.</span><br><span class="line">//</span><br><span class="line">// ***********************************************************</span><br><span class="line"></span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEditor;</span><br><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Reflection;</span><br><span class="line"></span><br><span class="line">using UnityObject = UnityEngine.Object;</span><br><span class="line"></span><br><span class="line">[CustomEditor( typeof( MonoBehaviour ) )]</span><br><span class="line">public class MissingScriptResolver : Editor</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	#region Static variables </span><br><span class="line"></span><br><span class="line">	private const string HELP_INFO = @&quot;This component has a missing script. </span><br><span class="line"></span><br><span class="line">	Possible candidates for the missing script are shown below. Click the button that represents the missing script to assign that script.</span><br><span class="line"></span><br><span class="line">	This component&#x27;s properties are shown below to help you determine which script is correct.&quot;;</span><br><span class="line"></span><br><span class="line">	// Will hold a ScriptMatcher reference for each discovered type</span><br><span class="line">	private static List&lt;ScriptMatcher&gt; types = null;</span><br><span class="line"></span><br><span class="line">	// Cached list of candidate scripts for each component</span><br><span class="line">	private static Dictionary&lt;UnityObject, List&lt;ScriptLookup&gt;&gt; candidates = new Dictionary&lt;UnityObject, List&lt;ScriptLookup&gt;&gt;();</span><br><span class="line"></span><br><span class="line">	#endregion</span><br><span class="line"></span><br><span class="line">	#region Menu add-ins </span><br><span class="line"></span><br><span class="line">	[MenuItem( &quot;Window/Find Missing Scripts In Prefabs&quot;, priority = 1 )]</span><br><span class="line">	public static void FindMissingScriptsInPrefabs()</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		var progressTime = Environment.TickCount;</span><br><span class="line"></span><br><span class="line">		#region Load all assets in project before searching</span><br><span class="line"></span><br><span class="line">		var allAssetPaths = AssetDatabase.GetAllAssetPaths();</span><br><span class="line">		for( int i = 0; i &lt; allAssetPaths.Length; i++ )</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			if( Environment.TickCount - progressTime &gt; 250 )</span><br><span class="line">			&#123;</span><br><span class="line">				progressTime = Environment.TickCount;</span><br><span class="line">				EditorUtility.DisplayProgressBar( &quot;Find Missing Scripts&quot;, &quot;Searching prefabs&quot;, (float)i / (float)allAssetPaths.Length );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			AssetDatabase.LoadMainAssetAtPath( allAssetPaths[ i ] );</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		EditorUtility.ClearProgressBar();</span><br><span class="line"></span><br><span class="line">		#endregion</span><br><span class="line"></span><br><span class="line">		var prefabs = Resources</span><br><span class="line">		.FindObjectsOfTypeAll( typeof( GameObject ) )</span><br><span class="line">		.Cast&lt;GameObject&gt;()</span><br><span class="line">		.Where( x =&gt; x.transform.parent == null &amp;&amp; isPrefab( x ) )</span><br><span class="line">		.OrderBy( x =&gt; x.name )</span><br><span class="line">		.ToList();</span><br><span class="line"></span><br><span class="line">		var brokenPrefabs = prefabs</span><br><span class="line">		.Where( x =&gt; x.GetComponentsInChildren&lt;Component&gt;( true ).Any( c =&gt; c == null ) )</span><br><span class="line">		.ToList();</span><br><span class="line"></span><br><span class="line">		var message = &quot;&quot;;</span><br><span class="line">		if( brokenPrefabs.Count &gt; 0 )</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			for( int i = 0; i &lt; brokenPrefabs.Count; i++ )</span><br><span class="line">			&#123;</span><br><span class="line">				var prefab = brokenPrefabs[ i ];</span><br><span class="line">				var path = AssetDatabase.GetAssetPath( prefab );</span><br><span class="line">				Debug.LogWarning( &quot;Prefab has missing scripts: &quot; + path, prefab );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			message = string.Format( &quot;Found &#123;0&#125; prefabs with missing scripts. The full list can be viewed in the console pane&quot;, brokenPrefabs.Count );</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			message = string.Format( &quot;Searched &#123;0&#125; prefabs. No missing scripts detected.&quot;, prefabs.Count );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		EditorUtility.DisplayDialog( &quot;Find Missing Scripts&quot;, message, &quot;OK&quot; );</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	[MenuItem( &quot;Window/Find Missing Scripts In Scene&quot;, priority = 0 )]</span><br><span class="line">	public static void FindMissingScriptsInScene()</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		var broken = findBrokenObjectsInScene();</span><br><span class="line">		if( broken.Count == 0 )</span><br><span class="line">		&#123;</span><br><span class="line">			</span><br><span class="line">			EditorUtility.DisplayDialog( &quot;No missing scripts&quot;, &quot;There are no objects with missing scripts in this scene.&quot;, &quot;YAY!&quot; );</span><br><span class="line">			</span><br><span class="line">			// Make sure static lists are cleaned up</span><br><span class="line">			types = null;</span><br><span class="line">			candidates = null;</span><br><span class="line">			</span><br><span class="line">			return;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		// Grab the object highest up in the scene hierarchy</span><br><span class="line">		var sorted = broken</span><br><span class="line">		.Select( x =&gt; new &#123; target = x, path = getObjectPath( x ) &#125; )</span><br><span class="line">		.OrderBy( x =&gt; x.path )</span><br><span class="line">		.First();</span><br><span class="line"></span><br><span class="line">		Debug.LogWarning( string.Format( &quot;&#123;0&#125; objects in this scene have missing scripts, selecting &#x27;&#123;1&#125;&#x27; first&quot;, broken.Count, sorted.target.name ) );</span><br><span class="line">		Selection.activeGameObject = sorted.target;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	#endregion</span><br><span class="line"></span><br><span class="line">	#region Unity events</span><br><span class="line"></span><br><span class="line">	public override void OnInspectorGUI()</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		try</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			// If the inspected component does not have a missing script, </span><br><span class="line">			// revert to base Inspector functionality</span><br><span class="line">			var scriptProperty = this.serializedObject.FindProperty( &quot;m_Script&quot; );</span><br><span class="line">			if( scriptProperty == null || scriptProperty.objectReferenceValue != null )</span><br><span class="line">			&#123;</span><br><span class="line">				base.OnInspectorGUI();</span><br><span class="line">				return;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			// Make sure that the inspector is not viewing a prefab directly.</span><br><span class="line">			// Not sure what&#x27;s up, but doing so with this custom inspector </span><br><span class="line">			// crashes Unity with 100% reproducability.</span><br><span class="line">			var behavior = target as MonoBehaviour;</span><br><span class="line">			if( behavior != null &amp;&amp; isPrefab( behavior.gameObject ) )</span><br><span class="line">			&#123;</span><br><span class="line"></span><br><span class="line">				var prefabMessage = @&quot;The Missing Script Resolver cannot edit prefabs directly. Please move this prefab into a scene before editing&quot;;</span><br><span class="line">				EditorGUILayout.HelpBox( prefabMessage, MessageType.Error );</span><br><span class="line"></span><br><span class="line">				types = null;</span><br><span class="line">				candidates = null;</span><br><span class="line"></span><br><span class="line">				base.OnInspectorGUI();</span><br><span class="line">				return;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			// Ensure candidate list contains an entry for the inspected component</span><br><span class="line">			if( candidates == null ) candidates = new Dictionary&lt;UnityObject, List&lt;ScriptLookup&gt;&gt;();</span><br><span class="line">			if( !candidates.ContainsKey( target ) )</span><br><span class="line">			&#123;</span><br><span class="line"></span><br><span class="line">				// Find all MonoScript instances that are a possible match</span><br><span class="line">				// for the component currently in the inspector, and sort</span><br><span class="line">				// them from mostly likely match to least likely match.</span><br><span class="line">				var candidateLookup =</span><br><span class="line">				getDefinedScriptTypes()</span><br><span class="line">				.Select( c =&gt; new ScriptLookup() &#123; Matcher = c, Score = c.ScoreMatch( serializedObject ) &#125; )</span><br><span class="line">				.Where( c =&gt; c.Score &gt; 0 )</span><br><span class="line">				.OrderByDescending( c =&gt; c.Score )</span><br><span class="line">				.ToList();</span><br><span class="line"></span><br><span class="line">				candidates[ target ] = candidateLookup;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			// Retrieve the list of possible matching scripts</span><br><span class="line">			var possibleMatches = candidates[ target ];</span><br><span class="line"></span><br><span class="line">			GUILayout.Label( &quot;Missing Script&quot;, &quot;HeaderLabel&quot; );</span><br><span class="line"></span><br><span class="line">			// Show help information </span><br><span class="line">			EditorGUILayout.HelpBox( HELP_INFO, MessageType.Warning );</span><br><span class="line"></span><br><span class="line">			// If there are no possible matches found, let the user know that they</span><br><span class="line">			// must manually assign the missing script.</span><br><span class="line">			if( possibleMatches.Count == 0 )</span><br><span class="line">			&#123;</span><br><span class="line">				EditorGUILayout.HelpBox( &quot;No matching scripts found.&quot;, MessageType.Error );</span><br><span class="line">				base.OnInspectorGUI();</span><br><span class="line">				return;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			// Let the developer decide how many possible matches to display. </span><br><span class="line">			// This was done because sometimes there are a number of scripts</span><br><span class="line">			// whose fields appear to be a match based on name and type, such</span><br><span class="line">			// as when one script inherits from another without adding any </span><br><span class="line">			// additional serialized properties.</span><br><span class="line">			var candidateCountConfig = EditorPrefs.GetInt( &quot;DaikonForge.MissingScriptCount&quot;, 3 );</span><br><span class="line">			var candidateCount = Mathf.Max( EditorGUILayout.IntField( &quot;Num Scripts to Show&quot;, candidateCountConfig ), 1 );</span><br><span class="line">			if( candidateCount != candidateCountConfig )</span><br><span class="line">			&#123;</span><br><span class="line">				EditorPrefs.SetInt( &quot;DaikonForge.MissingScriptCount&quot;, candidateCount );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			EditorGUILayout.BeginHorizontal();</span><br><span class="line">			GUILayout.Space( 25 );</span><br><span class="line">			EditorGUILayout.BeginVertical();</span><br><span class="line"></span><br><span class="line">			for( int i = 0; i &lt; Mathf.Min( candidateCount, possibleMatches.Count ); i++ )</span><br><span class="line">			&#123;</span><br><span class="line"></span><br><span class="line">				// Display a button to select the candidate script</span><br><span class="line">				var candidate = possibleMatches[ i ];</span><br><span class="line">				if( !GUILayout.Button( candidate.Matcher.Name, &quot;minibutton&quot; ) )</span><br><span class="line">				continue;</span><br><span class="line"></span><br><span class="line">				// Make this operation undo-able</span><br><span class="line">				#if UNITY_4_3</span><br><span class="line">				Undo.RegisterCompleteObjectUndo( target, &quot;Assign missing script&quot; );</span><br><span class="line">				#else</span><br><span class="line">				Undo.RegisterSceneUndo( &quot;Assign missing script&quot; );</span><br><span class="line">				#endif</span><br><span class="line"></span><br><span class="line">				// Assign the selected MonoScript </span><br><span class="line">				scriptProperty.objectReferenceValue = candidate.Matcher.Script;</span><br><span class="line">				scriptProperty.serializedObject.ApplyModifiedProperties();</span><br><span class="line">				scriptProperty.serializedObject.Update();</span><br><span class="line"></span><br><span class="line">				// Save the scene in case Unity crashes</span><br><span class="line">				EditorUtility.SetDirty( this.target );</span><br><span class="line">				EditorApplication.SaveScene();</span><br><span class="line">				EditorApplication.SaveAssets();</span><br><span class="line"></span><br><span class="line">				// Check for more objects with missing scripts</span><br><span class="line">				if( Selection.activeGameObject.activeInHierarchy )</span><br><span class="line">				&#123;</span><br><span class="line"></span><br><span class="line">					// If there are no more missing scripts in this scene, </span><br><span class="line">					// let the developer know and clean up static lists</span><br><span class="line">					var broken = findBrokenObjectsInScene();</span><br><span class="line">					if( broken.Count == 0 )</span><br><span class="line">					&#123;</span><br><span class="line"></span><br><span class="line">						EditorUtility.DisplayDialog( &quot;No missing scripts&quot;, &quot;There are no objects with missing scripts in this scene&quot;, &quot;YAY!&quot; );</span><br><span class="line"></span><br><span class="line">						// Make sure static lists are cleaned up</span><br><span class="line">						types = null;</span><br><span class="line">						candidates = null;</span><br><span class="line"></span><br><span class="line">					&#125;</span><br><span class="line">					else</span><br><span class="line">					&#123;</span><br><span class="line"></span><br><span class="line">						// Select the next object with missing scripts. This may be</span><br><span class="line">						// the current object if there are more components with </span><br><span class="line">						// missing scripts on this object. Yay for sorting!</span><br><span class="line">						Selection.activeGameObject = broken.First();</span><br><span class="line"></span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			EditorGUILayout.EndVertical();</span><br><span class="line">			EditorGUILayout.EndHorizontal();</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		catch( Exception err )</span><br><span class="line">		&#123;</span><br><span class="line">			Debug.LogError( err );</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		GUILayout.Label( &quot;Component Properties&quot;, &quot;HeaderLabel&quot; );</span><br><span class="line">		EditorGUI.indentLevel += 1;</span><br><span class="line"></span><br><span class="line">		base.OnInspectorGUI();</span><br><span class="line"></span><br><span class="line">		EditorGUI.indentLevel -= 1;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	#endregion</span><br><span class="line"></span><br><span class="line">	#region Private utility functions </span><br><span class="line"></span><br><span class="line">	/// &lt;summary&gt;</span><br><span class="line">	/// Returns a value indicating whether an object is a prefab</span><br><span class="line">	/// &lt;/summary&gt;</span><br><span class="line">	private static bool isPrefab( GameObject item )</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		if( item == null )</span><br><span class="line">		return false;</span><br><span class="line"></span><br><span class="line">		return</span><br><span class="line">		item != null &amp;&amp;</span><br><span class="line">		PrefabUtility.GetPrefabParent( item ) == null &amp;&amp;</span><br><span class="line">		PrefabUtility.GetPrefabObject( item ) != null;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/// &lt;summary&gt;</span><br><span class="line">	/// Returns the nesting level of a GameObject</span><br><span class="line">	/// &lt;/summary&gt;</span><br><span class="line">	/// &lt;param name=&quot;x&quot;&gt;&lt;/param&gt;</span><br><span class="line">	/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">	private static string getObjectPath( GameObject x )</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		var path = new System.Text.StringBuilder( 1024 );</span><br><span class="line"></span><br><span class="line">		var depth = 0;</span><br><span class="line"></span><br><span class="line">		while( x != null &amp;&amp; x.transform.parent != null )</span><br><span class="line">		&#123;</span><br><span class="line">			path.Append( x.name );</span><br><span class="line">			path.Append( &quot;/&quot; );</span><br><span class="line">			x = x.transform.parent.gameObject;</span><br><span class="line">			depth += 1;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		return depth.ToString( &quot;D12&quot; ) + &quot;/&quot; + path.ToString();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/// &lt;summary&gt;</span><br><span class="line">	/// Returns a list of GameObject instances in the current scene that </span><br><span class="line">	/// have at least one Missing Script, sorted by their path in the </span><br><span class="line">	/// scene hierarchy</span><br><span class="line">	/// &lt;/summary&gt;</span><br><span class="line">	/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">	private static List&lt;GameObject&gt; findBrokenObjectsInScene()</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		// Find all of the GameObjects in the scene and sort them</span><br><span class="line">		// by the &quot;path&quot; in the scene hierarchy</span><br><span class="line">		var brokenObjects = Resources</span><br><span class="line">		.FindObjectsOfTypeAll( typeof( GameObject ) )</span><br><span class="line">		.Cast&lt;GameObject&gt;()</span><br><span class="line">		.Where( x =&gt; x.activeInHierarchy &amp;&amp; x.GetComponents&lt;Component&gt;().Any( c =&gt; c == null ) )</span><br><span class="line">		.OrderBy( x =&gt; getObjectPath( x ) )</span><br><span class="line">		.ToList();</span><br><span class="line"></span><br><span class="line">		return brokenObjects;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/// &lt;summary&gt;</span><br><span class="line">	/// Return a list containing a ScriptMatcher instance for </span><br><span class="line">	/// each MonoScript defined in the current project.</span><br><span class="line">	/// Note that Unity defines a MonoScript even for types </span><br><span class="line">	/// defined in referenced assemblies, not just user scripts.</span><br><span class="line">	/// &lt;/summary&gt;</span><br><span class="line">	/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">	private static List&lt;ScriptMatcher&gt; getDefinedScriptTypes()</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		if( types != null )</span><br><span class="line">		return types;</span><br><span class="line"></span><br><span class="line">		// Get the list of all MonoScript instances in the project that</span><br><span class="line">		// are not abstract or unclosed generic types</span><br><span class="line">		types = Resources</span><br><span class="line">		.FindObjectsOfTypeAll( typeof( MonoScript ) )</span><br><span class="line">		.Where( x =&gt; x.GetType() == typeof( MonoScript ) ) // Fix for Unity crash</span><br><span class="line">		.Cast&lt;MonoScript&gt;()</span><br><span class="line">		.Select( x =&gt; new ScriptMatcher( x ) )</span><br><span class="line">		.Where( x =&gt; x.Type != null &amp;&amp; !x.Type.IsAbstract &amp;&amp; !x.Type.IsGenericType )</span><br><span class="line">		.ToList();</span><br><span class="line"></span><br><span class="line">		// Ignore any MonoScript types defined by Unity, as it&#x27;s extremely </span><br><span class="line">		// unlikely that they could ever be missing</span><br><span class="line">		var editorAssembly = typeof( Editor ).Assembly;</span><br><span class="line">		var engineAssembly = typeof( MonoBehaviour ).Assembly;</span><br><span class="line">		types.RemoveAll( x =&gt; x.Type.Assembly == editorAssembly || x.Type.Assembly == engineAssembly );</span><br><span class="line"></span><br><span class="line">		return types;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	#endregion</span><br><span class="line"></span><br><span class="line">	#region Nested utility classes </span><br><span class="line"></span><br><span class="line">	private class ScriptLookup</span><br><span class="line">	&#123;</span><br><span class="line">		public ScriptMatcher Matcher;</span><br><span class="line">		public float Score;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	/// &lt;summary&gt;</span><br><span class="line">	/// Used to determine the likelihood that a particular MonoScript</span><br><span class="line">	/// is a match for a component with the &quot;Missing Script&quot; issue</span><br><span class="line">	/// &lt;/summary&gt;</span><br><span class="line">	private class ScriptMatcher</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		#region Private data members </span><br><span class="line"></span><br><span class="line">		private MonoScript script;</span><br><span class="line">		private Type type;</span><br><span class="line">		private List&lt;FieldInfo&gt; fields;</span><br><span class="line"></span><br><span class="line">		#endregion</span><br><span class="line"></span><br><span class="line">		#region Constructor</span><br><span class="line"></span><br><span class="line">		public ScriptMatcher( MonoScript script )</span><br><span class="line">		&#123;</span><br><span class="line">			this.script = script;</span><br><span class="line">			this.type = script.GetClass();</span><br><span class="line">			this.fields = GetAllFields( type ).ToList();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		#endregion</span><br><span class="line"></span><br><span class="line">		#region Public properties</span><br><span class="line"></span><br><span class="line">		public MonoScript Script &#123; get &#123; return this.script; &#125; &#125;</span><br><span class="line"></span><br><span class="line">		public Type Type &#123; get &#123; return this.type; &#125; &#125;</span><br><span class="line"></span><br><span class="line">		public string Name &#123; get &#123; return type.Name; &#125; &#125;</span><br><span class="line"></span><br><span class="line">		#endregion</span><br><span class="line"></span><br><span class="line">		#region Public methods</span><br><span class="line"></span><br><span class="line">		/// &lt;summary&gt;</span><br><span class="line">		/// Generates a score indicating how likely the script is to </span><br><span class="line">		/// be a match for the serialized object, with values closer</span><br><span class="line">		/// to 1 being most likely and values closer to 0 being the</span><br><span class="line">		/// least likely.</span><br><span class="line">		/// &lt;/summary&gt;</span><br><span class="line">		/// &lt;param name=&quot;target&quot;&gt;The component with the Missing Script issue&lt;/param&gt;</span><br><span class="line">		public float ScoreMatch( SerializedObject target )</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			int count = 0;</span><br><span class="line"></span><br><span class="line">			var iter = target.GetIterator();</span><br><span class="line">			iter.Next( true );</span><br><span class="line">			while( iter.Next( false ) )</span><br><span class="line">			&#123;</span><br><span class="line">				var field = fields.Find( f =&gt; f.Name == iter.name );</span><br><span class="line">				if( field != null )</span><br><span class="line">				&#123;</span><br><span class="line">					switch( iter.propertyType )</span><br><span class="line">					&#123;</span><br><span class="line">						case SerializedPropertyType.ArraySize:</span><br><span class="line">						if( field.FieldType.HasElementType ) count += 1;</span><br><span class="line">						else if( typeof( IEnumerable ).IsAssignableFrom( field.FieldType ) ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.AnimationCurve:</span><br><span class="line">						if( field.FieldType == typeof( AnimationCurve ) ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.Boolean:</span><br><span class="line">						if( field.FieldType == typeof( bool ) ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.Bounds:</span><br><span class="line">						if( field.FieldType == typeof( Bounds ) ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.Color:</span><br><span class="line">						if( field.FieldType == typeof( Color32 ) ) count += 1;</span><br><span class="line">						else if( field.FieldType == typeof( Color ) ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.Enum:</span><br><span class="line">						if( field.FieldType.IsEnum ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.Float:</span><br><span class="line">						if( typeof( float ).IsAssignableFrom( field.FieldType ) ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.Integer:</span><br><span class="line">						if( typeof( int ).IsAssignableFrom( field.FieldType ) ) count += 1;</span><br><span class="line">						else if( typeof( uint ).IsAssignableFrom( field.FieldType ) ) count += 1;</span><br><span class="line">						else if( field.FieldType.IsEnum ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.ObjectReference:</span><br><span class="line">						if( !field.FieldType.IsValueType ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.Rect:</span><br><span class="line">						if( field.FieldType == typeof( Rect ) ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.String:</span><br><span class="line">						if( field.FieldType == typeof( string ) ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.Vector2:</span><br><span class="line">						if( field.FieldType == typeof( Vector2 ) ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						case SerializedPropertyType.Vector3:</span><br><span class="line">						if( field.FieldType == typeof( Vector3 ) ) count += 1;</span><br><span class="line">						break;</span><br><span class="line">						default:</span><br><span class="line">						count += 1;</span><br><span class="line">						break;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			if( count == 0 )</span><br><span class="line">			return 0f;</span><br><span class="line"></span><br><span class="line">			return (float)count / fields.Count;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		#endregion</span><br><span class="line"></span><br><span class="line">		#region Private methods </span><br><span class="line"></span><br><span class="line">		/// &lt;summary&gt;</span><br><span class="line">		/// Returns all instance fields on an object, including inherited fields</span><br><span class="line">		/// &lt;/summary&gt;</span><br><span class="line">		private static FieldInfo[] GetAllFields( Type type )</span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			// http://stackoverflow.com/a/1155549/154165</span><br><span class="line"></span><br><span class="line">			if( type == null )</span><br><span class="line">			return new FieldInfo[ 0 ];</span><br><span class="line"></span><br><span class="line">			BindingFlags flags =</span><br><span class="line">			BindingFlags.Public |</span><br><span class="line">			BindingFlags.NonPublic |</span><br><span class="line">			BindingFlags.Instance |</span><br><span class="line">			BindingFlags.DeclaredOnly;</span><br><span class="line"></span><br><span class="line">			return</span><br><span class="line">			type.GetFields( flags )</span><br><span class="line">			.Concat( GetAllFields( type.BaseType ) )</span><br><span class="line">			.Where( f =&gt; !f.IsDefined( typeof( HideInInspector ), true ) )</span><br><span class="line">			.ToArray();</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		#endregion</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	#endregion</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity自定义编辑器</title>
    <url>/2015/05/11/Unity-Editor-custom/</url>
    <content><![CDATA[<p>必须继承 <code>EditorWindow</code> 类，添加初始化窗口函数作为入口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static BuildTargetEditor window;</span><br><span class="line">static void MyWindows ()</span><br><span class="line">&#123;</span><br><span class="line">	window = (BuildTargetEditor)EditorWindow.GetWindowWithRect (typeof(BuildTargetEditor), new Rect (0, 0, 880, 510), true);</span><br><span class="line">	window.title = &quot;编辑器&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>在菜单栏添加菜单<br>在菜单栏添加<code>Tools/MyTool</code> 路径菜单，快捷键为<code>Alt+1</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[MenuItem (&quot;Tools/MyTool &amp;1&quot;)]</span><br></pre></td></tr></table></figure>
<p>绘制界面方法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 布局</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnGUI</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GUILayout.<span class="built_in">Space</span> (<span class="number">12f</span>);</span><br><span class="line">	GUILayout.<span class="built_in">BeginHorizontal</span> ();</span><br><span class="line">	GUILayout.<span class="built_in">EndHorizontal</span> ();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.分割线</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绘制分割线</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">VSeparator</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	GUILayout.<span class="built_in">Space</span> (<span class="number">12f</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (Event.current.type == EventType.Repaint) &#123;</span><br><span class="line">		Texture2D tex = EditorGUIUtility.whiteTexture;</span><br><span class="line">		Rect rect = GUILayoutUtility.<span class="built_in">GetLastRect</span> ();</span><br><span class="line">		GUI.color = <span class="keyword">new</span> <span class="built_in">Color</span> (<span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0.25f</span>);</span><br><span class="line">		GUI.<span class="built_in">DrawTexture</span> (<span class="keyword">new</span> <span class="built_in">Rect</span> (<span class="number">0f</span>, rect.yMin + <span class="number">6f</span>, Screen.width, <span class="number">4f</span>), tex);</span><br><span class="line">		GUI.<span class="built_in">DrawTexture</span> (<span class="keyword">new</span> <span class="built_in">Rect</span> (<span class="number">0f</span>, rect.yMin + <span class="number">6f</span>, Screen.width, <span class="number">1f</span>), tex);</span><br><span class="line">		GUI.<span class="built_in">DrawTexture</span> (<span class="keyword">new</span> <span class="built_in">Rect</span> (<span class="number">0f</span>, rect.yMin + <span class="number">9f</span>, Screen.width, <span class="number">1f</span>), tex);</span><br><span class="line">		GUI.color = Color.white;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">HSeparator</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	GUILayout.<span class="built_in">Space</span> (<span class="number">12f</span>);</span><br><span class="line">	<span class="keyword">if</span> (Event.current.type == EventType.Repaint) &#123;</span><br><span class="line">		Texture2D tex = EditorGUIUtility.whiteTexture;</span><br><span class="line">		Rect rect = GUILayoutUtility.<span class="built_in">GetLastRect</span> ();</span><br><span class="line">		GUI.color = <span class="keyword">new</span> <span class="built_in">Color</span> (<span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0f</span>, <span class="number">0.25f</span>);</span><br><span class="line">		GUI.<span class="built_in">DrawTexture</span> (<span class="keyword">new</span> <span class="built_in">Rect</span> (rect.xMin + <span class="number">6f</span>, <span class="number">0f</span>, <span class="number">1f</span>, Screen.height), tex);</span><br><span class="line">		GUI.<span class="built_in">DrawTexture</span> (<span class="keyword">new</span> <span class="built_in">Rect</span> (rect.xMin + <span class="number">6f</span>, <span class="number">0f</span>, <span class="number">4f</span>, Screen.height), tex);</span><br><span class="line">		GUI.<span class="built_in">DrawTexture</span> (<span class="keyword">new</span> <span class="built_in">Rect</span> (rect.xMin + <span class="number">9f</span>, <span class="number">0f</span>, <span class="number">1f</span>, Screen.height), tex);</span><br><span class="line">		GUI.color = Color.white;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.基本UI</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GUILayout.Label (“标签”, GUILayout.Width (240));</span><br><span class="line"></span><br><span class="line">GUI.Button (new Rect (4f, Screen.height – 48, 120, 42), “按钮”)</span><br><span class="line"></span><br><span class="line">GUILayout.Toggle (isOn,nameStringArry[], “选项”,GUILayout.Width(232)</span><br><span class="line"></span><br><span class="line">GUILayout.Toolbar (intSelected,stringitem[]);</span><br><span class="line"></span><br><span class="line">GUILayout.Box (Resources.LoadAssetAtPath&lt;Texture&gt; (iCO_List [index]) as Texture, GUILayout.Width (100), GUILayout.Height (100));</span><br><span class="line"></span><br><span class="line">GUILayout.Space (100);</span><br><span class="line"></span><br><span class="line">GUILayout.BeginHorizontal ();</span><br><span class="line">GUILayout.EndHorizontal ();</span><br></pre></td></tr></table></figure>
<p>效果图如下<br><img src="/2015/05/11/Unity-Editor-custom/unity_editor_custom.png" alt="图片"></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity中相对路径和绝对路径</title>
    <url>/2015/06/28/Unity-File-Path/</url>
    <content><![CDATA[<ul>
<li><p><code>File.Exists()</code>方法,相对路径和绝对路径都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(File.Exists(&quot;Assets/PopList.zip&quot;))&#123;</span><br><span class="line">	Debug.Log (&quot;File 相对&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(File.Exists(Application.dataPath+&quot;/PopList.zip&quot;))&#123;</span><br><span class="line">	Debug.Log (&quot;File 绝对&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Directory.Exists()</code>方法,相对路径和绝对路径都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(Directory.Exists(&quot;Assets/Test&quot;))&#123;</span><br><span class="line">	Debug.Log (&quot;Directory 相对&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(Directory.Exists(Application.dataPath+&quot;/Test&quot;))&#123;</span><br><span class="line">	Debug.Log (&quot;Directory 绝对&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>XmlDocument.Save()</code>方法,相对路径和绝对路径都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">XmlDocument xml = new XmlDocument ();</span><br><span class="line">xml.Save (&quot;Assets/Test/xml_1&quot;);</span><br><span class="line">xml.Save (Application.dataPath+&quot;/Test/xml_2&quot;);</span><br></pre></td></tr></table></figure></li>
<li><p><code>AssetDatabase.LoadAssetAtPath()</code>方法,只能读取相对路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Texture texture  = AssetDatabase.LoadAssetAtPath(&quot;Assets/Textures/texture.jpg&quot;,typeof(Texture)) as Texture;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity残影制作</title>
    <url>/2016/11/04/Unity-GhostEffect-BakeMesh/</url>
    <content><![CDATA[<p>今天有个需求制作残影效果，要求能够实时生成残影，残影Shader很容易撸出来，实时获取并生成Mesh通过查询API得到<code>SkinnedMeshRenderer.BakeMesh</code>,可以在运行时生成Mesh快照，写好测试运行成功。</p>
<span id="more"></span>

<p>在动画上K好事件进行测试时，发现Mesh快照居然全是T-Pos的，直接调用是OK的，只有动画事件触发的是T-Pos，经同事提醒想到了动画事件的更新时机问题，于是收到动画事件等待到LateUpdate中再<code>BakeMesh</code>，发现没有问题了。</p>
<p>诡异的是，在写博客时，我又写了测试例子，这一次通过动画调用事件的残影也是OK的。公司用的版本是5.3.4，测试用的是5.4.2，Bug原因不明待测。</p>
<p>和同事交流，听闻之前的游戏中角色的胖瘦会发生变化，也是通过此方法更新Mesh实现的。</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="/2016/11/04/Unity-GhostEffect-BakeMesh/Unity_BakeMesh_GhostEffect.png" alt="效果"></p>
<h3 id="残影Shader"><a href="#残影Shader" class="headerlink" title="残影Shader"></a>残影Shader</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Wonderm/Ghost&quot; &#123;</span><br><span class="line">	Properties&#123;</span><br><span class="line">	  _MainTex(&quot;Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">	  _BumpMap(&quot;Bumpmap&quot;, 2D) = &quot;bump&quot; &#123;&#125;</span><br><span class="line">	  _RimColor(&quot;Rim Color&quot;, Color) = (0.46,0.0,1.0,0.0)</span><br><span class="line">	  _RimPower(&quot;Rim Power&quot;, Range(0.2,2.0)) = 0.5</span><br><span class="line">	  _Brightness(&quot;Brightness&quot;,Range(0.0,3.0)) = 1.0</span><br><span class="line">	&#125;</span><br><span class="line">		SubShader&#123;</span><br><span class="line">		  Tags &#123; &quot;RenderType&quot; = &quot;Transparent&quot; &quot;Queue&quot; = &quot;Transparent&quot; &quot;IgnoreProjector&quot; = &quot;True&quot;&#125;</span><br><span class="line"></span><br><span class="line">		  // extra pass that renders to depth buffer only</span><br><span class="line">		   Pass &#123;</span><br><span class="line">			  ZWrite On</span><br><span class="line">			  ColorMask 0</span><br><span class="line">			 &#125;</span><br><span class="line"></span><br><span class="line">			CGPROGRAM</span><br><span class="line">			#pragma surface surf Lambert alpha noambient nolightmap nodirlightmap  novertexlights</span><br><span class="line">			struct Input &#123;</span><br><span class="line">				float2 uv_MainTex;</span><br><span class="line">				float2 uv_BumpMap;</span><br><span class="line">				float3 viewDir;</span><br><span class="line">			&#125;;</span><br><span class="line">			sampler2D _MainTex;</span><br><span class="line">			sampler2D _BumpMap;</span><br><span class="line">			float4 _RimColor;</span><br><span class="line">			float _RimPower;</span><br><span class="line">			float _Brightness;</span><br><span class="line"></span><br><span class="line">			void surf(Input IN, inout SurfaceOutput o) &#123;</span><br><span class="line">			  half4 basecol = tex2D(_MainTex, IN.uv_MainTex);</span><br><span class="line">				  half3 graycol = dot(basecol.rgb,float3(0.3,0.59,0.11));</span><br><span class="line">				o.Albedo = graycol;</span><br><span class="line">				o.Normal = UnpackNormal(tex2D(_BumpMap, IN.uv_BumpMap));</span><br><span class="line">				half rim = 1.0 - saturate(dot(normalize(IN.viewDir), o.Normal));</span><br><span class="line">				o.Emission = _RimColor.rgb * pow(rim, _RimPower) * _Brightness;</span><br><span class="line">				o.Alpha = (o.Emission.r + o.Emission.g + o.Emission.b) / 3.0;</span><br><span class="line">			&#125;</span><br><span class="line">			ENDCG</span><br><span class="line">	  &#125;</span><br><span class="line">		  Fallback &quot;Diffuse&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowGhost</span>(<span class="params">SkinnedMeshRenderer render, Color color, Vector3 pos, Quaternion rot, <span class="built_in">float</span> fadeOutTime</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (fadeOutTime == <span class="number">0</span> || render == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> ghostMat = <span class="keyword">new</span> Material(Shader.Find(<span class="string">&quot;Wonderm/Ghost&quot;</span>));</span><br><span class="line">       ghostMat.SetColor(<span class="string">&quot;_RimColor&quot;</span>, color);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> newMesh = <span class="keyword">new</span> Mesh();</span><br><span class="line">       render.BakeMesh(newMesh);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> newMats = <span class="keyword">new</span> Material[render.sharedMaterials.Length];</span><br><span class="line">       <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; newMats.Length; i++) &#123; newMats[i] = ghostMat; &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> obj = <span class="keyword">new</span> GameObject(<span class="string">&quot;Ghost&quot;</span>);</span><br><span class="line">       obj.transform.position = pos;</span><br><span class="line">       obj.transform.rotation = rot;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> newFilter = obj.AddComponent&lt;MeshFilter&gt;();</span><br><span class="line">       newFilter.sharedMesh = newMesh;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">var</span> newRender = obj.AddComponent&lt;MeshRenderer&gt;();</span><br><span class="line">       newRender.sharedMaterials = newMats;</span><br><span class="line">       newRender.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;</span><br><span class="line">       newRender.receiveShadows = <span class="literal">false</span>;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       	此处添加淡出代码</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">if</span> (fadeOutTime &gt; <span class="number">0</span>)</span><br><span class="line">           GameObject.Destroy(obj, fadeOutTime);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>贝尔矩阵和后期模糊实现半透明</title>
    <url>/2018/03/04/Unity-Shader-Dithering-Transparent/</url>
    <content><![CDATA[<p>延时渲染下的半透明排序一直是个问题，性能和Shader的书写都不是很好，于是我们在各大AAA游戏中看到半透明时的网格，这次终于抽出时间来自己实现一下</p>
<span id="more"></span>

<p>之前在玩MGS时就看到了明显的网格效果，尤其当相机穿过角色脑袋时，当时才刚刚接触3D游戏开发不久 Shader 水平也仅停留在看过一本 Shader 入门的快餐书籍上，并不能理解是怎么做到的，前段时间又读了一次Unity的文档，有了基本思路</p>
<hr>
<h3 id="解决问题步骤"><a href="#解决问题步骤" class="headerlink" title="解决问题步骤"></a>解决问题步骤</h3><ol>
<li>生成<code>Dither</code>矩阵</li>
<li>编写剔除 Shader</li>
<li>标记透明区域</li>
<li>后期区域模糊</li>
<li>优化最终效果</li>
</ol>
<hr>
<h3 id="Ordered-Dithering"><a href="#Ordered-Dithering" class="headerlink" title="Ordered Dithering"></a>Ordered Dithering</h3><p>最早了解到这个名词是在 <a href="http://allenchou.net/2016/05/a-brain-dump-of-what-i-worked-on-for-uncharted-4-chinese/">allenchou</a> 的博客上，<a href="https://en.wikipedia.org/wiki/Ordered_dithering">贝尔矩阵</a> 的原理也被揭示出来</p>
<p>矩阵的生成Wiki上给了公式，可以从二阶矩阵生成任意阶</p>
<p><del>直接套用</del> 作为程序员，除非逼不得已所有造轮子的行为都应该制止，面向Github编程的我花了两分钟就得到通项公式，顺带的到了挖洞Shader，验证了下程序的正确性可以放心食用</p>
<p><a href="https://github.com/lifangjie/BayerDistanceDither">别人的轮子 ( lifangjie&#x2F;BayerDistanceDither )</a></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BayerMatrix</span>(<span class="params"><span class="keyword">ref</span> <span class="built_in">float</span>[] output, <span class="built_in">int</span> n</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Assert.IsTrue(Mathf.IsPowerOfTwo(n) &amp;&amp; n &gt; <span class="number">1</span>);</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> log2N = Mathf.RoundToInt(Mathf.Log(n, <span class="number">2</span>));</span><br><span class="line">        <span class="built_in">int</span>[,] temp = <span class="keyword">new</span> <span class="built_in">int</span>[n, n];</span><br><span class="line">        temp[<span class="number">0</span>, <span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        temp[<span class="number">0</span>, <span class="number">1</span>] = <span class="number">3</span>;</span><br><span class="line">        temp[<span class="number">1</span>, <span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">        temp[<span class="number">1</span>, <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> currentSize = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; log2N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> row = <span class="number">0</span>; row &lt; currentSize; row++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> col = <span class="number">0</span>; col &lt; currentSize; col++)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp[row, col + currentSize] = temp[row, col] * <span class="number">4</span> + <span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> row = <span class="number">0</span>; row &lt; currentSize; row++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> col = <span class="number">0</span>; col &lt; currentSize; col++)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp[row + currentSize, col] = temp[row, col] * <span class="number">4</span> + <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> row = <span class="number">0</span>; row &lt; currentSize; row++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> col = <span class="number">0</span>; col &lt; currentSize; col++)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp[row + currentSize, col + currentSize] = temp[row, col] * <span class="number">4</span> + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> row = <span class="number">0</span>; row &lt; currentSize; row++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> col = <span class="number">0</span>; col &lt; currentSize; col++)</span><br><span class="line">                &#123;</span><br><span class="line">                    temp[row, col] = temp[row, col] * <span class="number">4</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            currentSize *= <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; n * n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            output[i] = <span class="number">1f</span> + temp[i / n, i % n];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Dither-Shader"><a href="#Dither-Shader" class="headerlink" title="Dither Shader"></a>Dither Shader</h3><p>将上面项目的 Shader 改为自己的习惯</p>
<h4 id="Frag-Shader"><a href="#Frag-Shader" class="headerlink" title="Frag Shader"></a>Frag Shader</h4><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">V2F:</span><br><span class="line">float4 screenPos :   SV_POSITION;</span><br><span class="line"></span><br><span class="line">VERT:</span><br><span class="line">o.screenPos = UnityObjectToClipPos(v.vertex);</span><br><span class="line"></span><br><span class="line">FRAG:</span><br><span class="line">ClipDither(_Dither, i.screenPos.xy );</span><br><span class="line"></span><br><span class="line">ClipDither:</span><br><span class="line"><span class="type">int</span> <span class="keyword">index</span> = (<span class="type">int</span>(screenPos.x) % Size) * Size + <span class="type">int</span>(screenPos.y) % Size;</span><br><span class="line"><span class="keyword">return</span> (depth - DitherMatrix[<span class="keyword">index</span>]/(Size * Size+ <span class="number">1</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Surface-Shader"><a href="#Surface-Shader" class="headerlink" title="Surface Shader"></a>Surface Shader</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Surface:</span><br><span class="line">ClipDither(_Dither, IN.screenPos);</span><br><span class="line"></span><br><span class="line">ClipDither:</span><br><span class="line">float2 pos = screenPos.xy /screenPos.w * _ScreenParams.xy;</span><br></pre></td></tr></table></figure>



<h3 id="区域标记"><a href="#区域标记" class="headerlink" title="区域标记"></a>区域标记</h3><p>到了最麻烦的一个步骤，本身思路很清晰，标记了就好，但是几种标记方案都有各种坑需要踩</p>
<h4 id="Stencil"><a href="#Stencil" class="headerlink" title="Stencil"></a>Stencil</h4><p>这个是最容易想到的方法</p>
<ol>
<li>对象Shader<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stencil </span><br><span class="line">&#123;</span><br><span class="line">    Ref 2</span><br><span class="line">    Comp Always</span><br><span class="line">    Pass Replace</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>后期Shader<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Stencil </span><br><span class="line">&#123;</span><br><span class="line">    Ref 2</span><br><span class="line">    Comp Equal</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果你以为这么个就成了说明你肯定没有自己尝试过Unity在<code>OnRenderImage</code>之前会清除<code>Z+Stancil</code>，通过<code>FrameDebug</code>可以清楚的看到，在<a href="https://twitter.com/desolusdev/status/776283681312956416">Twitter</a>上看到有人说把深度改成24就可以保留，文档上和RT上确实是这么写的，但是实际测试的结果并不是这样的，被清除的干干净净，也许我的姿势不对，但是据我多方查证搜索，还没有一个姿势对的</p>
<h4 id="Stencil-CommandBuffer"><a href="#Stencil-CommandBuffer" class="headerlink" title="Stencil + CommandBuffer"></a>Stencil + CommandBuffer</h4><p>既然被提前清理了，那我只要开个<code>CommandBuffer</code>把它保留下来就Ok了，然后到<code>OnRenderImage</code>里把 RT 拿到就好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmdBuffer = new CommandBuffer();</span><br><span class="line">cmdBuffer.name = &quot;DitherMaskBuffer&quot;;</span><br><span class="line">cmdBuffer.Blit(BuiltinRenderTextureType.None, BuiltinRenderTextureType.CurrentActive, stencilMat);</span><br><span class="line">cam.AddCommandBuffer(CameraEvent.BeforeImageEffectsOpaque, cmdBuffer);</span><br></pre></td></tr></table></figure>

<p>如果你以为这么个就成了说明你肯定没有自己尝试过x2<br>被挖过洞的对象拿到的标记区域也是挖了洞的，这个是小事，就跟屏幕描边一样平移四次就可以解决，<code>Forward</code>下一切正常，但是<code>Deferred</code>模式下<code>Surface Shader</code>的标记区域又没有了x2，只剩下<code>Frag Shader</code>，开启帧调试，发现<code>Stencil Clear</code>这次发生在<code>Shadow Collection</code>时，我看了下<code>CommandBuffer</code>的<code>CameraEvent</code>，只有一句<code>花Q</code>可以说</p>
<h4 id="Replacement-Shader"><a href="#Replacement-Shader" class="headerlink" title="Replacement Shader"></a>Replacement Shader</h4><p>突然想起前几天Unity的微信公众号推了一篇文章 <a href="http://forum.china.unity3d.com/thread-30958-1-1.html">Unity 着色器训练营(3) - 替换着色器方法</a></p>
<p>也是个不错的思路，直接替换掉所有的Shader，分为非模糊和要模糊两种，区分黑白标记就好了,透明的也要注意不透明和全透明时不要模糊</p>
<ol>
<li><p>Shader</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RenderType = Dither</span><br><span class="line"></span><br><span class="line">float4 black =0;</span><br><span class="line">float4 white =1;</span><br><span class="line">int a = _Dither&gt;0 &amp;&amp; _Dither &lt;1;</span><br><span class="line">return lerp(black,white,a);</span><br></pre></td></tr></table></figure>
</li>
<li><p>ImageEffect</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cam.SetReplacementShader(replace, &quot;RenderType&quot;);</span><br></pre></td></tr></table></figure></li>
</ol>
<p>如果你以为这么个就成了说明你肯定没有自己尝试过x3<br>事情总是一波三折，<code>Forward</code>下一切正常，但是<code>Deferred</code>模式下<code>ReplacementShader</code>效果全都没有了x3<br>我翻看了文档，关于<code>ReplacementShader</code>的部分连<code>RenderPath</code>一个字都没有提及，暂且使用”Forward”模式出效果吧</p>
<p>至此我们生成了模糊区域的Mask图，三种方法都得开启另外一个相机来生成RT，并且都只能在<code>RenderPath=Forward</code>模式下完美工作<br>有朋友说有插件能在<code>Deferred</code>下使用<code>ReplacementShader</code>，<del>暂且等他的回复</del>插件已经收到还没有看</p>
<h4 id="Draw-Mesh"><a href="#Draw-Mesh" class="headerlink" title="Draw Mesh"></a>Draw Mesh</h4><p>其实有第四中方法，来源是 <a href="http://www.u3dnotes.com/archives/1397">利用Stencil来优化局部后处理特效</a><br>链接中给的项目确实在<code>Deferred下</code>也能正常工作，但是我并没有去尝试，原因是每个Mesh额外单独Draw一次，而且有多次绘制Quad，远不如另外一个相机用<code>Forward</code>出RT方便使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> foreach (MeshFilter r in glowTargets)</span><br><span class="line">&#123;</span><br><span class="line">    Graphics.DrawMeshNow(r.sharedMesh, r.transform.localToWorldMatrix);//绘制发光物体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同事使用的方法应该类似于这一种，以前大概扫了一眼代码，有时间需要交流下，他的分享</p>
<p><a href="https://cowlevel.net/article/1917657">让角色半透明：从 Ordered Dithering 说起（一）</a></p>
<p><a href="https://cowlevel.net/article/1917881">让角色半透明：后期模糊（二）</a></p>
<p><a href="https://cowlevel.net/article/1918399">让角色半透明：树形结构（三）</a></p>
<h3 id="后期模糊"><a href="#后期模糊" class="headerlink" title="后期模糊"></a>后期模糊</h3><p>至此我们已经拿到了标记需要模糊区域的遮罩贴图了，在以前的屏幕模糊上加入遮罩，平时只模糊遮罩部分，开启模糊时模糊全屏，这个非常的简单</p>
<p>屏幕模糊效果<br><a href="../../../../../2017/07/07/Shader-Image-Effect-02/">Shader 屏幕后期特效-02</a></p>
<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p>你可能会注意到边缘的部分有像素的颜色比较高，其实在Shader中对Mask先模糊一次就可以解决，但我没有这么做的原因是这是放大五倍之后看到的效果，正常缩放是没有这么明显的</p>
<h4 id="待优化"><a href="#待优化" class="headerlink" title="待优化"></a>待优化</h4><p>现在看到的透明度和真正的透明比起来其实不透明度是更高的，可以选一个对照来矫正不透明变化曲线来达到更加接近的效果</p>
<p>挖洞<br>Scale&#x3D;5x<br>Alpha&#x3D;0.368</p>
<p><img src="/2018/03/04/Unity-Shader-Dithering-Transparent/Dither_01.png" alt="挖洞细节"></p>
<p>挖洞 + 屏幕AA<br>Scale&#x3D;5x<br>Alpha&#x3D;0.368</p>
<p><img src="/2018/03/04/Unity-Shader-Dithering-Transparent/Dither_AA_01.png" alt="屏幕AA"></p>
<p>挖洞 + 屏幕AA + 屏幕模糊<br>Scale&#x3D;5x<br>Alpha&#x3D;0.368<br>BlurSample&#x3D;3<br>BlurRadius&#x3D;0.075</p>
<p><img src="/2018/03/04/Unity-Shader-Dithering-Transparent/Dither_AA_Blur_x3_01.png" alt="屏幕模糊采样三次"></p>
<p>挖洞 + 屏幕AA + 屏幕模糊<br>Scale&#x3D;5x<br>Alpha&#x3D;0.368<br>BlurSample&#x3D;8<br>BlurRadius&#x3D;0.075</p>
<p><img src="/2018/03/04/Unity-Shader-Dithering-Transparent/Dither_AA_Blur_x8_01.png" alt="屏幕模糊采样八次"></p>
<p>挖洞 + 屏幕AA + 屏幕模糊<br>Scale&#x3D;1x<br>Alpha&#x3D;0.368<br>BlurSample&#x3D;3<br>BlurRadius&#x3D;0.075</p>
<p><img src="/2018/03/04/Unity-Shader-Dithering-Transparent/Dither_AA_Blur_x3_02.png" alt="正常效果"></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ol>
<li><a href="https://forum.unity.com/threads/leveraging-stencil-buffers-for-masked-post-effects.313466/">Leveraging Stencil buffers for masked post effects</a></li>
<li><a href="http://qiankanglai.me/2015/03/07/unity-posteffect-stencil/">Take advantage of Stencil buffer in Post Process</a></li>
<li><a href="https://answers.unity.com/questions/1255829/stencil-buffer-in-image-effect-not-updating.html">Stencil Buffer in Image Effect not updating</a></li>
<li><a href="https://forum.unity.com/threads/commandbuffer-blit-isnt-stencil-buffer-friendly.432776/">CommandBuffer.Blit() isn’t stencil buffer friendly</a></li>
<li><a href="https://forum.unity.com/threads/unity-5-6-0f3-empty-stencil-buffer-onrenderimage.473444/">[Unity 5.6.0f3] empty stencil buffer OnRenderImage</a></li>
<li><a href="http://lib.csdn.net/article/unity3d/36757">关于unity shader的StencilBuffer</a></li>
<li><a href="https://docs.unity3d.com/Manual/SL-Stencil.html">ShaderLab: Stencil</a></li>
</ol>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Unity</tag>
        <tag>Toon</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity 卡通渲染（一）</title>
    <url>/2017/04/03/Unity-Shader-ToonShading/</url>
    <content><![CDATA[<p>今天在知乎上看到一篇文章 <a href="https://zhuanlan.zhihu.com/p/26140321">《塞尔达风之杖技术分析-角色渲染和面部表情》</a>，<br>想起自己虽然也看了不少卡通渲染的文章，却还没有手动撸过，决定练习一下。</p>
<span id="more"></span>

<p>风之杖的渲染其实非常简单，贴图只画色彩，不画光影和明暗，将法线方向和光线方向做点乘再和纹理相乘得到暗部强度，过渡方式实用 Smoothstep 或者通关渐变纹理指定。</p>
<h3 id="Unlit-Shader"><a href="#Unlit-Shader" class="headerlink" title="Unlit Shader"></a>Unlit Shader</h3><p>先撸个无光照的架子往里面填东西</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Wonderm/Unlit/Texture&quot;</span><br><span class="line">&#123;</span><br><span class="line">	Properties</span><br><span class="line">	&#123;</span><br><span class="line">		_MainTex(&quot;Texture&quot;, 2D) = &quot;white&quot; &#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		SubShader</span><br><span class="line">	&#123;</span><br><span class="line">		Tags &#123; &quot;RenderType&quot; = &quot;Opaque&quot; &#125;</span><br><span class="line">		LOD 100</span><br><span class="line">		 </span><br><span class="line">		Pass</span><br><span class="line">		&#123;</span><br><span class="line">			CGPROGRAM</span><br><span class="line">			#pragma vertex vert</span><br><span class="line">			#pragma fragment frag</span><br><span class="line">			#pragma multi_compile_fog</span><br><span class="line"></span><br><span class="line">			#include &quot;UnityCG.cginc&quot;</span><br><span class="line"></span><br><span class="line">			struct appdata</span><br><span class="line">			&#123;</span><br><span class="line">				float4 vertex : POSITION;</span><br><span class="line">				float2 uv : TEXCOORD0;</span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line">			struct v2f</span><br><span class="line">			&#123;</span><br><span class="line">				float2 uv : TEXCOORD0;</span><br><span class="line">				UNITY_FOG_COORDS(1)</span><br><span class="line">				float4 vertex : SV_POSITION;</span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line">			sampler2D _MainTex;</span><br><span class="line">			float4 _MainTex_ST;</span><br><span class="line"></span><br><span class="line">			v2f vert(appdata v)</span><br><span class="line">			&#123;</span><br><span class="line">				v2f o;</span><br><span class="line">				o.vertex = UnityObjectToClipPos(v.vertex);</span><br><span class="line">				o.uv = TRANSFORM_TEX(v.uv, _MainTex);</span><br><span class="line">				UNITY_TRANSFER_FOG(o,o.vertex);</span><br><span class="line">				return o;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			fixed4 frag(v2f i) : SV_Target</span><br><span class="line">			&#123;</span><br><span class="line">				fixed4 col = tex2D(_MainTex, i.uv);</span><br><span class="line">				UNITY_APPLY_FOG(i.fogCoord, col);</span><br><span class="line">			</span><br><span class="line">				return col;</span><br><span class="line">			&#125;</span><br><span class="line">		ENDCG</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Dark"><a href="#Dark" class="headerlink" title="Dark"></a>Dark</h3><p>移除雾效，添加暗部，公式如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shadow = dot(worldNormal,normalize(lightDir)) ;</span><br><span class="line">color *= smoothstep(0.0, 0.1, shadow) * 0.4 + 0.6; </span><br></pre></td></tr></table></figure>

<h3 id="Shadow"><a href="#Shadow" class="headerlink" title="Shadow"></a>Shadow</h3><p>添加一个 Pass 使用 <code>Shadow Caster</code> 即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UsePass &quot;VertexLit/SHADOWCASTER&quot;</span><br></pre></td></tr></table></figure>

<h3 id="Alpha"><a href="#Alpha" class="headerlink" title="Alpha"></a>Alpha</h3><p>直接实用Cutout</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">_Cutoff(&quot;Cutoff&quot;,Range(0,1))=0.4</span><br><span class="line"></span><br><span class="line">clip(color.a-_Cutoff);</span><br></pre></td></tr></table></figure>

<h3 id="Bug-Fix"><a href="#Bug-Fix" class="headerlink" title="Bug Fix"></a>Bug Fix</h3><p>打工搞成丢进游戏角色里，发现在相机和光线平行的位置，影子会闪烁，而且渲染效果锯齿很差，看了下相机是 <code>Defered</code>，查看代码发现没有设置 <code>LightMode</code> </p>
<pre><code>    Tags&#123; &quot;LightMode&quot; = &quot;ForwardBase&quot;  &#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Extension</span><br><span class="line"></span><br><span class="line">之前有看过卡通渲染的文章会选用一张 `RampMap` 来做过渡的渐变</span><br><span class="line">扩展一下</span><br><span class="line"></span><br></pre></td></tr></table></figure>
    fixed toon = tex2D(_ToonMap, float2(1-shadow,0.5)).r ;
    shadow = smoothstep(0.0, 0.1, shadow) * 0.4 + 0.6;
    toon *= shadow ;
    col *=  lerp(shadow,toon,_ToonEffect) ;
```

### Show

对比下渲染效果

![Result](Unity-Shader-ToonShading_result.png)

 
</code></pre>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Unity</tag>
        <tag>Toon</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity季节切换实现总结</title>
    <url>/2016/12/05/Unity-Terrain-ReplaceItems/</url>
    <content><![CDATA[<p>在运行时替换地形贴图、树木和花草，用于季节变化，天气变化等效果</p>
<span id="more"></span>
<p>最近策划想要实现季节变化，晴朗和雨天的变化，大致研究了一下，目前实现地形和模型的贴图切换，角色本身具有变装，不在这个系统的考虑范围内。</p>
<p>季节的变化需要体现在很多方面，场景中的模型建筑，植被，地面，角色衣着等。</p>
<p>一、方案选择</p>
<ol>
<li><p>只求效果的话可采取两套贴图，通过切换Alpha即可实现切换，但是内存占用以及Unity地形贴图的限制，以及PS4的弱鸡性能，要求尽可能消耗少的方案</p>
</li>
<li><p>使用SubstanceDesigner通过程序化在运行时动态生成，此方案比较优秀，可快速生成大量素材且参数可控，生成过程为异步，不会造成游戏卡钝，但是对于美术要求较高，公司美术目前还不能高效使用，所以目前只是作为程序辅助工具使用，来生成一部分贴图，</p>
</li>
<li><p>美术绘制多套贴图，程序在运行时动态切换对应的贴图或材质，足够灵活性能有把握，目前项目采用此方案</p>
</li>
</ol>
<p>二、建筑模型</p>
<p>由于当前项目重写了StandardShader所以可以很方便的在shader中添加额外贴图和控制参数，对外暴露参数通过<code>Shader.SetGlobalXXX()</code>系列方法来全局传参实现切换</p>
<p>三、地形</p>
<p>地形切换需要分别切换地面贴图、树木、花草,运行时通过代码分别替换以下内容</p>
<p><code>terrain.terrainData.splatPrototypes</code><br><code>terrainData.treePrototypes</code><br><code>terrainData.detailPrototypes</code></p>
<p>替换完成后调用<code> terrain.Flush()</code>即可实现切换。</p>
<p>四、效果</p>
<p>SubstanceDesigner动态切换效果<br><img src></p>
<p>地形季节切换工具<br><img src="/2016/12/05/Unity-Terrain-ReplaceItems/Unity-Terrain-PaintSwitcher.jpg"></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Terrain</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity地形割草砍树</title>
    <url>/2017/01/05/Unity-Terrain-TreeChop/</url>
    <content><![CDATA[<p>前段时间最近懒癌发作，业余时间什么都不相干，最近开始整理之前的工作</p>
<p>有需求是砍树，要求可以针对单棵树，暂无存档需求，后来又追加了割草</p>
<span id="more"></span>

<p>由于之前做过运行时的地形编辑器，所以对地形还算熟悉</p>
<h3 id="割草"><a href="#割草" class="headerlink" title="割草"></a>割草</h3><ol>
<li>草的数据存在<code>DetailLayer</code>中,根据Layer逐像素单独存储密度，以图片的形式存储每个Layer对应一种草</li>
<li>准备好替换用的草,构建映射表，草分两次砍光，第一次砍半截</li>
<li>输入位置和半径,逐<code>Layer</code>获取区块数据并缓存，清空当前区块密度</li>
<li>逐<code>Layer</code>将映射表的草密度替换成缓存的值</li>
</ol>
<p>用到的方法:</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">data.GetDetailLayer(xBase, yBase, width, height, layer);</span><br><span class="line"> data.SetDetailLayer(xBase, yBase, newLayer, newMap);</span><br></pre></td></tr></table></figure>
<h3 id="砍树"><a href="#砍树" class="headerlink" title="砍树"></a>砍树</h3><p> 跟割草不同的是，树所有的实例都存在一个List里,所以只要搞定位置判断就可以，难点反而是是碰撞检测 </p>
<p> 需要注意的有两点</p>
<ol>
<li>必须刷新区块的高度数据才能刷新地形碰撞器 ~~</li>
<li>不管预制是什么<code>Layer</code>地形检测时返回的全是地形的<code>Layer</code></li>
</ol>
<p>5.6 及后续版本，无法通过刷新高度数据更新碰撞器，需要重新激活碰撞器来刷新碰撞器</p>
<p>核心代码:<br> <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">List&lt;TreeInstance&gt; treeList = <span class="keyword">new</span> List&lt;TreeInstance&gt;(terrain.terrainData.treeInstances);</span><br><span class="line"> treeList.RemoveAt(index);</span><br><span class="line"> terrain.terrainData.treeInstances = treeList.ToArray();</span><br></pre></td></tr></table></figure></p>
<h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3> <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="comment">//using MM = Wonderm.MessageSystem.MessageManager;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">TerrainNs</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">RequireComponent(typeof(Terrain))</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TerrainChopCtr</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> backupTerrainData = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Header(<span class="string">&quot;Tree&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> GameObject fallingTreePrefab;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">SerializeField, Range(0, 50)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> treeHealth = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">SerializeField, Range(1, 20)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> treeRadius = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Header(<span class="string">&quot;Grass&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="comment">//[Label(&quot;替换的后缀&quot;)]</span></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> grassExtra;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">SerializeField, Range(1, 20)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> grassHeightThreshold = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Terrain terrain;</span><br><span class="line">        <span class="keyword">private</span> TerrainData data;</span><br><span class="line">        <span class="keyword">private</span> TreeInstance[] treeInstances;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> index = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">private</span> Vector3 pos;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> rot;</span><br><span class="line">        <span class="keyword">private</span> GameObject treeObj;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">int</span> treeId;</span><br><span class="line">        <span class="keyword">private</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; treeHealthDic;</span><br><span class="line">        <span class="keyword">private</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt; layerDateDic;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            terrain = GetComponent&lt;Terrain&gt;();</span><br><span class="line">            <span class="keyword">if</span> (backupTerrainData)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> collider = GetComponent&lt;TerrainCollider&gt;();</span><br><span class="line">                terrain.terrainData = Instantiate&lt;TerrainData&gt;(terrain.terrainData);</span><br><span class="line">                collider.terrainData = terrain.terrainData;</span><br><span class="line">            &#125;</span><br><span class="line">            data = terrain.terrainData;</span><br><span class="line">            Init();</span><br><span class="line">           </span><br><span class="line">            <span class="comment">//MM.Instance.Subscribe(MMConst.TerrainTreeChop, TreeChop);</span></span><br><span class="line">            <span class="comment">//MM.Instance.Subscribe(MMConst.TerrainGrassChop, GrassChop);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Init</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (treeHealthDic == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                treeHealthDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (layerDateDic == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                layerDateDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            layerDateDic.Clear();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> layer = <span class="number">0</span>; layer &lt; data.detailPrototypes.Length; layer++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> index = GetReplaceLayer(layer);</span><br><span class="line">                <span class="keyword">if</span> (index != <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    layerDateDic.Add(layer, index);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">         </span><br><span class="line">            <span class="comment">//MM.Instance.Unsubscribe(MMConst.TerrainTreeChop, TreeChop);</span></span><br><span class="line">            <span class="comment">//MM.Instance.Unsubscribe(MMConst.TerrainGrassChop, GrassChop);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">enum</span> ChopType</span><br><span class="line">        &#123;</span><br><span class="line">            None,</span><br><span class="line">            Tree,</span><br><span class="line">            Detail,</span><br><span class="line">        &#125;</span><br><span class="line">        [<span class="meta">Header(<span class="string">&quot;Test&quot;</span>)</span>]</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> ChopType chopType = ChopType.None;</span><br><span class="line">        [<span class="meta">SerializeField</span>]</span><br><span class="line">        <span class="keyword">private</span> LayerMask mask;</span><br><span class="line">        [<span class="meta">SerializeField, Range(0, 128)</span>]</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">float</span> grassRadius;</span><br><span class="line">        <span class="keyword">private</span> RaycastHit hit;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);</span><br><span class="line">            <span class="keyword">if</span> (Physics.Raycast(ray, <span class="keyword">out</span> hit, mask.<span class="keyword">value</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.DrawLine(ray.origin, hit.point, Color.blue);</span><br><span class="line">                <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (chopType == ChopType.Tree)</span><br><span class="line">                    &#123;</span><br><span class="line">                        TreeChop(hit.point);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (chopType == ChopType.Detail)</span><br><span class="line">                    &#123;</span><br><span class="line">                        Mowing(hit.point, (<span class="built_in">int</span>)grassRadius);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Tree</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TreeChop</span>(<span class="params"><span class="built_in">object</span>[] obj</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            TreeChop((Vector3)obj[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TreeChop</span>(<span class="params">Vector3 point</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Profiler.BeginSample(<span class="string">&quot;TreeChop-----SetHeights&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (HasTree(point, terrain.terrainData))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (treeHealthDic.ContainsKey(treeId))</span><br><span class="line">                &#123;</span><br><span class="line">                    treeHealthDic[treeId]--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    treeHealthDic.Add(treeId, treeHealth);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (treeHealthDic[treeId] &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">#<span class="keyword">region</span> Create Tree</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> parent = <span class="keyword">new</span> GameObject(<span class="string">&quot;FallDownTree&quot;</span>);</span><br><span class="line">                parent.transform.position = pos;</span><br><span class="line">                parent.transform.rotation = Quaternion.Euler(<span class="number">0</span>, Mathf.Rad2Deg * rot, <span class="number">0</span>);</span><br><span class="line">                parent.transform.localScale = treeObj.transform.localScale;</span><br><span class="line">                <span class="comment">//var tw = Pathea.GameUtils.AddChild(parent, fallingTreePrefab);</span></span><br><span class="line">                <span class="comment">//Pathea.GameUtils.AddChild(tw, treeObj);</span></span><br><span class="line">                <span class="comment">//Pathea.Times.MonoTimer.Instance.RunTask(() =&gt; &#123; Destroy(parent); &#125;, 3);</span></span><br><span class="line">                List&lt;TreeInstance&gt; treeList = <span class="keyword">new</span> List&lt;TreeInstance&gt;(terrain.terrainData.treeInstances);</span><br><span class="line">                treeList.RemoveAt(index);</span><br><span class="line">                terrain.terrainData.treeInstances = treeList.ToArray();</span><br><span class="line"></span><br><span class="line">                <span class="meta">#<span class="keyword">endregion</span> Create Tree</span></span><br><span class="line"></span><br><span class="line">                <span class="meta">#<span class="keyword">region</span> Flush Terrain</span></span><br><span class="line"></span><br><span class="line">                Vector3 offset = point - terrain.transform.position;</span><br><span class="line">                <span class="built_in">int</span> xBase = Mathf.Clamp((<span class="built_in">int</span>)offset.x, <span class="number">0</span>, terrain.terrainData.heightmapWidth);</span><br><span class="line">                <span class="built_in">int</span> yBase = Mathf.Clamp((<span class="built_in">int</span>)offset.z, <span class="number">0</span>, terrain.terrainData.heightmapWidth);</span><br><span class="line">                <span class="built_in">int</span> w = Mathf.Clamp(treeRadius, <span class="number">0</span>, terrain.terrainData.heightmapWidth - xBase);</span><br><span class="line">                <span class="built_in">int</span> h = Mathf.Clamp(treeRadius, <span class="number">0</span>, terrain.terrainData.heightmapHeight - yBase);</span><br><span class="line">                <span class="built_in">float</span>[,] heights = terrain.terrainData.GetHeights(xBase, yBase, w, h);</span><br><span class="line">                terrain.terrainData.SetHeights(xBase, yBase, heights);</span><br><span class="line"></span><br><span class="line">                <span class="meta">#<span class="keyword">endregion</span> Flush Terrain</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">HasTree</span>(<span class="params">Vector3 point, TerrainData data</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Profiler.BeginSample(<span class="string">&quot;TreeChop-----HasTree&quot;</span>);</span><br><span class="line">            index = <span class="number">-1</span>;</span><br><span class="line">            treeInstances = data.treeInstances;</span><br><span class="line">            <span class="built_in">float</span> minDis = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; treeInstances.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> tree = treeInstances[i];</span><br><span class="line">                <span class="keyword">var</span> prefab = data.treePrototypes[tree.prototypeIndex];</span><br><span class="line">                <span class="keyword">var</span> sps = prefab.prefab.GetComponentsInChildren&lt;SphereCollider&gt;();</span><br><span class="line">                <span class="keyword">var</span> treePos = Vector3.Scale(tree.position, data.size) + terrain.GetPosition();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> sp <span class="keyword">in</span> sps)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> dis = Vector3.Distance(treePos + sp.transform.localPosition + sp.center, point);</span><br><span class="line">                    <span class="keyword">if</span> (dis &lt;= sp.radius &amp;&amp; dis &lt; minDis)</span><br><span class="line">                    &#123;</span><br><span class="line">                        minDis = dis;</span><br><span class="line">                        index = i;</span><br><span class="line">                        pos = treePos;</span><br><span class="line">                        rot = tree.rotation;</span><br><span class="line">                        treeObj = prefab.prefab;</span><br><span class="line">                        treeId = tree.position.GetHashCode();</span><br><span class="line">                        Debug.Log(treeObj.name + <span class="string">&quot;dis:&quot;</span> + dis + <span class="string">&quot;\trot&quot;</span> + rot);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> ccs = prefab.prefab.GetComponentsInChildren&lt;CapsuleCollider&gt;();</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="keyword">var</span> cc <span class="keyword">in</span> ccs)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> <span class="keyword">from</span> = treePos + cc.transform.localPosition + cc.center + cc.transform.up * (cc.height - cc.radius) / <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">var</span> to = treePos + cc.transform.localPosition + cc.center - cc.transform.up * (cc.height - cc.radius) / <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">var</span> dis = DisPoint2Line(point, <span class="keyword">from</span>, to);</span><br><span class="line">                    <span class="keyword">if</span> (dis &lt;= cc.radius &amp;&amp; dis &lt; minDis)</span><br><span class="line">                    &#123;</span><br><span class="line">                        minDis = dis;</span><br><span class="line">                        index = i;</span><br><span class="line">                        pos = treePos;</span><br><span class="line">                        rot = tree.rotation;</span><br><span class="line">                        treeObj = prefab.prefab;</span><br><span class="line">                        treeId = tree.position.GetHashCode();</span><br><span class="line">                        Debug.Log(treeObj.name + <span class="string">&quot;\tdis:&quot;</span> + dis + <span class="string">&quot;\trot&quot;</span> + rot);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Profiler.EndSample();</span><br><span class="line">            <span class="keyword">return</span> index != <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span> Tree</span></span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Detail</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GrassChop</span>(<span class="params"><span class="built_in">object</span>[] obj</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Mowing((Vector3)obj[<span class="number">0</span>], (<span class="built_in">int</span>)obj[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Mowing</span>(<span class="params">Vector3 point, <span class="built_in">int</span> radius</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> h = terrain.SampleHeight(point);</span><br><span class="line">            <span class="comment">//Debug.Log(&quot;terrainH:\t&quot; + h + &quot;\nterrainY:\t&quot; + terrain.transform.position.y + &quot;\nPointY:\t&quot; + point.y);</span></span><br><span class="line">            <span class="keyword">if</span> (Mathf.Abs(h + transform.position.y - point.y) &gt; grassHeightThreshold)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">int</span> mapSize = terrain.terrainData.detailResolution;</span><br><span class="line">            <span class="keyword">if</span> (terrain.terrainData.size.x != terrain.terrainData.size.z)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(<span class="string">&quot;X and Y Size of terrain have to be the same  &quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">float</span> PrPxSize = mapSize / terrain.terrainData.size.x;</span><br><span class="line">            Vector3 texturePoint3D = point - terrain.transform.position;</span><br><span class="line">            texturePoint3D = texturePoint3D * PrPxSize;</span><br><span class="line">            Vector2 xz = <span class="keyword">new</span> Vector2(texturePoint3D.x, texturePoint3D.z);</span><br><span class="line">            Mowing(<span class="number">1</span>, xz, radius);</span><br><span class="line">            Mowing(<span class="number">2</span>, xz, radius);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Mowing</span>(<span class="params"><span class="built_in">int</span> order, Vector2 xz, <span class="built_in">int</span> radius</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> xBase = Mathf.Clamp((<span class="built_in">int</span>)xz.x - radius, <span class="number">0</span>, data.detailWidth);</span><br><span class="line">            <span class="built_in">int</span> yBase = Mathf.Clamp((<span class="built_in">int</span>)xz.y - radius, <span class="number">0</span>, data.detailHeight);</span><br><span class="line">            <span class="built_in">int</span> width = Mathf.Clamp(<span class="number">2</span> * radius, <span class="number">0</span>, data.detailWidth - xBase);</span><br><span class="line">            <span class="built_in">int</span> height = Mathf.Clamp(<span class="number">2</span> * radius, <span class="number">0</span>, data.detailHeight - yBase);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> layer = <span class="number">0</span>; layer &lt; data.detailPrototypes.Length; layer++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (data.detailPrototypes[layer].prototypeTexture == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">bool</span> has = data.detailPrototypes[layer].prototypeTexture.name.Contains(grassExtra);</span><br><span class="line">                <span class="keyword">if</span> (order == <span class="number">1</span> &amp;&amp; !has)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (order == <span class="number">2</span> &amp;&amp; has)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">int</span> newLayer = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span> (layerDateDic.ContainsKey(layer))</span><br><span class="line">                &#123;</span><br><span class="line">                    newLayer = layerDateDic[layer];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> map = data.GetDetailLayer(xBase, yBase, width, height, layer);</span><br><span class="line">                <span class="built_in">int</span>[,] newMap = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (newLayer != <span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    newMap = data.GetDetailLayer(xBase, yBase, width, height, newLayer);</span><br><span class="line">                &#125;</span><br><span class="line">                Vector2 p = Vector2.zero;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; height; y++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; width; x++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        p.x = x + xBase;</span><br><span class="line">                        p.y = y + yBase;</span><br><span class="line">                        <span class="built_in">int</span> cache = map[y, x];</span><br><span class="line">                        <span class="keyword">if</span> (cache == <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (Vector2.Distance(xz, p) &lt; radius)</span><br><span class="line">                        &#123;</span><br><span class="line">                            map[y, x] = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (newLayer != <span class="number">-1</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            newMap[y, x] = cache;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                data.SetDetailLayer(xBase, yBase, layer, map);</span><br><span class="line">                <span class="keyword">if</span> (newLayer != <span class="number">-1</span>)</span><br><span class="line">                    data.SetDetailLayer(xBase, yBase, newLayer, newMap);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">GetReplaceLayer</span>(<span class="params"><span class="built_in">int</span> layer</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (data.detailPrototypes[layer].prototypeTexture == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> layerName = data.detailPrototypes[layer].prototypeTexture.name + grassExtra;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; data.detailPrototypes.Length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (data.detailPrototypes[i].prototypeTexture == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (data.detailPrototypes[i].prototypeTexture.name == layerName)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span> Detail</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> <span class="title">DisPoint2Line</span>(<span class="params">Vector3 point, Vector3 start, Vector3 end</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vector3 vec1 = point - start;</span><br><span class="line">            Vector3 vec2 = end - start;</span><br><span class="line">            Vector3 vecProj = Vector3.Project(vec1, vec2);</span><br><span class="line">            <span class="built_in">float</span> dis = Mathf.Sqrt(Mathf.Pow(Vector3.Magnitude(vec1), <span class="number">2</span>) - Mathf.Pow(Vector3.Magnitude(vecProj), <span class="number">2</span>));</span><br><span class="line">            <span class="keyword">return</span> dis;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Terrain</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity地形三轴纹理映射(Triplanar)</title>
    <url>/2016/11/05/Unity-Terrain-TriplanarSplatmap/</url>
    <content><![CDATA[<p>使用 <code>Unity</code> 自带地形制作悬崖峭壁时会遇到贴图拉伸的问题，之前一直没有解决这个问题的需求，最近策划突然要解决这个问题，于是研究了一下。</p>
<span id="more"></span>

<h3 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h3><p>之前我一直不知道这个问题怎么描述，通过搜索贴图拉伸找到了一个参考 <a href="http://www.cnblogs.com/cproom/archive/2006/08/07/470066.html">没有贴图拉伸的陡峭悬崖</a> ,原理很清楚但是要是有代码就更好了(懒癌晚期)。</p>
<h3 id="调研问题"><a href="#调研问题" class="headerlink" title="调研问题"></a>调研问题</h3><p>依照经验，你遇到的问题有绝大多数的人好多年前就遇到了，并且给出了完善的解决方案，所以我们不准备从头造轮子，借助搜索引擎,我找到了以下参考：</p>
<blockquote>
<p> <a href="https://www.volume-gfx.com/volume-rendering/triplanar-texturing/">Realtime Volume Rendering Aimed at Terrain</a></p>
</blockquote>
<blockquote>
<p> <a href="https://gamedevelopment.tutsplus.com/articles/use-tri-planar-texture-mapping-for-better-terrain--gamedev-13821">Use Tri-Planar Texture Mapping for Better Terrain</a></p>
</blockquote>
<blockquote>
<p> <a href="https://ravingbots.com/2015/09/02/how-to-improve-unity-terrain-texturing-tutorial/">How-to improve Unity terrain texturing tutorial</a></p>
</blockquote>
<p>至此，问题已经全部解决。我们借用几张图来回顾一下问题和解决方式：</p>
<p>问题描述</p>
<p><img src="/2016/11/05/Unity-Terrain-TriplanarSplatmap/triPlanar-regularTerrain.jpg" alt="问题描述"></p>
<p>产生原因</p>
<p><img src="/2016/11/05/Unity-Terrain-TriplanarSplatmap/triPlanar-terrainUnwrap.png" alt="产生原因"></p>
<p>解决方式</p>
<p><img src="/2016/11/05/Unity-Terrain-TriplanarSplatmap/triPlanar-angles.png" alt="解决方式"> </p>
<p>解决结果</p>
<p><img src="/2016/11/05/Unity-Terrain-TriplanarSplatmap/triPlanar-Terrain.jpg" alt="解决结果"></p>
<h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><ol>
<li><p>先去官网下载内置 <code>Shader</code> 源码包</p>
</li>
<li><p>阅读源码，定位关键 <code>Shader</code> 为以下三个:</p>
<blockquote>
<p>Standard-AddPass.shader</p>
</blockquote>
<blockquote>
<p>Standard-FirstPass.shader</p>
</blockquote>
<blockquote>
<p>TerrainSplatmapCommon.cginc</p>
</blockquote>
</li>
<li><p>复制一份出来改名修改，加入 <code>Triplanar</code> 算法</p>
</li>
<li><p>新建材质替换地形默认的内置材质</p>
</li>
</ol>
<h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><p><img src="/2016/11/05/Unity-Terrain-TriplanarSplatmap/Unity_Terrain_Triplanar_result.jpg" alt="效果展示"></p>
<h3 id="源码修改"><a href="#源码修改" class="headerlink" title="源码修改"></a>源码修改</h3><p><code>TerrainSplatmapCommon.cginc</code> 基于5.4.2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TERRAIN_SPLATMAP_COMMON_CGINC_INCLUDED</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TERRAIN_SPLATMAP_COMMON_CGINC_INCLUDED</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Input</span></span><br><span class="line">&#123;</span><br><span class="line">	float2 uv_Splat0 : TEXCOORD0;</span><br><span class="line">	float2 uv_Splat1 : TEXCOORD1;</span><br><span class="line">	float2 uv_Splat2 : TEXCOORD2;</span><br><span class="line">	float2 uv_Splat3 : TEXCOORD3;</span><br><span class="line">	float2 tc_Control : TEXCOORD4;	<span class="comment">// Not prefixing &#x27;_Contorl&#x27; with &#x27;uv&#x27; allows a tighter packing of interpolators, which is necessary to support directional lightmap.</span></span><br><span class="line">	<span class="built_in">UNITY_FOG_COORDS</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">		<span class="comment">//&gt;&gt;&gt; Triplanar</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _TERRAIN_NORMAL_MAP</span></span><br><span class="line">		float3 vertNormal;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	float3 worldPos;</span><br><span class="line">	<span class="comment">//&lt;&lt;&lt; Triplanar</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&gt;&gt;&gt; Triplanar</span></span><br><span class="line">fixed3 normal;</span><br><span class="line">float3 worldPos;</span><br><span class="line">uniform float4 _WorldS, _WorldT;</span><br><span class="line">uniform float4 _Splat0_ST, _Splat1_ST, _Splat2_ST, _Splat3_ST;</span><br><span class="line"><span class="comment">//&lt;&lt;&lt; Triplanar</span></span><br><span class="line"></span><br><span class="line">sampler2D _Control;</span><br><span class="line">float4 _Control_ST;</span><br><span class="line">sampler2D _Splat0, _Splat1, _Splat2, _Splat3;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _TERRAIN_NORMAL_MAP</span></span><br><span class="line">sampler2D _Normal0, _Normal1, _Normal2, _Normal3;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SplatmapVert</span><span class="params">(inout appdata_full v, out Input data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">UNITY_INITIALIZE_OUTPUT</span>(Input, data);</span><br><span class="line">	data.tc_Control = <span class="built_in">TRANSFORM_TEX</span>(v.texcoord, _Control);	<span class="comment">// Need to manually transform uv here, as we choose not to use &#x27;uv&#x27; prefix for this texcoord.</span></span><br><span class="line">	float4 pos = <span class="built_in">UnityObjectToClipPos</span>(v.vertex);</span><br><span class="line">	<span class="built_in">UNITY_TRANSFER_FOG</span>(data, pos);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _TERRAIN_NORMAL_MAP</span></span><br><span class="line">	v.tangent.xyz = <span class="built_in">cross</span>(v.normal, <span class="built_in">float3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">	v.tangent.w = <span class="number">-1</span>;</span><br><span class="line">	<span class="comment">//&gt;&gt;&gt; Triplanar</span></span><br><span class="line">	data.vertNormal = v.normal;</span><br><span class="line">	<span class="comment">//&lt;&lt;&lt; Triplanar</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> fixed4 <span class="title">Triplanar</span><span class="params">(float3 wp, fixed3 n, float4 st, sampler2D s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> 	n.x * <span class="built_in">tex2D</span>(s, st.xy * wp.yz + st.zw) +</span><br><span class="line">		n.y * <span class="built_in">tex2D</span>(s, st.xy * wp.xz + st.zw) +</span><br><span class="line">		n.z * <span class="built_in">tex2D</span>(s, st.xy * wp.xy + st.zw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> TERRAIN_STANDARD_SHADER</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SplatmapMix</span><span class="params">(Input IN, half4 defaultAlpha, out half4 splat_control, out half weight, out fixed4 mixedDiffuse, inout fixed3 mixedNormal)</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">else</span></span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SplatmapMix</span><span class="params">(Input IN, out half4 splat_control, out half weight, out fixed4 mixedDiffuse, inout fixed3 mixedNormal)</span></span></span><br><span class="line"><span class="function"><span class="meta">#<span class="keyword">endif</span></span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	splat_control = <span class="built_in">tex2D</span>(_Control, IN.tc_Control);</span><br><span class="line">	weight = <span class="built_in">dot</span>(splat_control, <span class="built_in">half4</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !defined(SHADER_API_MOBILE) &amp;&amp; defined(TERRAIN_SPLAT_ADDPASS)</span></span><br><span class="line">	<span class="built_in">clip</span>(weight == <span class="number">0.0f</span> ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// Normalize weights before lighting and restore weights in final modifier functions so that the overal</span></span><br><span class="line">	<span class="comment">// lighting result can be correctly weighted.</span></span><br><span class="line">	splat_control /= (weight + <span class="number">1e-3</span>f);</span><br><span class="line"></span><br><span class="line">	mixedDiffuse = <span class="number">0.0f</span>;</span><br><span class="line">	<span class="comment">//&gt;&gt;&gt; Triplanar</span></span><br><span class="line">	worldPos = IN.worldPos * _WorldS.xyz + _WorldT.xyz;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _TERRAIN_NORMAL_MAP</span></span><br><span class="line">	normal = <span class="built_in">abs</span>(IN.vertNormal);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	normal = <span class="built_in">abs</span>(mixedNormal);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	normal /= normal.x + normal.y + normal.z + <span class="number">1e-3</span>f;</span><br><span class="line">	<span class="comment">//&lt;&lt;&lt; Triplanar</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> TERRAIN_STANDARD_SHADER</span></span><br><span class="line">	<span class="comment">/* Unity</span></span><br><span class="line"><span class="comment">	mixedDiffuse += splat_control.r * tex2D(_Splat0, IN.uv_Splat0) * half4(1.0, 1.0, 1.0, defaultAlpha.r);</span></span><br><span class="line"><span class="comment">	mixedDiffuse += splat_control.g * tex2D(_Splat1, IN.uv_Splat1) * half4(1.0, 1.0, 1.0, defaultAlpha.g);</span></span><br><span class="line"><span class="comment">	mixedDiffuse += splat_control.b * tex2D(_Splat2, IN.uv_Splat2) * half4(1.0, 1.0, 1.0, defaultAlpha.b);</span></span><br><span class="line"><span class="comment">	mixedDiffuse += splat_control.a * tex2D(_Splat3, IN.uv_Splat3) * half4(1.0, 1.0, 1.0, defaultAlpha.a);</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//&gt;&gt;&gt; Triplanar</span></span><br><span class="line">	mixedDiffuse += splat_control.r * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat0_ST, _Splat0) * <span class="built_in">half4</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, defaultAlpha.r);</span><br><span class="line">	mixedDiffuse += splat_control.g * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat1_ST, _Splat1) * <span class="built_in">half4</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, defaultAlpha.g);</span><br><span class="line">	mixedDiffuse += splat_control.b * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat2_ST, _Splat2) * <span class="built_in">half4</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, defaultAlpha.b);</span><br><span class="line">	mixedDiffuse += splat_control.a * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat3_ST, _Splat3) * <span class="built_in">half4</span>(<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>, defaultAlpha.a);</span><br><span class="line">	<span class="comment">//&lt;&lt;&lt; Triplanar</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="comment">/* Unity</span></span><br><span class="line"><span class="comment">	mixedDiffuse += splat_control.r * tex2D(_Splat0, IN.uv_Splat0);</span></span><br><span class="line"><span class="comment">	mixedDiffuse += splat_control.g * tex2D(_Splat1, IN.uv_Splat1);</span></span><br><span class="line"><span class="comment">	mixedDiffuse += splat_control.b * tex2D(_Splat2, IN.uv_Splat2);</span></span><br><span class="line"><span class="comment">	mixedDiffuse += splat_control.a * tex2D(_Splat3, IN.uv_Splat3);</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	mixedDiffuse += splat_control.r * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat0_ST, _Splat0);</span><br><span class="line">	mixedDiffuse += splat_control.g * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat1_ST, _Splat1);</span><br><span class="line">	mixedDiffuse += splat_control.b * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat2_ST, _Splat2);</span><br><span class="line">	mixedDiffuse += splat_control.a * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat3_ST, _Splat3);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _TERRAIN_NORMAL_MAP</span></span><br><span class="line">	fixed4 nrm = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Unity</span></span><br><span class="line"><span class="comment">	nrm += splat_control.r * tex2D(_Normal0, IN.uv_Splat0);</span></span><br><span class="line"><span class="comment">	nrm += splat_control.g * tex2D(_Normal1, IN.uv_Splat1);</span></span><br><span class="line"><span class="comment">	nrm += splat_control.b * tex2D(_Normal2, IN.uv_Splat2);</span></span><br><span class="line"><span class="comment">	nrm += splat_control.a * tex2D(_Normal3, IN.uv_Splat3);</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	nrm += splat_control.r * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat0_ST, _Normal0);</span><br><span class="line">	nrm += splat_control.g * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat1_ST, _Normal1);</span><br><span class="line">	nrm += splat_control.b * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat2_ST, _Normal2);</span><br><span class="line">	nrm += splat_control.a * <span class="built_in">Triplanar</span>(worldPos, normal, _Splat3_ST, _Normal3);</span><br><span class="line"></span><br><span class="line">	mixedNormal = <span class="built_in">UnpackNormal</span>(nrm);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> TERRAIN_SURFACE_OUTPUT</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TERRAIN_SURFACE_OUTPUT SurfaceOutput</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SplatmapFinalColor</span><span class="params">(Input IN, TERRAIN_SURFACE_OUTPUT o, inout fixed4 color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	color *= o.Alpha;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> TERRAIN_SPLAT_ADDPASS</span></span><br><span class="line">	<span class="built_in">UNITY_APPLY_FOG_COLOR</span>(IN.fogCoord, color, <span class="built_in">fixed4</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">	<span class="built_in">UNITY_APPLY_FOG</span>(IN.fogCoord, color);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SplatmapFinalPrepass</span><span class="params">(Input IN, TERRAIN_SURFACE_OUTPUT o, inout fixed4 normalSpec)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	normalSpec *= o.Alpha;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SplatmapFinalGBuffer</span><span class="params">(Input IN, TERRAIN_SURFACE_OUTPUT o, inout half4 diffuse, inout half4 specSmoothness, inout half4 normal, inout half4 emission)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	diffuse.rgb *= o.Alpha;</span><br><span class="line">	specSmoothness *= o.Alpha;</span><br><span class="line">	normal.rgb *= o.Alpha;</span><br><span class="line">	emission *= o.Alpha;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// TERRAIN_SPLATMAP_COMMON_CGINC_INCLUDED</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>使用UGUI制作不定尺寸可拖拽格子背包</title>
    <url>/2015/09/23/Unity-Function-multiplePackage/</url>
    <content><![CDATA[<p>使用UGUI制作一个物品尺寸不定的背包,要求可通过拖拽或者方向键移动物品位置</p>
<span id="more"></span>
<p>效果如下:<br><img src="/2015/09/23/Unity-Function-multiplePackage/Unity-MultipleSizePackage-record.gif" alt="图片"><br><img src="/2015/09/23/Unity-Function-multiplePackage/Unity-MultipleSizePackage-record2.gif" alt="图片"></p>
<p>核心代码如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Grid</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> width = <span class="number">75</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> height = <span class="number">75</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span>  <span class="built_in">int</span> line = <span class="number">15</span>;</span><br><span class="line">	<span class="keyword">public</span>  <span class="built_in">int</span> row = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">bool</span>[,] GridPos;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> freeX = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> freeY = <span class="number">-1</span>;</span><br><span class="line">	[<span class="meta">Range (0, 1)</span>]</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">float</span> range = <span class="number">1</span>;</span><br><span class="line">	[<span class="meta">HideInInspector</span>]</span><br><span class="line">	<span class="keyword">public</span> Item curSelect = <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">public</span> Canvas canvas;</span><br><span class="line">	List&lt;Item&gt; itemList = <span class="keyword">new</span> List&lt;Item&gt; ();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Awake</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		GridPos = <span class="keyword">new</span> <span class="built_in">bool</span>[line, row];</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; line; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; row; j++) &#123;</span><br><span class="line">				GridPos [i, j] = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Update</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (curSelect != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (Input.GetKeyDown (KeyCode.UpArrow)) &#123;</span><br><span class="line">				MoveItem (curSelect.posX - <span class="number">1</span>, curSelect.posY, curSelect);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (Input.GetKeyDown (KeyCode.DownArrow)) &#123;</span><br><span class="line">				MoveItem (curSelect.posX + <span class="number">1</span>, curSelect.posY, curSelect);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (Input.GetKeyDown (KeyCode.LeftArrow)) &#123;</span><br><span class="line">				MoveItem (curSelect.posX, curSelect.posY - <span class="number">1</span>, curSelect);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (Input.GetKeyDown (KeyCode.RightArrow)) &#123;</span><br><span class="line">				MoveItem (curSelect.posX, curSelect.posY + <span class="number">1</span>, curSelect);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">AddItem</span> (<span class="params">Item item</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		UIEventListener.Get (item.obj).onClick = OnSelected;</span><br><span class="line">		UIEventListener.Get (item.obj).onDragBegin = OnDragBegin;</span><br><span class="line">		UIEventListener.Get (item.obj).onDrag = OnDrag;</span><br><span class="line">		UIEventListener.Get (item.obj).onDragEnd = OnDragEnd;</span><br><span class="line">		itemList.Add (item);</span><br><span class="line">		<span class="keyword">if</span> (GetFree (item)) &#123;</span><br><span class="line">			Debug.Log (<span class="string">&quot;--&quot;</span> + freeX + <span class="string">&quot;,&quot;</span> + freeY);</span><br><span class="line">			OccupyPos (freeX, freeY, item);</span><br><span class="line">			SetPos (freeX, freeY, item);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			Debug.LogError (<span class="string">&quot;no free pos&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		SeeGrid ();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="built_in">bool</span> <span class="title">GetFree</span> (<span class="params">Item item</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; line; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; row; j++) &#123;</span><br><span class="line"> </span><br><span class="line">				<span class="keyword">if</span> (GridPos [i, j])</span><br><span class="line">					<span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (CheckFree (i, j, item)) &#123;</span><br><span class="line"></span><br><span class="line">					freeX = i;</span><br><span class="line">					freeY = j;</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CheckFree</span> (<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, Item item</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (x + item.X &gt; line || y + item.Y &gt; row || x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; item.X; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; item.Y; j++) &#123;</span><br><span class="line">				 </span><br><span class="line">				<span class="keyword">if</span> (GridPos [x + i, y + j])</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetPos</span> (<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, Item item</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		Vector3 pos = <span class="keyword">new</span> Vector3 (y * width, -x * height, <span class="number">0f</span>) + <span class="keyword">new</span> Vector3 (item.Y * height / <span class="number">2</span>, -item.X * width / <span class="number">2</span>, <span class="number">0f</span>);</span><br><span class="line">		item.obj.transform.localPosition = pos;</span><br><span class="line">		item.obj.GetComponent&lt;RectTransform&gt; ().sizeDelta = <span class="keyword">new</span> Vector2 (item.Y * width, item.X * height);</span><br><span class="line">		SeeGrid ();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">FreePos</span> (<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, Item item</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x + item.X &gt; line || y + item.Y &gt; row)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; item.X; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; item.Y; j++) &#123;</span><br><span class="line">				GridPos [x + i, y + j] = <span class="literal">false</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OccupyPos</span> (<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, Item item</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		FreePos (item.posX, item.posY, item);</span><br><span class="line">		item.posX = x;</span><br><span class="line">		item.posY = y;</span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; item.X; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; item.Y; j++) &#123;</span><br><span class="line">				GridPos [x + i, y + j] = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MoveItem</span> (<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, Item item</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		FreePos (item.posX, item.posY, item);</span><br><span class="line">		<span class="keyword">if</span> (CheckFree (x, y, item)) &#123;</span><br><span class="line">			OccupyPos (x, y, item);</span><br><span class="line">			SetPos (x, y, item);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			OccupyPos (item.posX, item.posY, item);</span><br><span class="line">			SetPos (item.posX, item.posY, item);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	Vector3 offset = Vector3.zero;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnDragBegin</span> (<span class="params">GameObject go</span>)</span></span><br><span class="line">	&#123;		 </span><br><span class="line">		Item item = GetItem (go);</span><br><span class="line">		FreePos (item.posX, item.posY, item);</span><br><span class="line">			offset = Input.mousePosition - go.transform.position;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnDrag</span> (<span class="params">GameObject go</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		Vector3 pos = go.transform.position;</span><br><span class="line">		pos = Input.mousePosition - offset;</span><br><span class="line">			</span><br><span class="line">		pos.z = <span class="number">0</span>;</span><br><span class="line">		go.transform.position = pos;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnDragEnd</span> (<span class="params">GameObject go</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line"> </span><br><span class="line">		<span class="built_in">int</span> posY = (<span class="built_in">int</span>)(go.transform.localPosition.x / width);</span><br><span class="line">		<span class="built_in">int</span> posX = -(<span class="built_in">int</span>)(go.transform.localPosition.y / height);</span><br><span class="line">		Item item = GetItem (go);</span><br><span class="line">		MoveItem (posX, posY, item);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">OnSelected</span> (<span class="params">GameObject go</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (curSelect != <span class="literal">null</span>)</span><br><span class="line">			curSelect.obj.GetComponent&lt;Image&gt; ().color = Color.white;</span><br><span class="line">		go.GetComponent&lt;Image&gt; ().color = Color.gray;</span><br><span class="line">		curSelect = GetItem (go);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Package</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> GameObject prefab;</span><br><span class="line">	<span class="keyword">public</span> Grid grid;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> List&lt;GameObject&gt; itemList = <span class="keyword">new</span> List&lt;GameObject&gt; ();</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		AddItem (<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">		AddItem (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">		AddItem (<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line">		AddItem (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">		AddItem (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">		AddItem (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&quot;6&quot;</span>);</span><br><span class="line">		AddItem (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;7&quot;</span>);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	 </span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> GameObject <span class="title">AddChild</span> (<span class="params">GameObject parent, GameObject prefab</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		GameObject temp = Instantiate (prefab) <span class="keyword">as</span> GameObject;</span><br><span class="line">		temp.transform.SetParent (parent.transform);</span><br><span class="line">		temp.transform.localPosition = Vector3.zero;</span><br><span class="line">		temp.transform.localScale = Vector3.one;</span><br><span class="line">		<span class="keyword">return</span> temp;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">AddItem</span> (<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">string</span> spr</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		GameObject gb = AddChild (grid.gameObject, prefab);</span><br><span class="line">		itemList.Add (gb);</span><br><span class="line">		Item item = <span class="keyword">new</span> Item ();</span><br><span class="line">		item.X = x;</span><br><span class="line">		item.Y = y;</span><br><span class="line">		item.obj = gb;</span><br><span class="line">		item.obj.name = <span class="string">&quot;item_&quot;</span>+spr;</span><br><span class="line">		Image img = item.obj.GetComponent&lt;Image&gt; ();</span><br><span class="line">		img.sprite = Resources.Load&lt;Sprite&gt; (<span class="string">&quot;Sprites/&quot;</span> + spr);</span><br><span class="line">		grid.AddItem (item);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity默认管线置换贴图与曲面细分</title>
    <url>/2019/03/30/Unity-Tess-Displacement/</url>
    <content><![CDATA[<p>尝试了下默认管线下的曲面细分</p>
<span id="more"></span>

<h3 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h3><p><img src="/2019/03/30/Unity-Tess-Displacement/Final_Pic.jpg" alt="Final_Pic"></p>
<h3 id="概念和基本用法"><a href="#概念和基本用法" class="headerlink" title="概念和基本用法"></a>概念和基本用法</h3><p><a href="https://docs.unity3d.com/Manual/SL-SurfaceShaderTessellation.html">Surface Shaders with DX11 &#x2F; OpenGL Core Tessellation</a></p>
<p>在细分后采样置换贴图，对顶点进行偏移<br>需要注意的是在 surf 和 frag 以外采样贴图只能使用 tex2Dlod</p>
<p>扩展代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma surface surf Standard fullforwardshadows vertex:disp  addshadow  tessellate:tessDistance </span><br><span class="line">#pragma require tessellation tessHW</span><br><span class="line"></span><br><span class="line">#include &quot;Tessellation.cginc&quot;</span><br><span class="line"></span><br><span class="line">void disp(inout appdata v)</span><br><span class="line">&#123;</span><br><span class="line">	float d = tex2Dlod(_DispTex, float4(v.texcoord.xy * _UVScale, 0, 0)).r * _Displacement;</span><br><span class="line">	v.vertex.xyz += v.normal * d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float4 tessDistance(appdata v0, appdata v1, appdata v2) &#123;</span><br><span class="line">	float minDist = 10.0;</span><br><span class="line">	float maxDist = 150.0;</span><br><span class="line"></span><br><span class="line">	return UnityDistanceBasedTess(v0.vertex, v1.vertex, v2.vertex, minDist, maxDist, _Tess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/2019/03/30/Unity-Tess-Displacement/Unity_Tess.jpg" alt="Unity_Tess"></p>
<h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>关掉网格显示之后清晰的看到法线错误<br>同时切线也没有随着顶点的移动被修改<br>立体的网格用的还是平面的法线和切线</p>
<p><img src="/2019/03/30/Unity-Tess-Displacement/Unity_Tess_Error.jpg" alt="Unity_Tess_Error"></p>
<h3 id="重新计算法线和切线"><a href="#重新计算法线和切线" class="headerlink" title="重新计算法线和切线"></a>重新计算法线和切线</h3><p>商店里搜索 <code>Advance Tessellation Shader</code><br>发现了 <a href="https://assetstore.unity.com/packages/vfx/shaders/directx-11/beast-82066">Beast</a> 内部有现成的计算法线和切线的方法<br>直接抄过来 插入置换之后<br>或者使用 <a href="https://chengkehan.github.io/DisplacementMapping.html">chengkehan博客</a> 中的计算方法</p>
<p>此时 <code>SurfShader</code> 的问题已经基本解决<br>效果如下</p>
<p><img src="/2019/03/30/Unity-Tess-Displacement/Tess_Surf.jpg" alt="Tess_Surf"><br><img src="/2019/03/30/Unity-Tess-Displacement/Tess_Surf_Wire.jpg" alt="Tess_Surf_Wire"></p>
<h3 id="片元着色器扩展"><a href="#片元着色器扩展" class="headerlink" title="片元着色器扩展"></a>片元着色器扩展</h3><p>frag Shader 的扩展要更为复杂<br>置换和 Surface 一样<br>细分需要自己实现细节</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma vertex tessvert</span><br><span class="line">#pragma fragment frag</span><br><span class="line">#pragma hull hs</span><br><span class="line">#pragma domain ds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &quot;Tessellation.cginc&quot;</span><br><span class="line">#include &quot;Lighting.cginc&quot;</span><br><span class="line"></span><br><span class="line">float _Tess;</span><br><span class="line"></span><br><span class="line">struct InternalTessInterp_appdata &#123;</span><br><span class="line">	float4 vertex : INTERNALTESSPOS;</span><br><span class="line">	float4 tangent : TANGENT;</span><br><span class="line">	float3 normal : NORMAL;</span><br><span class="line">	float2 texcoord : TEXCOORD0;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">InternalTessInterp_appdata tessvert (appdata v) &#123;</span><br><span class="line">	InternalTessInterp_appdata o;</span><br><span class="line">	o.vertex = v.vertex;</span><br><span class="line">	o.tangent = v.tangent;</span><br><span class="line">	o.normal = v.normal;</span><br><span class="line">	o.texcoord = v.texcoord;</span><br><span class="line">	return o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float Tessellation(InternalTessInterp_appdata v)&#123;</span><br><span class="line">	return _Tess;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float4 Tessellation(InternalTessInterp_appdata v, InternalTessInterp_appdata v1, InternalTessInterp_appdata v2)&#123;</span><br><span class="line">	float minDist = 10.0;</span><br><span class="line">	float maxDist = 150.0;</span><br><span class="line">	return UnityDistanceBasedTess(v.vertex, v1.vertex, v2.vertex, minDist, maxDist, _Tess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UnityTessellationFactors hsconst (InputPatch&lt;InternalTessInterp_appdata,3&gt; v) &#123;</span><br><span class="line">	UnityTessellationFactors o;</span><br><span class="line">	float4 tf;</span><br><span class="line">	tf = Tessellation( v[0], v[1], v[2] );</span><br><span class="line">	o.edge[0] = tf.x; </span><br><span class="line">	o.edge[1] = tf.y; </span><br><span class="line">	o.edge[2] = tf.z; </span><br><span class="line">	o.inside = tf.w;</span><br><span class="line">	return o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[UNITY_domain(&quot;tri&quot;)]</span><br><span class="line">[UNITY_partitioning(&quot;fractional_odd&quot;)]</span><br><span class="line">[UNITY_outputtopology(&quot;triangle_cw&quot;)]</span><br><span class="line">[UNITY_patchconstantfunc(&quot;hsconst&quot;)]</span><br><span class="line">[UNITY_outputcontrolpoints(3)]</span><br><span class="line">InternalTessInterp_appdata hs (InputPatch&lt;InternalTessInterp_appdata,3&gt; v, uint id : SV_OutputControlPointID) &#123;</span><br><span class="line">	return v[id];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[UNITY_domain(&quot;tri&quot;)]</span><br><span class="line">v2f ds (UnityTessellationFactors tessFactors, </span><br><span class="line">		const OutputPatch&lt;InternalTessInterp_appdata,3&gt; vi, </span><br><span class="line">		float3 bary : SV_DomainLocation) &#123;</span><br><span class="line"></span><br><span class="line">	appdata v;</span><br><span class="line"></span><br><span class="line">	v.vertex = vi[0].vertex*bary.x + vi[1].vertex*bary.y + vi[2].vertex*bary.z;</span><br><span class="line">	v.tangent = vi[0].tangent*bary.x + vi[1].tangent*bary.y + vi[2].tangent*bary.z;</span><br><span class="line">	v.normal = vi[0].normal*bary.x + vi[1].normal*bary.y + vi[2].normal*bary.z;</span><br><span class="line">	v.texcoord = vi[0].texcoord*bary.x + vi[1].texcoord*bary.y + vi[2].texcoord*bary.z;</span><br><span class="line"></span><br><span class="line">	v2f o = vert (v);</span><br><span class="line">	 </span><br><span class="line">	return o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最终效果对比"><a href="#最终效果对比" class="headerlink" title="最终效果对比"></a>最终效果对比</h3><p><img src="/2019/03/30/Unity-Tess-Displacement/Final_Tess.jpg" alt="Final_Tess"><br><img src="/2019/03/30/Unity-Tess-Displacement/Final_Tess_Wire.jpg" alt="Final_Tess_Wire"></p>
<h3 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h3><p><a href="https://sketchfab.com/3d-models/organic-2-71dc67bf4c7f4d14a596edf92d31eca0">Organic 2</a><br><a href="https://sketchfab.com/3d-models/stylized-organic-red-a188289568e6491aaf8dddb10dbb1677?ref=related">Stylized Organic Red</a><br><a href="https://sketchfab.com/3d-models/stylized-lava-material-blue-a3799d3d111243cd9c30f25f5616f6c3">Stylized Lava Material Blue</a></p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Tessellation</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity地形切割</title>
    <url>/2016/11/14/Unity-Terrain-Splite/</url>
    <content><![CDATA[<p>用于切割地形包含HeightMap,AlphaMap,Trees,Grass</p>
<span id="more"></span>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TerrainSpliter</span> : <span class="title">EditorWindow</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Variable</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> selectToolBar = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] toolbarMenu = &#123; <span class="string">&quot;手动分割&quot;</span>, <span class="string">&quot;自动分割&quot;</span> &#125;;</span><br><span class="line">    <span class="keyword">private</span> Terrain orginTerrain;</span><br><span class="line">    <span class="keyword">private</span> TerrainData orginTerrainData;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span> Variable</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Init</span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">MenuItem(<span class="string">&quot;Tools/Terrain/Terrain Split &amp;1&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OpenSplitTerrainWindow</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> window = EditorWindow.GetWindow(<span class="keyword">typeof</span>(TerrainSpliter));</span><br><span class="line">        window.minSize = <span class="keyword">new</span> Vector2(<span class="number">400</span>, <span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span> Init</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUILayout.Space(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        orginTerrain = EditorGUILayout.ObjectField(<span class="string">&quot;地形&quot;</span>, orginTerrain, <span class="keyword">typeof</span>(Terrain), <span class="literal">true</span>) <span class="keyword">as</span> Terrain;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (orginTerrain != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            orginTerrainData = orginTerrain.terrainData;</span><br><span class="line">            GUI.enabled = <span class="literal">false</span>;</span><br><span class="line">            EditorGUILayout.Vector3Field(<span class="string">&quot;尺寸:(Width,Height,Length)&quot;</span>, orginTerrain.terrainData.size);</span><br><span class="line">            GUI.enabled = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        GUILayout.Space(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        selectToolBar = GUILayout.Toolbar(selectToolBar, toolbarMenu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (selectToolBar)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                DrawManualSplite();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                DrawAutoSplite();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector2 pos;</span><br><span class="line">    <span class="keyword">private</span> Vector2 size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawManualSplite</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        GUILayout.Space(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        pos = EditorGUILayout.Vector2Field(<span class="string">&quot;起始座标&quot;</span>, pos);</span><br><span class="line">        size = EditorGUILayout.Vector2Field(<span class="string">&quot;尺寸&quot;</span>, size);</span><br><span class="line">        <span class="keyword">var</span> sizeX = GetNear(size.x);</span><br><span class="line">        <span class="keyword">var</span> sizeY = GetNear(size.y);</span><br><span class="line"></span><br><span class="line">        pos.x = Mathf.Clamp(pos.x, <span class="number">0</span>, orginTerrainData.size.x - sizeX);</span><br><span class="line">        pos.y = Mathf.Clamp(pos.y, <span class="number">0</span>, orginTerrainData.size.z - sizeY);</span><br><span class="line"></span><br><span class="line">        GUILayout.Space(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (GUILayout.Button(<span class="string">&quot;Splite&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (size.x == <span class="number">0</span> || size.y == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ShowNotification(<span class="keyword">new</span> GUIContent(<span class="string">&quot;尺寸不能为零&quot;</span>));</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            SpliteTerrain();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawAutoSplite</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">region</span> Splite</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TerrainData resultTerrainData;</span><br><span class="line">    <span class="keyword">private</span> Terrain resultTerrain;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> X;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> Y;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> W;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> L;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SpliteTerrain</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> path = EditorUtility.SaveFilePanel(<span class="string">&quot;Save Splited Data Path&quot;</span>, Application.dataPath, orginTerrain.gameObject.name + <span class="string">&quot;_Splite&quot;</span>, <span class="string">&quot;asset&quot;</span>);</span><br><span class="line">        Debug.Log(path);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(path))</span><br><span class="line">        &#123;</span><br><span class="line">            ShowNotification(<span class="keyword">new</span> GUIContent(<span class="string">&quot;路径不存在&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        X = (<span class="built_in">int</span>)(pos.x) / <span class="number">2</span>;</span><br><span class="line">        Y = (<span class="built_in">int</span>)(pos.y) / <span class="number">2</span>;</span><br><span class="line">        W = (<span class="built_in">int</span>)(size.x);</span><br><span class="line">        L = (<span class="built_in">int</span>)(size.y);</span><br><span class="line"></span><br><span class="line">        InitData(path);</span><br><span class="line">        SpliteHeightMap();</span><br><span class="line">        SpliteAlphaMap();</span><br><span class="line">        SpliteTrees();</span><br><span class="line">        SpliteGrass();</span><br><span class="line"></span><br><span class="line">        resultTerrain.Flush();</span><br><span class="line">        AssetDatabase.SaveAssets();</span><br><span class="line">        AssetDatabase.Refresh();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitData</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//初始化Data</span></span><br><span class="line">        resultTerrainData = <span class="keyword">new</span> TerrainData();</span><br><span class="line">        resultTerrainData.size = <span class="keyword">new</span> Vector3(W, orginTerrainData.size.y, L);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建文件</span></span><br><span class="line">        resultTerrain = Terrain.CreateTerrainGameObject(resultTerrainData).GetComponent&lt;Terrain&gt;();</span><br><span class="line">        resultTerrain.gameObject.name = orginTerrain.gameObject.name + <span class="string">&quot;_Splite&quot;</span>;</span><br><span class="line">        AssetDatabase.CreateAsset(resultTerrainData, path.Replace(Application.dataPath, <span class="string">&quot;Assets&quot;</span>));</span><br><span class="line">        resultTerrain.terrainData = resultTerrainData;</span><br><span class="line"></span><br><span class="line">        resultTerrain.transform.position = orginTerrain.transform.position + <span class="keyword">new</span> Vector3(pos.x, <span class="number">0</span>, pos.y);</span><br><span class="line"></span><br><span class="line">        Selection.activeGameObject = resultTerrain.gameObject;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//基本参数</span></span><br><span class="line">        resultTerrain.drawHeightmap = orginTerrain.drawHeightmap;</span><br><span class="line">        resultTerrain.heightmapPixelError = orginTerrain.heightmapPixelError;</span><br><span class="line">        resultTerrain.basemapDistance = orginTerrain.basemapDistance;</span><br><span class="line">        resultTerrain.castShadows = orginTerrain.castShadows;</span><br><span class="line">        resultTerrain.materialType = orginTerrain.materialType;</span><br><span class="line">        resultTerrain.materialTemplate = orginTerrain.materialTemplate;</span><br><span class="line">        resultTerrain.reflectionProbeUsage = orginTerrain.reflectionProbeUsage;</span><br><span class="line">        resultTerrainData.thickness = orginTerrainData.thickness;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Tree &amp; Detail  </span></span><br><span class="line">        resultTerrain.drawTreesAndFoliage = orginTerrain.drawTreesAndFoliage;</span><br><span class="line">        resultTerrain.bakeLightProbesForTrees = orginTerrain.bakeLightProbesForTrees;</span><br><span class="line">        resultTerrain.detailObjectDistance = orginTerrain.detailObjectDistance;</span><br><span class="line">        resultTerrain.collectDetailPatches = orginTerrain.collectDetailPatches;</span><br><span class="line">        resultTerrain.detailObjectDensity = orginTerrain.detailObjectDensity;</span><br><span class="line">        resultTerrain.treeDistance = orginTerrain.treeDistance;</span><br><span class="line">        resultTerrain.treeBillboardDistance = orginTerrain.treeBillboardDistance;</span><br><span class="line">        resultTerrain.treeCrossFadeLength = orginTerrain.treeCrossFadeLength;</span><br><span class="line">        resultTerrain.treeMaximumFullLODCount = orginTerrain.treeMaximumFullLODCount;</span><br><span class="line">        <span class="comment">// Wind Setting For Grass</span></span><br><span class="line">        resultTerrainData.wavingGrassSpeed = orginTerrainData.wavingGrassSpeed;</span><br><span class="line">        resultTerrainData.wavingGrassStrength = orginTerrainData.wavingGrassStrength;</span><br><span class="line">        resultTerrainData.wavingGrassAmount = orginTerrainData.wavingGrassAmount;</span><br><span class="line">        resultTerrainData.wavingGrassTint = orginTerrainData.wavingGrassTint;</span><br><span class="line">        resultTerrainData.splatPrototypes = orginTerrainData.splatPrototypes;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Resolution</span></span><br><span class="line">        <span class="keyword">var</span> resolution = (<span class="built_in">int</span>)Mathf.Max(size.x, size.y);</span><br><span class="line"></span><br><span class="line">        resultTerrainData.heightmapResolution = resolution * orginTerrainData.heightmapResolution / (<span class="built_in">int</span>)(orginTerrainData.size.x) + <span class="number">1</span>;</span><br><span class="line">        resultTerrainData.size = <span class="keyword">new</span> Vector3(size.x, orginTerrainData.size.y, size.y);</span><br><span class="line">        resultTerrainData.SetDetailResolution(resolution * orginTerrainData.detailResolution / (<span class="built_in">int</span>)(orginTerrainData.size.x), <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        resultTerrainData.alphamapResolution = resolution * orginTerrainData.alphamapResolution / (<span class="built_in">int</span>)(orginTerrainData.size.x);</span><br><span class="line">        resultTerrainData.baseMapResolution = resolution * orginTerrainData.baseMapResolution / (<span class="built_in">int</span>)(orginTerrainData.size.x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 高度图</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SpliteHeightMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> sizeHeight = resultTerrainData.heightmapResolution;</span><br><span class="line">        Debug.Log(<span class="string">&quot;sizeHeight/W/L\t&quot;</span> + sizeHeight + <span class="string">&quot;/&quot;</span> + W + <span class="string">&quot;/&quot;</span> + L);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> max = Mathf.Max(W, L);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> arry = orginTerrain.terrainData.GetHeights(X, Y, W / max * sizeHeight, L / max * sizeHeight);</span><br><span class="line"></span><br><span class="line">        resultTerrainData.SetHeights(<span class="number">0</span>, <span class="number">0</span>, arry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 贴图</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SpliteAlphaMap</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> sizeAlpha = resultTerrainData.alphamapResolution;</span><br><span class="line">        Debug.Log(<span class="string">&quot;sizeAlpha/W/L\t&quot;</span> + sizeAlpha + <span class="string">&quot;/&quot;</span> + W + <span class="string">&quot;/&quot;</span> + L);</span><br><span class="line">        <span class="keyword">var</span> max = Mathf.Max(W, L);</span><br><span class="line">        <span class="built_in">float</span>[,,] aMap = orginTerrainData.GetAlphamaps(X, Y, W / max * sizeAlpha, L / max * sizeAlpha);</span><br><span class="line">        resultTerrainData.SetAlphamaps(<span class="number">0</span>, <span class="number">0</span>, aMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 树木</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SpliteTrees</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;TreeInstance&gt; trees = <span class="keyword">new</span> List&lt;TreeInstance&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> treeNum = orginTerrainData.treeInstances;</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">var</span> areaRect = <span class="keyword">new</span> Rect(X, Y, W, L);</span><br><span class="line">        <span class="keyword">var</span> treePos = Vector2.zero;</span><br><span class="line">        <span class="keyword">var</span> realPos = Vector3.zero;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> offset = <span class="keyword">new</span> Vector3(pos.x, <span class="number">0</span>, pos.y);</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; treeNum.Length; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            realPos.x = treeNum[k].position.x * orginTerrainData.size.x;</span><br><span class="line">            realPos.z = treeNum[k].position.z * orginTerrainData.size.z;</span><br><span class="line">            realPos.y = treeNum[k].position.y * orginTerrainData.size.y;</span><br><span class="line"></span><br><span class="line">            treePos.x = realPos.x;</span><br><span class="line">            treePos.y = realPos.z;</span><br><span class="line">            <span class="keyword">if</span> (areaRect.Contains(treePos))</span><br><span class="line">            &#123;</span><br><span class="line">                treeNum[k].position = realPos - offset;</span><br><span class="line">                treeNum[k].position.x = treeNum[k].position.x / size.x;</span><br><span class="line">                treeNum[k].position.z = treeNum[k].position.z / size.y;</span><br><span class="line">                treeNum[k].position.y = treeNum[k].position.y / resultTerrainData.size.y;</span><br><span class="line"></span><br><span class="line">                trees.Add(treeNum[k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resultTerrainData.treePrototypes = orginTerrainData.treePrototypes;</span><br><span class="line">        resultTerrainData.treeInstances = trees.ToArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 花草</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SpliteGrass</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        DetailPrototype[] Grass = orginTerrainData.detailPrototypes;</span><br><span class="line">        </span><br><span class="line">        resultTerrainData.detailPrototypes = Grass;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> k = <span class="number">0</span>; k &lt; Grass.Length; k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span>[,] text = orginTerrainData.GetDetailLayer(X, Y, W, L, k);</span><br><span class="line">            resultTerrainData.SetDetailLayer(<span class="number">0</span>, <span class="number">0</span>, k, text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">endregion</span> Splite</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">GetNear</span>(<span class="params"><span class="built_in">float</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> result = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (result &lt; num)</span><br><span class="line">        &#123;</span><br><span class="line">            result = result &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Terrain</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity动态加载外部Dll进行逻辑更新</title>
    <url>/2015/07/25/Unity-extends-load-dll/</url>
    <content><![CDATA[<p>在PC端和安卓端,会有逻辑热更新的需求(此文不适用iOS),会选择将游戏逻辑打包在DLL里<br>只需要在必要时更新下载新的dll,覆盖旧的,加载新的代码执行即可<br>此方法已经过实际验证,并应用于上线的安卓项目中</p>
<span id="more"></span>

<hr>
<p>基本原理如下:</p>
<p>#一、 加载外部程序集</p>
<ol>
<li><p>利用反射动态加载外部程序集</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Assembly assembly = Assembly.LoadFile (dll_Path);</span><br></pre></td></tr></table></figure>

<p> 通过下面代码查看验证加载结果,打印出程序集中的所有类</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">System.Type[] types = assembly.GetExportedTypes();</span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;types.Length;i++)&#123;</span><br><span class="line">		Debug.Log(types[i].Name);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取程序集中的类型<br> 通过<code>AddComponent(type)</code>方法将脚本挂在GameObject上即可</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">System.Type type = assembly.GetType (className);</span><br><span class="line">gameObject.AddComponent(type);</span><br></pre></td></tr></table></figure>
</li>
<li><p>完整脚本如下:</p>
 <figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">GetExtendsDll</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span>  <span class="keyword">static</span> Assembly assembly;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">string</span> dll_Path =<span class="string">&quot;xxx&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">string</span> dll_Path_Loacal =<span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalResourceManager <span class="title">GetInstance</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> instance;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Awake</span> ()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">		assembly = Assembly.LoadFile (dll_Path);</span><br><span class="line">		<span class="meta">#<span class="keyword">elif</span> UNITY_ANDROID</span></span><br><span class="line">		assembly = Assembly.LoadFile (dll_Path_Loacal);</span><br><span class="line">		<span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">		System.Type[] types = assembly.GetExportedTypes();</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;types.Length;i++)&#123;</span><br><span class="line">			Debug.Log(types[i].Name);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> 给物体上挂在脚本.</span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;gb&quot;&gt;</span>游戏物体.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;className&quot;&gt;</span>类名.<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddComponent</span> (<span class="params">GameObject gb , <span class="built_in">string</span> className</span>)</span></span><br><span class="line">	&#123;</span><br><span class="line">		System.Type type = assembly.GetType (className);</span><br><span class="line">      	 	<span class="keyword">if</span> (type == <span class="literal">null</span>) &#123;</span><br><span class="line">			Debug.Log(<span class="string">&quot;className  &quot;</span>+className +<span class="string">&quot; not exist&quot;</span>);</span><br><span class="line">      	 	&#125;</span><br><span class="line">      	 	<span class="keyword">else</span> <span class="keyword">if</span> (gb != <span class="literal">null</span> &amp;&amp; gb.GetComponent (type) == <span class="literal">null</span>) </span><br><span class="line">       	&#123;</span><br><span class="line">			gb.AddComponent (type);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>#二、 GameObject绑定</p>
<ol>
<li><p>场景中有大量游戏对象需要关联到脚本组件上,我们和、构建的类需要提供以下功能</p>
<ul>
<li>提供方法挂载需要的组件,要求可挂载多个组建</li>
<li>提供基础类型字段: int float string bool GameObject 等</li>
<li>提供静态方法,方便被挂载的脚本对象获取到上述字段</li>
</ul>
</li>
<li><p>完整脚本如下:</p>
</li>
</ol>
<p>	</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AddCompnt</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">string</span>[] className;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span>[] defaultIntVale;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">float</span>[] defaultFloatVale;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">string</span>[] defaultStrVale;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">bool</span>[] defaultBoolValue;</span><br><span class="line">	<span class="keyword">public</span> GameObject[] defaultGameObject;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (className == <span class="literal">null</span> || className.Length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; className.Length; i++) &#123;</span><br><span class="line">			GetExtendsDll.GetInstance ().AddComponentToResource (className[i], gameObject);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> 通过索引获取数据</span></span><br><span class="line">	<span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">GetDefaultGB</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">int</span> index</span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">		<span class="keyword">if</span> (defaultGameObject == <span class="literal">null</span> || defaultGameObject.Length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">			GLogger.Log (<span class="string">&quot;get gameobject fail: the defaultGameObject is null&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= defaultGameObject.Length) &#123;</span><br><span class="line">			GLogger.Log (<span class="string">&quot;get gameobject fail: IndexOutOfRangeException index error  &quot;</span> + index);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (defaultGameObject [index] == <span class="literal">null</span>) &#123;</span><br><span class="line">			GLogger.Log (<span class="string">&quot;get gameobject fail: the index gameobject is null  &quot;</span> + index);</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		Type type = <span class="keyword">typeof</span>(T);</span><br><span class="line">		<span class="keyword">if</span> (type.Name == <span class="string">&quot;GameObject&quot;</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span> (T)Convert.ChangeType(defaultGameObject[index],type);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> (T)Convert.ChangeType(defaultGameObject[index].GetComponent(type),type);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p>#三、 组件获取数据</p>
<p>组件从<code>AddCompnt</code>组件中获取自己所需要的数据</p>
<pre><code><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SimpleTest</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">int</span> 			intData;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">float</span> 		floatData;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">string</span> 		stringData;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">bool</span> 		booltData;</span><br><span class="line">	<span class="keyword">public</span> GameObject 	gbData;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">		Init();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">Init</span>()</span>&#123;</span><br><span class="line">		GetCommponent src = gameObject.GetComponent&lt;GetCommponent&gt; ();</span><br><span class="line">		intData 	= src.defaultIntVale[<span class="number">0</span>];</span><br><span class="line">		floatData 	= src.defaultFloatVale[<span class="number">0</span>];</span><br><span class="line">		stringData 	= src.defaultStrVale[<span class="number">0</span>];</span><br><span class="line">		booltData 	= src.defaultBoolValue[<span class="number">0</span>];</span><br><span class="line">		gbData 		= src.GetDefaultGB&lt;GameObject&gt;(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<p>#四、 场景编辑</p>
<p>建立外部Dll工程,加入所需脚本,编译得到DLL,在<code>GetExtendsDll.cs</code>配置Dll路径<br>接下来只需要将	<code>AddCompnt.cs</code>挂在对象上,拖拽和设置初始数据即可</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity帧率监测</title>
    <url>/2015/08/06/Unity-Utils-hudFPS/</url>
    <content><![CDATA[<p>  游戏内动态监测帧率</p>
  <span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"> </span><br><span class="line">[AddComponentMenu( &quot;Utilities/HUDFPS&quot;)]</span><br><span class="line">public class HUDFPS : MonoBehaviour</span><br><span class="line">&#123;</span><br><span class="line">	// Attach this to any object to make a frames/second indicator.</span><br><span class="line">	//</span><br><span class="line">	// It calculates frames/second over each updateInterval,</span><br><span class="line">	// so the display does not keep changing wildly.</span><br><span class="line">	//</span><br><span class="line">	// It is also fairly accurate at very low FPS counts (&lt;10).</span><br><span class="line">	// We do this not by simply counting frames per interval, but</span><br><span class="line">	// by accumulating FPS for each frame. This way we end up with</span><br><span class="line">	// corstartRect overall FPS even if the interval renders something like</span><br><span class="line">	// 5.5 frames.</span><br><span class="line"> </span><br><span class="line">	public Rect startRect = new Rect( 10, 10, 75, 50 ); // The rect the window is initially displayed at.</span><br><span class="line">	public bool updateColor = true; // Do you want the color to change if the FPS gets low</span><br><span class="line">	public bool allowDrag = true; // Do you want to allow the dragging of the FPS window</span><br><span class="line">	public  float frequency = 0.5F; // The update frequency of the fps</span><br><span class="line">	public int nbDecimal = 1; // How many decimal do you want to display</span><br><span class="line"> </span><br><span class="line">	private float accum   = 0f; // FPS accumulated over the interval</span><br><span class="line">	private int   frames  = 0; // Frames drawn over the interval</span><br><span class="line">	private Color color = Color.white; // The color of the GUI, depending of the FPS ( R &lt; 10, Y &lt; 30, G &gt;= 30 )</span><br><span class="line">	private string sFPS = &quot;&quot;; // The fps formatted into a string.</span><br><span class="line">	private GUIStyle style; // The style the text will be displayed at, based en defaultSkin.label.</span><br><span class="line"> </span><br><span class="line">	void Awake() &#123;</span><br><span class="line">        Application.targetFrameRate = 60;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	void Start()</span><br><span class="line">	&#123;</span><br><span class="line">	    StartCoroutine( FPS() );</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	void Update()</span><br><span class="line">	&#123;</span><br><span class="line">	    accum += Time.timeScale/ Time.deltaTime;</span><br><span class="line">	    ++frames;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	IEnumerator FPS()</span><br><span class="line">	&#123;</span><br><span class="line">		// Infinite loop executed every &quot;frenquency&quot; secondes.</span><br><span class="line">		while( true )</span><br><span class="line">		&#123;</span><br><span class="line">			// Update the FPS</span><br><span class="line">		    float fps = accum/frames;</span><br><span class="line">		    sFPS = fps.ToString( &quot;f&quot; + Mathf.Clamp( nbDecimal, 0, 10 ) );</span><br><span class="line"> </span><br><span class="line">			//Update the color</span><br><span class="line">			color = (fps &gt;= 30) ? Color.green : ((fps &gt; 10) ? Color.red : Color.yellow);</span><br><span class="line"> </span><br><span class="line">	        accum = 0.0F;</span><br><span class="line">	        frames = 0;</span><br><span class="line"> </span><br><span class="line">			yield return new WaitForSeconds( frequency );</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	void OnGUI()</span><br><span class="line">	&#123;</span><br><span class="line">		// Copy the default label skin, change the color and the alignement</span><br><span class="line">		if( style == null )&#123;</span><br><span class="line">			style = new GUIStyle( GUI.skin.label );</span><br><span class="line">			style.normal.textColor = Color.white;</span><br><span class="line">			style.alignment = TextAnchor.MiddleCenter;</span><br><span class="line">		&#125;</span><br><span class="line"> </span><br><span class="line">		GUI.color = updateColor ? color : Color.white;</span><br><span class="line">		startRect = GUI.Window(0, startRect, DoMyWindow, &quot;&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	void DoMyWindow(int windowID)</span><br><span class="line">	&#123;</span><br><span class="line">//		sFPS += &quot; &quot;+SystemInfo.systemMemorySize;</span><br><span class="line">//		Debug.Log (SystemInfo.systemMemorySize + &quot;  &quot; );</span><br><span class="line">		GUI.Label( new Rect(0, 0, startRect.width, startRect.height), sFPS + &quot; FPS&quot;, style );</span><br><span class="line">		if( allowDrag ) GUI.DragWindow(new Rect(0, 0, Screen.width, Screen.height));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity毛玻璃效果遮罩</title>
    <url>/2015/03/29/Unity-shader-WaterBlur/</url>
    <content><![CDATA[<p>毛玻璃效果shader</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Shader &quot;Custom/WaterBlur&quot; &#123;</span><br><span class="line">Properties &#123;</span><br><span class="line">_blurSizeXY(&quot;BlurSizeXY&quot;, Range(0,10)) = 2</span><br><span class="line">&#125;</span><br><span class="line">SubShader &#123;</span><br><span class="line"></span><br><span class="line">// Draw ourselves after all opaque geometry</span><br><span class="line">Tags &#123; &quot;Queue&quot; = &quot;Transparent&quot; &#125;</span><br><span class="line"></span><br><span class="line">// Grab the screen behind the object into _GrabTexture</span><br><span class="line">GrabPass &#123; &#125;</span><br><span class="line"></span><br><span class="line">// Render the object with the texture generated above</span><br><span class="line">Pass &#123;</span><br><span class="line"></span><br><span class="line">CGPROGRAM</span><br><span class="line">#pragma debug</span><br><span class="line">#pragma vertex vert</span><br><span class="line">#pragma fragment frag</span><br><span class="line">#pragma target 3.0</span><br><span class="line"></span><br><span class="line">sampler2D _GrabTexture : register(s0);</span><br><span class="line">float _blurSizeXY;</span><br><span class="line"></span><br><span class="line">struct data &#123;</span><br><span class="line"></span><br><span class="line">float4 vertex : POSITION;</span><br><span class="line"></span><br><span class="line">float3 normal : NORMAL;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct v2f &#123;</span><br><span class="line"></span><br><span class="line">float4 position : POSITION;</span><br><span class="line"></span><br><span class="line">float4 screenPos : TEXCOORD0;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">v2f vert(data i)&#123;</span><br><span class="line"></span><br><span class="line">v2f o;</span><br><span class="line"></span><br><span class="line">o.position = mul(UNITY_MATRIX_MVP, i.vertex);</span><br><span class="line"></span><br><span class="line">o.screenPos = o.position;</span><br><span class="line"></span><br><span class="line">return o;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">half4 frag( v2f i ) : COLOR</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">float2 screenPos = i.screenPos.xy / i.screenPos.w;</span><br><span class="line">float depth= _blurSizeXY*0.0005;</span><br><span class="line"></span><br><span class="line">screenPos.x = (screenPos.x + 1) * 0.5;</span><br><span class="line"></span><br><span class="line">screenPos.y = 1-(screenPos.y + 1) * 0.5;</span><br><span class="line"></span><br><span class="line">half4 sum = half4(0.0h,0.0h,0.0h,0.0h);</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x-5.0 * depth, screenPos.y+5.0 * depth)) * 0.025;</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x+5.0 * depth, screenPos.y-5.0 * depth)) * 0.025;</span><br><span class="line"></span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x-4.0 * depth, screenPos.y+4.0 * depth)) * 0.05;</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x+4.0 * depth, screenPos.y-4.0 * depth)) * 0.05;</span><br><span class="line"></span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x-3.0 * depth, screenPos.y+3.0 * depth)) * 0.09;</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x+3.0 * depth, screenPos.y-3.0 * depth)) * 0.09;</span><br><span class="line"></span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x-2.0 * depth, screenPos.y+2.0 * depth)) * 0.12;</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x+2.0 * depth, screenPos.y-2.0 * depth)) * 0.12;</span><br><span class="line"></span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x-1.0 * depth, screenPos.y+1.0 * depth)) * 0.15;</span><br><span class="line">sum += tex2D( _GrabTexture, float2(screenPos.x+1.0 * depth, screenPos.y-1.0 * depth)) * 0.15;</span><br><span class="line"></span><br><span class="line">sum += tex2D( _GrabTexture, screenPos-5.0 * depth) * 0.025;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos-4.0 * depth) * 0.05;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos-3.0 * depth) * 0.09;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos-2.0 * depth) * 0.12;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos-1.0 * depth) * 0.15;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos) * 0.16;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos+5.0 * depth) * 0.15;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos+4.0 * depth) * 0.12;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos+3.0 * depth) * 0.09;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos+2.0 * depth) * 0.05;</span><br><span class="line">sum += tex2D( _GrabTexture, screenPos+1.0 * depth) * 0.025;</span><br><span class="line"></span><br><span class="line">return sum/2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ENDCG</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fallback Off</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Shader</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity与安卓交互</title>
    <url>/2015/03/24/Unity-to-Android-msg/</url>
    <content><![CDATA[<p>一、安卓调用Unity方法</p>
<p>Unity 代码<br>第一种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using (AndroidJavaClass jc = new AndroidJavaClass(&quot;com.unity3d.player.UnityPlayer&quot;))&#123;</span><br><span class="line">	using (AndroidJavaObject jo = jc.GetStatic(&quot;currentActivity&quot;))</span><br><span class="line">	&#123;</span><br><span class="line">		jo.Call(apiName,args);</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>第二种</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using (AndroidJavaClass cls = new AndroidJavaClass(&quot;com.unity3d.player.UnityPlayer&quot;)) &#123;</span><br><span class="line">	cls.CallStatic (apiName, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Android代码，添加在UnityPlayerNativeActivity.java中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void openUrl(String url)&#123;</span><br><span class="line">	Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));</span><br><span class="line">	intent.addCategory(Intent.CATEGORY_BROWSABLE);</span><br><span class="line">	intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">	startActivity(intent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二、安卓调用Unity方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UnityPlayer.UnitySendMessage(gameObjectName,apiName, args);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity判断网络连接状况和类型</title>
    <url>/2015/03/16/Unity-network-get-NetType/</url>
    <content><![CDATA[<p><code>NotReachable</code> 网络不可达<br><code>ReachableViaCarrierDataNetwork</code> 网络通过运营商数据网络是可达的。<br><code>ReachableViaLocalAreaNetwork</code> 网络通过WiFi或有线网络是可达的。</p>
<span id="more"></span>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(Application.internetReachability == NetworkReachability.NotReachable)&#123;</span><br><span class="line">	Debug.<span class="built_in">LogError</span>(<span class="string">&quot;网络不可用&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(Application.internetReachability == NetworkReachability.ReachableViaCarrierDataNetwork) &#123;</span><br><span class="line">	Debug.<span class="built_in">LogError</span>(<span class="string">&quot;网络net可用&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(Application.internetReachability == NetworkReachability.ReachableViaLocalAreaNetwork) &#123;</span><br><span class="line">	Debug.<span class="built_in">LogError</span>(<span class="string">&quot;网络wifi可用&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity与iOS交互</title>
    <url>/2015/03/17/Unity-to-iOS-func/</url>
    <content><![CDATA[<span id="more"></span>
<p>一、Unity调用iOS的方法</p>
<p>1.首先创建Unity工程</p>
<p><img src="/2015/03/17/Unity-to-iOS-func/Unity-to-iOS-func_iOSUnity_Creat.png" alt="image"><br>2.编写Unity脚本，挂在Canvas对象上，导出Unity工程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Button button;</span><br><span class="line"></span><br><span class="line">[DllImport(&quot;__Internal&quot;)]</span><br><span class="line">private static extern void PressButton ();</span><br><span class="line"></span><br><span class="line">void Start ()</span><br><span class="line">	&#123;</span><br><span class="line">		text.text = &quot;Start&quot;;</span><br><span class="line">		button.onClick.AddListener (delegate() &#123;</span><br><span class="line">			clickBtn(button.gameObject);		</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	void clickBtn (GameObject gb)</span><br><span class="line">	&#123;</span><br><span class="line">		print (&quot;click btn&quot;);</span><br><span class="line">		PressButton ();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p>3.编写iOS代码</p>
<p>MyView.h</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#import &lt;Foundation/Foundation.h&gt;</span><br><span class="line"></span><br><span class="line">@interface MyView : UIViewController</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>MyView.m</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;MyView.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">@implementation MyView</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PressButton</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    UIAlertView *alert = [[UIAlertView alloc] init];</span><br><span class="line">    [alert setTitle:@<span class="string">&quot;MySDK&quot;</span>];</span><br><span class="line">    [alert setMessage:@<span class="string">&quot;点击了按钮&quot;</span>];</span><br><span class="line">    [alert addButtonWithTitle:@<span class="string">&quot;确定&quot;</span>];</span><br><span class="line">    [alert  show];</span><br><span class="line">    [alert release];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>4.运行效果<br><img src="/2015/03/17/Unity-to-iOS-func/Unity-to-iOS-func_run.png" alt="图片"></p>
<p>二、iOS调用Unity方法<br>1.编写Unity代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">public Text text;</span><br><span class="line"></span><br><span class="line">public <span class="type">void</span> <span class="title function_">Press</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	text.text = <span class="string">&quot;Press&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="type">void</span> <span class="title function_">Up</span> <span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	text.text = <span class="string">&quot;Up&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.编写iOS代码<br>在MyView.m中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    //创建按钮</span><br><span class="line">    UIButton *button0 = [UIButton buttonWithType:1];</span><br><span class="line">    //设置按钮范围</span><br><span class="line">    button0.frame = CGRectMake(0, 40, 100, 30);</span><br><span class="line">    //设置按钮显示内容</span><br><span class="line">    [button0 setTitle:@&quot;Click&quot; forState:UIControlStateNormal];</span><br><span class="line">    button0.backgroundColor = [UIColor whiteColor];</span><br><span class="line">    //设置按钮改变后 绑定响应方法</span><br><span class="line">    [button0 addTarget:self action:@selector(BtnPressed) forControlEvents:UIControlEventTouchDown];</span><br><span class="line">    [button0 addTarget:self action:@selector(BtnUp) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    </span><br><span class="line">    [self.view addSubview:button0 ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)BtnPressed&#123;</span><br><span class="line">    UnitySendMessage(&quot;Canvas&quot;,&quot;Press&quot;,&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-(void)BtnUp&#123;</span><br><span class="line">    UnitySendMessage(&quot;Canvas&quot;,&quot;Up&quot;,&quot;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在UnityAppController.mm中</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;MyView.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)startUnity:(UIApplication*)application</span><br><span class="line">&#123;</span><br><span class="line">	UnityInitApplicationGraphics();</span><br><span class="line"></span><br><span class="line">	<span class="comment">// we make sure that first level gets correct display list and orientation</span></span><br><span class="line">	[[DisplayManager Instance] updateDisplayListInUnity];</span><br><span class="line">	[self updateOrientationFromController:[SplashScreenController Instance]];</span><br><span class="line"></span><br><span class="line">	UnityLoadApplication();</span><br><span class="line">	Profiler_InitProfiler();</span><br><span class="line"></span><br><span class="line">	[self showGameUI];</span><br><span class="line">	[self createDisplayLink];</span><br><span class="line"></span><br><span class="line">	UnitySetPlayerFocus(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    MyView * myView = [[MyView alloc] init];</span><br><span class="line">    [UnityGetGLViewController().view addSubview:myView.view];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>3.运行效果</p>
<p><img src="/2015/03/17/Unity-to-iOS-func/Unity-to-iOS-func_run_2.png" alt="图片"></p>
<p>4.通过Unity打开ios浏览器</p>
<p>UnityC#</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void openUrl ()</span><br><span class="line">&#123;</span><br><span class="line">    print (&quot;OpenUrl&quot;);</span><br><span class="line">    OpenUrl (&quot;http://wondermblog.sinaapp.com/&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[DllImport(&quot;__Internal&quot;)]</span><br><span class="line">private static extern void OpenUrl (string url);</span><br></pre></td></tr></table></figure>
<p>Xcode  object-C</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void OpenUrl(char *url)</span><br><span class="line">&#123;</span><br><span class="line">NSString *str = [NSString stringWithUTF8String:url];</span><br><span class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString: str]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity发布Web版本自定义Logo界面</title>
    <url>/2015/03/23/Unity-web-logo/</url>
    <content><![CDATA[<span id="more"></span>
<p>发布Web版本，会生成WebTest工程  ，文件如下</p>
<p><img src="/2015/03/23/Unity-web-logo/Unity_web_logo_proj.png" alt="图片"></p>
<p>运行效果如下</p>
<p><img src="/2015/03/23/Unity-web-logo/Unity_web_logo_run.png" alt="图片"></p>
<p>同代码编辑器打开WebTest.html，代码作用如下</p>
<p><img src="/2015/03/23/Unity-web-logo/Unity_web_logo_html_01.png" alt="图片"></p>
<p><img src="/2015/03/23/Unity-web-logo/Unity_web_logo_html_02.png" alt="图片"></p>
<p>须注意的是，loading界面的背景，进度条，进度条背景都必须为png格式图片，进度条的位置会被置于背景图正下方，若是背景图大于屏幕尺寸，会导致进度条不显示。</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity爱应用SDK接入</title>
    <url>/2015/06/30/Unity-wp8-SDK-aiYingYong/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h2><p> Win8x64以上PC一台,内存4G以上,需要支持CPU虚拟化<br> VS2013以上,我使用的VS2015RC<br> 爱应用SDK</p>
<h2 id="2-下载解压爱应用SDK-找到对应平台的支付和登录SDK"><a href="#2-下载解压爱应用SDK-找到对应平台的支付和登录SDK" class="headerlink" title="2. 下载解压爱应用SDK,找到对应平台的支付和登录SDK"></a>2. 下载解压爱应用SDK,找到对应平台的支付和登录SDK</h2><p>登录:<code>51Wp.AccountSdk.dll</code><br>支付:<code>51Wp.PaymentSdk.dll</code><br><img src="/2015/06/30/Unity-wp8-SDK-aiYingYong/Wp8-SDK-aiYingYong.png"></p>
<h2 id="3-编写SDK管理脚本WpPlatform-cs"><a href="#3-编写SDK管理脚本WpPlatform-cs" class="headerlink" title="3. 编写SDK管理脚本WpPlatform.cs"></a>3. 编写SDK管理脚本<code>WpPlatform.cs</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using System.Collections;</span><br><span class="line"></span><br><span class="line">public class WpPlatform   &#123;</span><br><span class="line"></span><br><span class="line">public static WpPlatform instance = new  WpPlatform();</span><br><span class="line"></span><br><span class="line">#region 登录</span><br><span class="line">//登录委托</span><br><span class="line">public delegate void CallBack ();</span><br><span class="line">public CallBack initLogin;</span><br><span class="line">public void GgotoAYYLogin()&#123;</span><br><span class="line">if(initLogin != null)&#123;</span><br><span class="line">initLogin();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//登录回调</span><br><span class="line">public delegate void  CallBackStr(string gameId,string supplyId);</span><br><span class="line">public CallBackStr logincallBack;</span><br><span class="line">public void LoginResult(bool isSucc,string userName,string userId)&#123;</span><br><span class="line">if(logincallBack != null &amp;&amp; isSucc)&#123;</span><br><span class="line">logincallBack(userName,userId);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br><span class="line"></span><br><span class="line">#region 支付</span><br><span class="line">//开启支付</span><br><span class="line">public delegate void GoTopay( string playerId,string goodsId,string goodsName,int count,string unitPrice,string finalPrice);</span><br><span class="line">public GoTopay goToPay;</span><br><span class="line">public void GotoAYYPay(string playerId,string goodsId,string goodsName,int count,string unitPrice,string finalPrice)&#123;</span><br><span class="line">if(goToPay != null)&#123;</span><br><span class="line">goToPay(playerId,goodsId,goodsName,count,unitPrice,finalPrice);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//支付结果回调</span><br><span class="line">public delegate void PayCallBack(bool isSucc);</span><br><span class="line">public PayCallBack payCallBack;</span><br><span class="line">public void PayResult(bool isSucc,string orderId,string goodsId,string goodsName,string goodsPrice,string PlayerId,string msg)&#123;</span><br><span class="line">if(payCallBack != null)&#123;</span><br><span class="line">payCallBack(isSucc);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#endregion </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-编写游戏内逻辑脚本-将登录结果和支付结果的回调注册进去。"><a href="#4-编写游戏内逻辑脚本-将登录结果和支付结果的回调注册进去。" class="headerlink" title="4. 编写游戏内逻辑脚本,将登录结果和支付结果的回调注册进去。"></a>4. 编写游戏内逻辑脚本,将登录结果和支付结果的回调注册进去。</h2><h2 id="5-构建WP工程-使用Win8以上的Win电脑VS2013以上打开工程-添加对SDK的引用。"><a href="#5-构建WP工程-使用Win8以上的Win电脑VS2013以上打开工程-添加对SDK的引用。" class="headerlink" title="5. 构建WP工程,使用Win8以上的Win电脑VS2013以上打开工程,添加对SDK的引用。"></a>5. 构建WP工程,使用Win8以上的Win电脑VS2013以上打开工程,添加对SDK的引用。</h2><h2 id="6-打开WMAppManifest-xml"><a href="#6-打开WMAppManifest-xml" class="headerlink" title="6. 打开WMAppManifest.xml"></a>6. 打开<code>WMAppManifest.xml</code></h2><p>. 应用程序UI—配置iCO、应用名称、图块资源<br>. 功能—分别添加<code>ID_CAP_IDENTITY_USER</code>、<code>ID_CAP_MEDIALIB_PHOTO</code>、<code>ID_CAP_WEBBROWSERCOMPONENT</code>三个功能<br>. 打包—此时并不修改AppID,待应用上传后商店会再次签名生成AppID,之后再复制商店的AppID填入</p>
<h2 id="7-打开MainPage-xaml添加LayerRoot"><a href="#7-打开MainPage-xaml添加LayerRoot" class="headerlink" title="7. 打开MainPage.xaml添加LayerRoot"></a>7. 打开<code>MainPage.xaml</code>添加<code>LayerRoot</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Grid x:Name=&quot;LayoutRoot&quot;&gt;</span><br><span class="line">&lt;!--LayoutRoot is the root grid where all page content is placed--&gt;</span><br><span class="line">&lt;DrawingSurfaceBackgroundGrid x:Name=&quot;DrawingSurfaceBackground&quot; Loaded=&quot;DrawingSurfaceBackground_Loaded&quot;&gt;</span><br><span class="line">&lt;/DrawingSurfaceBackgroundGrid&gt;</span><br><span class="line">&lt;/Grid&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/2015/06/30/Unity-wp8-SDK-aiYingYong/Wp8-SDK-aiYingYong-mainPage.png"></p>
<h2 id="8-打开AppXaml-cs在App的构造函数结尾添加SDK初始化方法"><a href="#8-打开AppXaml-cs在App的构造函数结尾添加SDK初始化方法" class="headerlink" title="8. 打开AppXaml.cs在App的构造函数结尾添加SDK初始化方法"></a>8. 打开<code>AppXaml.cs</code>在<code>App</code>的构造函数结尾添加SDK初始化方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//初始化新峰支付</span><br><span class="line">Payment.Initialize(SDKConfig.SupplyId, SDKConfig.GameId, Xapcn.PaymentSdk.Common.LanguageType.ZH, RootFrame);</span><br></pre></td></tr></table></figure>

<h2 id="9-打开MainPage-xaml-cs-添加SDK业务逻辑"><a href="#9-打开MainPage-xaml-cs-添加SDK业务逻辑" class="headerlink" title="9. 打开MainPage.xaml.cs,添加SDK业务逻辑"></a>9. 打开<code>MainPage.xaml.cs</code>,添加SDK业务逻辑</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//SDK 配置</span><br><span class="line">public static class SDKConfig&#123;</span><br><span class="line">//游戏ID</span><br><span class="line">public static string GameId = &quot;xxx&quot;;</span><br><span class="line">//厂商ID</span><br><span class="line">public static string SupplyId = &quot;xxx&quot;;</span><br><span class="line">//支付回调地址</span><br><span class="line">public static string PayURL = &quot;xxx&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#region sdk接入</span><br><span class="line">//次方法为WP中Unity入口</span><br><span class="line">private void Unity_Loaded()&#123;</span><br><span class="line">SetupGeolocator();</span><br><span class="line">try&#123;</span><br><span class="line">long result =</span><br><span class="line">(long)DeviceExtendedProperties.GetValue(&quot;ApplicationWorkingSetLimit&quot;);</span><br><span class="line">UnityEngine.Debug.Log(result);</span><br><span class="line">&#125;</span><br><span class="line">catch (ArgumentOutOfRangeException)&#123;</span><br><span class="line">&#125;</span><br><span class="line">wpp = WpPlatform.GetInstance();</span><br><span class="line">wpp.initLogin = InitSDK;</span><br><span class="line">wpp.goToPay = GoToPay;</span><br><span class="line">InitSDK();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void InitSDK()&#123;</span><br><span class="line">Dispatcher.BeginInvoke(() =&gt;&#123;</span><br><span class="line">//此处初始化登录</span><br><span class="line">Account.AccountInit(SDKConfig.GameId, SDKConfig.SupplyId, LayoutRoot, this, true);</span><br><span class="line">//此处注册登录结果回调事件</span><br><span class="line">Account.LoginStateCallback += Account_LoginStateCallback;</span><br><span class="line">//此处注册登录框被用户手动关闭事件</span><br><span class="line">Account.LoginCloseCallback += Account_LoginCloseCallback;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Account_LoginCloseCallback()&#123;</span><br><span class="line">//   MessageBox.Show(&quot;登入未完成，用户手动关闭了登入框&quot;);</span><br><span class="line">UnityEngine.Application.Quit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 登入结果返回事件.</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;loginState&quot;&gt;State of the login.&lt;/param&gt;</span><br><span class="line">void Account_LoginStateCallback(_51Wp.AccountSdk.Net.Datas.LoginStateData loginState)&#123;</span><br><span class="line">if (loginState.ReturnCode == &quot;0&quot;)&#123;</span><br><span class="line">//此处增加防伪造登录校验</span><br><span class="line">string strUrl = &quot;http://www.51wp.com/winphone/index.php?s=/oauth2/checkAccount&amp;uid=&#123;0&#125;&amp;datetime=&#123;1&#125;&amp;uniqueid=&#123;2&#125;&quot;;</span><br><span class="line">var token = loginState.Token;</span><br><span class="line">var times = loginState.LoginTime;</span><br><span class="line">var uid = loginState.UserId;</span><br><span class="line">string urlPath = string.Format(strUrl, new string[] &#123; uid, times, token &#125;);</span><br><span class="line">var client = new WebClient();</span><br><span class="line">client.DownloadStringAsync(new Uri(urlPath, UriKind.Absolute));</span><br><span class="line">client.DownloadStringCompleted += (ss, ee) =&gt;&#123;</span><br><span class="line">if (ee.Error == null)&#123;</span><br><span class="line">if (ee.Result.ToString() == &quot;0&quot;)//0为正常登录，非0为伪造登录&#123;</span><br><span class="line">//   MessageBox.Show(&quot;登录成功，玩家信息：username=&quot; + loginState.UserName + &quot;,userId=&quot; + loginState.UserId);</span><br><span class="line">String aa = loginState.UserName;</span><br><span class="line">String bb = loginState.UserId;</span><br><span class="line">WpPlatform.GetInstance().LoginResult(true, aa, bb);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">//    MessageBox.Show(&quot;登录失败，为伪造登录！&quot;);</span><br><span class="line">WpPlatform.GetInstance().LoginResult(false, &quot;&quot;, &quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">WpPlatform.GetInstance().LoginResult(false, &quot;&quot;, &quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void GoToPay(string playerId, string goodsId, string goodsName, int count, string unitPrice, string finalPrice)&#123;</span><br><span class="line">string ss = (&quot;\n&quot; + goodsId + &quot;\n&quot; + goodsName + &quot;\n&quot; + count + unitPrice + &quot;\n&quot; + finalPrice + &quot;\n&quot;);</span><br><span class="line">UnityEngine.Debug.Log(ss);</span><br><span class="line">Dispatcher.BeginInvoke(() =&gt;&#123;</span><br><span class="line">//用户类型  强制注册用户</span><br><span class="line">PaymentType PlayerType = PaymentType.RegistedUser;</span><br><span class="line">//此处选择浏览器类型，对于部分消耗资源较大的游戏建议使用PayBehaviorType.OutIEPay外置浏览器</span><br><span class="line">PayBehaviorType WebType = PayBehaviorType.WebPayCentre;</span><br><span class="line">this.IsEnabled = false;</span><br><span class="line">Payment.CreateOrder(PlayerType, playerId, goodsId, goodsName, count, double.Parse(unitPrice), double.Parse(finalPrice), SDKConfig.PayURL);</span><br><span class="line">try&#123;</span><br><span class="line">//开始支付</span><br><span class="line">Payment.Pay(WebType,</span><br><span class="line">(er, code) =&gt;&#123;</span><br><span class="line">//处理商品的发送逻辑</span><br><span class="line">//只有当errorCode=0时为支付成功，否则为支付失败</span><br><span class="line">if (code.Result.ErrorCode == 0)&#123;</span><br><span class="line">wpp.payCallBack(true);</span><br><span class="line">UnityEngine.Debug.Log(&quot;订单号: &quot; + code.Result.OrderId + &quot;\r\n商品编号: &quot; + code.Result.GoodsId + &quot;\r\n商品名称: &quot; + code.Result.GoodsName + &quot;\r\n商品价格: &quot; + code.Result.GoodsPrice + &quot;\r\n玩家帐号: &quot; + code.Result.PlayerId + &quot;\r\n游戏唯一编号: &quot; + code.Result.GameId + &quot; \r\n订单状态：支付成功，可以发放道具商品了&quot;);</span><br><span class="line">//    MessageBox.Show(&quot;订单号: &quot; + code.Result.OrderId + &quot;\r\n商品编号: &quot; + code.Result.GoodsId + &quot;\r\n商品名称: &quot; + code.Result.GoodsName + &quot;\r\n商品价格: &quot; + code.Result.GoodsPrice + &quot;\r\n玩家帐号: &quot; + code.Result.PlayerId + &quot;\r\n游戏唯一编号: &quot; + code.Result.GameId + &quot; \r\n订单状态：支付成功，可以发放道具商品了&quot;, &quot;支付成功&quot;, MessageBoxButton.OK);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">wpp.payCallBack(false);</span><br><span class="line">UnityEngine.Debug.Log(&quot;订单号: &quot; + code.Result.OrderId + &quot;\r\n商品编号: &quot; + code.Result.GoodsId + &quot;\r\n商品名称: &quot; + code.Result.GoodsName + &quot;\r\n商品价格: &quot; + code.Result.GoodsPrice + &quot;\r\n玩家帐号: &quot; + code.Result.PlayerId + &quot;\r\n游戏唯一编号: &quot; + code.Result.GameId + &quot; \r\n订单状态：支付失败&quot;);</span><br><span class="line">&#125;</span><br><span class="line">GC.Collect();//释放资源</span><br><span class="line">&#125;);</span><br><span class="line">this.IsEnabled = true;</span><br><span class="line">&#125;</span><br><span class="line">catch (Exception ex)&#123;</span><br><span class="line">Dispatcher.BeginInvoke(() =&gt;&#123;</span><br><span class="line">this.IsEnabled = true;</span><br><span class="line">MessageBox.Show(ex.Message);</span><br><span class="line">UnityEngine.Debug.Log(ex.Message);</span><br><span class="line">wpp.payCallBack(false);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#endregion</span><br></pre></td></tr></table></figure>
<h2 id="10-接入手机直接Run就行了-前提是手机为开发机。"><a href="#10-接入手机直接Run就行了-前提是手机为开发机。" class="headerlink" title="10. 接入手机直接Run就行了,前提是手机为开发机。"></a>10. 接入手机直接Run就行了,前提是手机为开发机。</h2><p>如需要部署XAP文件,则使用VS2015配套的<code>Windows Phone Application Deployment 8.1</code>选择安装包,点击部署即可.<br><img src="/2015/06/30/Unity-wp8-SDK-aiYingYong/Wp8-Deploy.png"><br>如果手机未开启开发者模式,打开VS2015配套的<code>Windows Phone Developer Registration 8.1</code>输入开发者账号，点击解锁等待一下即可。<br><img src="/2015/06/30/Unity-wp8-SDK-aiYingYong/Wp8-Dev-Registe.png"><br>需要注意的是,即使是开发者也只能在开发机上同时部署10个开发者应用(使用爱应用安装的破解软件也属于开发者应用),超过卸载多余的软件即可继续部署。</p>
<hr>
<h2 id="07-02添加新爱应用统计"><a href="#07-02添加新爱应用统计" class="headerlink" title="07-02添加新爱应用统计"></a>07-02添加新爱应用统计</h2><p>添加对<code>XAPCNStatistics.dll</code>的引用<br>在<code>App.xaml.cs</code>的<code>Application_Launching</code>方法中添加如下方法,初始化爱应用统计</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private void Application_Launching(object sender, LaunchingEventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">            XAPCNStatistics.InitStatistics init = new XAPCNStatistics.InitStatistics();</span><br><span class="line">            init.Action(SDKConfig.GameId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>WindowsPhone</tag>
        <tag>SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS中调用系统功能</title>
    <url>/2015/03/23/iOS-Native-func/</url>
    <content><![CDATA[<p>iphone调用系统电话、浏览器、地图、邮件等</p>
<span id="more"></span>
<p>openURL的使用方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:appString]];</span><br></pre></td></tr></table></figure>
<p>其中系统的appString有：</p>
<ol>
<li>Map <a href="http://maps.google.com/maps?q=Shanghai">http://maps.google.com/maps?q=Shanghai</a></li>
<li>Email mailto:&#x2F;&#x2F;<a href="mailto:&#109;&#121;&#110;&#x61;&#x6d;&#x65;&#x40;&#103;&#111;&#x6f;&#103;&#108;&#101;&#x2e;&#x63;&#111;&#109;">&#109;&#121;&#110;&#x61;&#x6d;&#x65;&#x40;&#103;&#111;&#x6f;&#103;&#108;&#101;&#x2e;&#x63;&#111;&#109;</a></li>
<li>Tel tel:&#x2F;&#x2F;10086</li>
<li>Msg sms:&#x2F;&#x2F;10086</li>
</ol>
<p>openURL能帮助你运行Maps，SMS，Browser,Phone甚至其他的应用程序。这是iPhone开发中经常需要用到的一段代码，它仅仅只有一行而已。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//打开地图</span><br><span class="line">– (IBAction)openMaps &#123;</span><br><span class="line">NSString *addressText = @&quot;beijing&quot;; </span><br><span class="line">//@&quot;1Infinite Loop, Cupertino, CA 95014&quot;;</span><br><span class="line">addressText =[addressText stringByAddingPercentEscapesUsingEncoding:NSASCIIStringEncoding];</span><br><span class="line">NSString*urlText = [NSString stringWithFormat:</span><br><span class="line">@&quot;http://maps.google.com/maps?q=%@&quot;,addressText];</span><br><span class="line">NSLog(@&quot;urlText=============== %@&quot;, urlText);</span><br><span class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlText]];</span><br><span class="line">&#125;</span><br><span class="line">//打开mail</span><br><span class="line">– (IBAction)openEmail &#123;</span><br><span class="line">[[UIApplication sharedApplication]openURL:[NSURL URLWithString:@&quot;mailto://devprograms@apple.com&quot;]];</span><br><span class="line">&#125;</span><br><span class="line">//拨打电话</span><br><span class="line">– (IBAction)openPhone &#123;</span><br><span class="line">[[UIApplication sharedApplication] openURL:[NSURLURLWithString:@&quot;tel://8004664411&quot;]];</span><br><span class="line">&#125;</span><br><span class="line">//打开短信</span><br><span class="line">– (IBAction)openSms &#123;</span><br><span class="line">[[UIApplication sharedApplication] openURL:[NSURLURLWithString:@&quot;sms://466453&quot;]];</span><br><span class="line">&#125;</span><br><span class="line">//打开浏览器</span><br><span class="line">-(IBAction)openBrowser &#123;</span><br><span class="line">[[UIApplication sharedApplication] openURL:[NSURLURLWithString:@&quot;http://itunesconnect.apple.com&quot;]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity发布WP8遇到的坑</title>
    <url>/2015/06/30/Unity-wp8-release/</url>
    <content><![CDATA[<span id="more"></span>

<h1 id="1-程序进入后台字体释放"><a href="#1-程序进入后台字体释放" class="headerlink" title="1. 程序进入后台字体释放"></a>1. 程序进入后台字体释放</h1><p>目前项目用的NGUI的为3.0.2，版本较低，在发布后出现程序进入后台再切回来动态字体全部消失的问题，据说新版本修正了这个Bug，百度了一下有人遇到过且完美解决，于是抄了一下。<br>原文链接<a href="http://blog.csdn.net/chrisfxs/article/details/44102993">unity ngui wp8上使用动态字体消失或碎片化的问题</a><br>在<code>UIWidget</code>中加入以下代码即可:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#if !UNITY_EDITOR    </span><br><span class="line">/// &lt;summary&gt;    </span><br><span class="line">/// Mark the UI as changed when returning from paused state.    </span><br><span class="line">/// &lt;/summary&gt;       </span><br><span class="line">void OnApplicationPause (bool paused) &#123; if (!paused) MarkAsChanged(); &#125;    </span><br><span class="line">#endif    </span><br></pre></td></tr></table></figure>

<h1 id="2-Unity与WP通信"><a href="#2-Unity与WP通信" class="headerlink" title="2. Unity与WP通信"></a>2. Unity与WP通信</h1><p>WP与Unity的通讯时一个坑,只能通过WP去找Unity的方法,而Unity无法获取到WP的方法。<br>根据Unity<a href="http://docs.unity3d.com/Manual/wp8-unity-interaction.html">官方文档的方法</a>,总是报空指针，也就是说在WP里无法直接去取到Unity场景中的GameObject(这里比较诡异的是，文档底部给出的参考工程却可以取到,我只能猜测是Unity版本不一致的问题)。<br>最终采取的方法是在Unity里构建一个用于管理WP的SDK的单例类,提供委托函数,由WP来注册,在此又造成了一个新的坑<strong>只有在主线程中才可以操控UI</strong>,不管是Unity中的UGUI、NGUI还是WP自己的UI，此时需要将代码注入主线程中执行,方式如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Dispatcher.BeginInvoke(() =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">              //此处添加需要的代码</span><br><span class="line">          &#125;);</span><br></pre></td></tr></table></figure>

<p>具体SDK的接入:<a href="../../../../../2015/06/30/Unity-wp8-SDK-aiYingYong">WP8接入爱应用SDK</a></p>
<h1 id="3-Build报错问题"><a href="#3-Build报错问题" class="headerlink" title="3. Build报错问题"></a>3. Build报错问题</h1><p>WP最大的坑就是Unity中跑的好好的在Build的时候报了一堆<code>方法在目标平台不存在</code>的问题。经过查阅资料,发现WP平台在Build是使用的.NET API for Windows Phone,并不像其他平台一样使用的Mono，找到问题所在便开始修复。虽然报错信息量很大,但基本原因都是方法缺失，对照API修改方法即可,但改一个错误往往就能少几十行,所以过程并不复杂，只是耗费时间比较多。<br>API参考:<a href="https://msdn.microsoft.com/en-us/library/windows/apps/jj207211(v=vs.105).aspx"> .NET API for Windows Phone</a></p>
<p>目前遇到的以下问题:</p>
<ul>
<li>Timer类缺少方法</li>
<li>Socket类缺少方法</li>
<li>sqlite无解,改为excel转xml</li>
<li>流光shader中的Flash方法不支持</li>
<li>File.GetFiles方法缺失</li>
</ul>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>WindowsPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>PS4手柄键位映射与Unity输入管理器</title>
    <url>/2015/09/26/ps4-joyhand-key/</url>
    <content><![CDATA[<p>今天在做PS4手柄控制，百度上居然找不到键位映射，只好自己一个个测出来</p>
<span id="more"></span>

<h3 id="PS4手柄"><a href="#PS4手柄" class="headerlink" title="PS4手柄"></a>PS4手柄</h3><p>PS4的手柄输入分为两种:</p>
<blockquote>
<p>第一种为<code>joy stick buttton</code> x 13 为按键输入(0&#x2F;1)<br>  第二种为 <code>axis</code> x 9 为 摇杆输入(-1~1) </p>
</blockquote>
<p>按键输入只能取到0和1两个值，摇杆输入获取的是偏移量，成对儿出现，范围从－1到1<br>部分摇杆同时提供按键输入</p>
<p>注意: 左上的方向键为单纯的摇杆输入，不提供数字量</p>
<p>按键映射如下:<br><img src="/2015/09/26/ps4-joyhand-key/ps4-joypad.png" alt="PS4手柄"></p>
<p>###Unity的输入管理器</p>
<p>Unity的输入管理器是一个很强大的功能，他将各种输入设备的输入统一起来，使得你只要在这里配置好，就可以在代码中获得统一的输入<br>这里的设置对于移动平台无效<br>下面挑几个重点参数的说一下功能</p>
<p>| 属性        	   	| 功能    										|<br>|——————	| :——————————————-	|<br>| Axes      		| Unity的输入单位为Axes，此处可配置数量size 			|<br>| Name      		| Axes的名字作为在代码里检测的唯一标识  				|<br>| Negative Button 	| 反向输入，有一个备选按钮Alt Negative Button    	|<br>| Positive Button   | 正向输入，有一个备选按钮Alt Positive Buttton      |<br>| Gravity			| 摇杆归零速度,仅用于键鼠这类虚拟摇杆					|<br>| Dead				| 阀值，小于该数字的输入会被认为是0					|<br>| Sensitivity		| 灵敏度，对于按键是响应时间，对于鼠标为移动缩放		|<br>| Snap				| 取消粘滞，用于键鼠，输入反相时输入变为0				|<br>| Invert			| 反转输入										|<br>| Type				| 输入类型，有键鼠、摇杆的轴、鼠标移动					|<br>| Axis 				| 输入轴,xy为水平竖直,3rd为滚轮或摇杆第三个轴			|<br>| Joy Num  			| 选用的摇杆轴的编号,一个方向为一个轴,默认接收全部		|</p>
<p>###附加</p>
<p>今天用PS4手柄在Win10上玩进化之地2，没装驱动之前，手柄按键错乱的一塌糊涂<br>装了一个驱动后游戏可以完美运行了，但是我切会Unity时，发现早上测的键位全乱了<br>吓得我赶紧把驱动程序关了，然后就正常了，查了一下，这个该死的驱动程序把PS4的手柄给我映射到xBox上去了</p>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>SublimeText技巧</title>
    <url>/2015/06/01/sublime-skill-hotkey/</url>
    <content><![CDATA[<p>设置快捷键格式化文本</p>
<p>选择“菜单栏”-&gt;“user-key-setting”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;“keys”: [“ctrl+i”], “command”: “reindent” , “args”: &#123;“single_line”: false&#125;&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>在资源管理目录忽略文件类型</p>
<p>选择“菜单栏”-&gt;“Settings – User”，在出现的文件中添加以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">“file_exclude_patterns”: [“*.jpg”, “*.gif”,”*.png”]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SublimeText</category>
      </categories>
      <tags>
        <tag>SublimeText</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos Studio引起的Xamarin Studio闪退问题</title>
    <url>/2015/07/09/Xamarin-vs-Cocos/</url>
    <content><![CDATA[<p>一直使用<code>Xamarin Studio</code>作为代码编辑器配合Unity做开发,之前有过一次<code>Xamarin Studio</code>无法打开,各种重装后无果，最后格盘重装系统才解决,今天同事偶然重现了。<br>查找了一下最后发现是<code>Cocos Studio</code>的问题，纪录一下。</p>
<span id="more"></span>
<p>Bug重现方法为</p>
<ol>
<li>安装<code>Xamarin Studio</code>依赖包<code>  MonoFramework-MRE-3.12.0.macos10.xamarin.x86.pkg</code></li>
<li>安装<code>Xamarin Studio</code>,任意版本,此时一切正常</li>
<li>安装<code>CocosForMac</code>，任意版本，此时<code>Xamarin</code>打开情况下一切正常</li>
<li>一旦关闭了<code>Xamarin</code>就再也打不开了,表现为无限闪退</li>
</ol>
<p>经过尝试在重装了<code>MonoFramework-MRE-3.12.0.macos10.xamarin.x86.pkg</code>之后便可正常使用,于是再次安装<code>CocosForMac</code><br>安装时查看包内容<code>Contents</code>-&gt;<code>Resources</code>-&gt;<code>Mono-MRE-For-CCS.pkg</code>,基本可以推断就是<code>Mono-MRE-For-CCS.pkg</code>覆盖了<code>MonoFramework-MRE-3.12.0.macos10.xamarin.x86.pkg</code>导致了这个问题,然而为什么<code>CocosForMac</code>需要<code>Mono</code>,暂时不得而知。</p>
]]></content>
      <categories>
        <category>Software Compatible</category>
      </categories>
  </entry>
  <entry>
    <title>Unity调用iOS推送消息</title>
    <url>/2015/03/27/unity-to-ios-msg/</url>
    <content><![CDATA[<p>在Unity中调用iOS消息推送,所有代码在Unity中完成<br>所有代码在Unity内完成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public Text label;</span><br><span class="line"></span><br><span class="line">void Start ()</span><br><span class="line">&#123;</span><br><span class="line">	CleanNotification ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//清空所有本地消息</span><br><span class="line">void CleanNotification ()</span><br><span class="line">&#123;</span><br><span class="line">	LocalNotification l = new LocalNotification ();</span><br><span class="line">	l.applicationIconBadgeNumber = -1;</span><br><span class="line">	NotificationServices.PresentLocalNotificationNow (l);</span><br><span class="line">	NotificationServices.CancelAllLocalNotifications ();</span><br><span class="line">	NotificationServices.ClearLocalNotifications ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//本地推送 你可以传入一个固定的推送时间</span><br><span class="line">public static void Push(string message,System.DateTime newDate,bool isRepeatDay)</span><br><span class="line">&#123;</span><br><span class="line">	//推送时间需要大于当前时间</span><br><span class="line">	if(newDate &gt; System.DateTime.Now)</span><br><span class="line">	&#123;</span><br><span class="line">		LocalNotification localNotification = new LocalNotification();</span><br><span class="line">		localNotification.fireDate =newDate;</span><br><span class="line">		localNotification.alertBody = message;</span><br><span class="line">		localNotification.applicationIconBadgeNumber = 1;</span><br><span class="line">		localNotification.hasAction = true;</span><br><span class="line">		if(isRepeatDay)</span><br><span class="line">		&#123;</span><br><span class="line">			//是否每天定期循环</span><br><span class="line">			localNotification.repeatCalendar = CalendarIdentifier.ChineseCalendar;</span><br><span class="line">			localNotification.repeatInterval = CalendarUnit.Day;</span><br><span class="line">		&#125;</span><br><span class="line">		localNotification.soundName = LocalNotification.defaultSoundName;</span><br><span class="line">		NotificationServices.ScheduleLocalNotification(localNotification);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void ClickPush()&#123;</span><br><span class="line">	label.text = &quot;十秒钟后推送&quot; ;</span><br><span class="line">	Push(&quot;Wonderm :\t 十秒钟后推送&quot;,System.DateTime.Now.AddSeconds(10),false);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Unity</category>
      </categories>
      <tags>
        <tag>Unity</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
</search>
